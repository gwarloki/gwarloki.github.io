{"title":"SCA软件成分分析前期探索","uid":"e996202d66a481abb2ff37739071b61f","slug":"SCA软件成分分析前期探索","date":"2022-06-17T04:52:00.000Z","updated":"2022-10-26T08:05:03.210Z","comments":true,"path":"api/articles/SCA软件成分分析前期探索.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4046-3049997.png","content":"<h1 id=\"SCA软件成分分析前期探索\"><a href=\"#SCA软件成分分析前期探索\" class=\"headerlink\" title=\"SCA软件成分分析前期探索\"></a>SCA软件成分分析前期探索</h1><h2 id=\"概述和背景\"><a href=\"#概述和背景\" class=\"headerlink\" title=\"概述和背景\"></a>概述和背景</h2><h3 id=\"SCA概念\"><a href=\"#SCA概念\" class=\"headerlink\" title=\"SCA概念\"></a>SCA概念</h3><p>SCA(Software Composition Analysis)软件成分分析技术主要就是针对开源软件以及第三方商业软件设计的各种源码、源码库、模块和框架，识别和清点开源软件的组件及其构成和依赖关系，并识别已知的安全漏洞或潜在的许可授权问题，争取在应用系统上线前发现并解决这些风险。它有助于确保企业软件供应链仅包含安全的组件，从而支持安全应用程序开发和组装。</p>\n<h3 id=\"SCA需求\"><a href=\"#SCA需求\" class=\"headerlink\" title=\"SCA需求\"></a>SCA需求</h3><ul>\n<li>支持多种语言的深度扫描能力</li>\n<li>具备CI&#x2F;CD集成自动化能力，并且将其扫描结果作为交付质量关卡、保证软件交付质量</li>\n<li>具备可视化漏洞分析报表和license报表，以可视化漏洞的监管能力和可视化企业使用license的情况</li>\n<li>拥有对开源漏洞数据库、商业漏洞数据库、本地漏洞数据中心和其他漏洞扫描工具的集成能力，通过不同的漏洞数源丰富SCA工具对第三方安全漏洞的判断能力</li>\n<li>能够进行正向依赖分析从而定位漏洞位置，以及进行反向依赖分析自动化地分析漏洞的影响范围</li>\n<li>自定义告警配置、通知和自动化能力，以提供企业漏洞的快速响应能力</li>\n</ul>\n<h2 id=\"漏洞数据库\"><a href=\"#漏洞数据库\" class=\"headerlink\" title=\"漏洞数据库\"></a>漏洞数据库</h2><h3 id=\"google-开源洞见\"><a href=\"#google-开源洞见\" class=\"headerlink\" title=\"google 开源洞见\"></a>google 开源洞见</h3><p><a href=\"https://deps.dev/\">Open Source Insights</a>是谷歌的一项实验项目，由Google 云平台提供。提供npm、Maven、PyPi、NuGut、Go等语言的开源软件包查询。<br><img src=\"http://img.moses.wang/20220617152305.png\"><br>查询结果包括项目信息：</p>\n<ul>\n<li>项目描述</li>\n<li>link连接<ul>\n<li>repo</li>\n<li>homepage</li>\n<li>orgin</li>\n</ul>\n</li>\n<li>版本信息</li>\n<li>开源协议</li>\n<li>事件历史<br>项目安全信息：</li>\n<li>安全公告</li>\n<li>版本比较</li>\n<li><a href=\"https://deps.dev/maven/com.alibaba%3Afastjson/2.0.7/dependents\">Dependents</a></li>\n<li><a href=\"https://deps.dev/maven/com.alibaba%3Afastjson/2.0.7/dependencies\">Dependencies</a></li>\n</ul>\n<p><img src=\"http://img.moses.wang/20220617152544.png\"></p>\n<p><img src=\"http://img.moses.wang/20220617153113.png\"><br><strong>同时，提供公共数据集，可以使用<a href=\"https://cloud.google.com/bigquery\">BigQuery</a>查询分析使用</strong>，当然如果不考虑网络的问题也可以<strong>使用Grafana搭建分析视图</strong><br><a href=\"https://grafana.com/grafana/plugins/doitintl-bigquery-datasource/\">Grafana的bigquery插件</a><strong>类似Linux开源基金会曾经的一个项目</strong><br><a href=\"https://metrics.openssf.org/grafana/\">metrics</a><br><img src=\"http://img.moses.wang/new/20220822133548.png\"><br>进阶-&gt;:<a href=\"https://hksanduo.github.io/2022/05/18/2022-05-18-google-bigquery-config-proxy/\">谷歌 bigquery 配置代理</a></p>\n<h4 id=\"bigquery-public-data-deps-dev-v1-Projects\"><a href=\"#bigquery-public-data-deps-dev-v1-Projects\" class=\"headerlink\" title=\"bigquery-public-data.deps_dev_v1.Projects\"></a>bigquery-public-data.deps_dev_v1.Projects</h4><p>The type of the project, example values include ‘APACHE_JIRA’, ‘BITBUCKET’, ‘GITHUB’ and ‘GITLAB’.<br><img src=\"http://img.moses.wang/20220617134016.png\"></p>\n<h4 id=\"bigquery-public-data-deps-dev-v1-PackageVersions\"><a href=\"#bigquery-public-data-deps-dev-v1-PackageVersions\" class=\"headerlink\" title=\"bigquery-public-data.deps_dev_v1.PackageVersions\"></a>bigquery-public-data.deps_dev_v1.PackageVersions</h4><p><img src=\"http://img.moses.wang/20220617134329.png\"></p>\n<h4 id=\"bigquery-public-data-deps-dev-v1-Dependencies\"><a href=\"#bigquery-public-data-deps-dev-v1-Dependencies\" class=\"headerlink\" title=\"bigquery-public-data.deps_dev_v1.Dependencies\"></a>bigquery-public-data.deps_dev_v1.Dependencies</h4><p><img src=\"http://img.moses.wang/20220617140602.png\"></p>\n<h4 id=\"bigquery-public-data-deps-dev-v1-Advisories\"><a href=\"#bigquery-public-data-deps-dev-v1-Advisories\" class=\"headerlink\" title=\"bigquery-public-data.deps_dev_v1.Advisories\"></a>bigquery-public-data.deps_dev_v1.Advisories</h4><p><img src=\"http://img.moses.wang/20220617141404.png\"></p>\n<h4 id=\"license查询\"><a href=\"#license查询\" class=\"headerlink\" title=\"license查询\"></a>license查询</h4><p><img src=\"http://img.moses.wang/20220617133329.png\"><br>查询结果</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123; &quot;System&quot;: &quot;CARGO&quot;, &quot;License&quot;: &quot;MIT&quot;, &quot;NPackages&quot;: &quot;36775&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;CARGO&quot;, &quot;License&quot;: &quot;Apache-2.0 OR MIT&quot;, &quot;NPackages&quot;: &quot;22671&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;CARGO&quot;, &quot;License&quot;: &quot;Apache-2.0&quot;, &quot;NPackages&quot;: &quot;9958&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;GO&quot;, &quot;License&quot;: &quot;MIT&quot;, &quot;NPackages&quot;: &quot;216790&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;GO&quot;, &quot;License&quot;: &quot;Apache-2.0&quot;, &quot;NPackages&quot;: &quot;108678&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;GO&quot;, &quot;License&quot;: &quot;BSD-3-Clause&quot;, &quot;NPackages&quot;: &quot;28823&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;MAVEN&quot;, &quot;License&quot;: &quot;Apache-2.0&quot;, &quot;NPackages&quot;: &quot;263361&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;MAVEN&quot;, &quot;License&quot;: &quot;MIT&quot;, &quot;NPackages&quot;: &quot;75302&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;MAVEN&quot;, &quot;License&quot;: &quot;non-standard&quot;, &quot;NPackages&quot;: &quot;68080&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;NPM&quot;, &quot;License&quot;: &quot;MIT&quot;, &quot;NPackages&quot;: &quot;3229651&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;NPM&quot;, &quot;License&quot;: &quot;ISC&quot;, &quot;NPackages&quot;: &quot;1003365&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;NPM&quot;, &quot;License&quot;: &quot;Apache-2.0&quot;, &quot;NPackages&quot;: &quot;235446&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;PYPI&quot;, &quot;License&quot;: &quot;MIT&quot;, &quot;NPackages&quot;: &quot;105168&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;PYPI&quot;, &quot;License&quot;: &quot;non-standard&quot;, &quot;NPackages&quot;: &quot;50207&quot;&#125;\n\n&#123; &quot;System&quot;: &quot;PYPI&quot;, &quot;License&quot;: &quot;Apache-2.0&quot;, &quot;NPackages&quot;: &quot;22749&quot;&#125;</code></pre>\n<h3 id=\"CPE开放数据\"><a href=\"#CPE开放数据\" class=\"headerlink\" title=\"CPE开放数据\"></a>CPE开放数据</h3><p><a href=\"https://csrc.nist.gov/projects/security-content-automation-protocol/specifications/cpe\">CPE</a>CPE（Common Platform Enumeration，CPE国家漏洞数据库）数据库是一个包含产品、其版本、供应商等信息的列表。要实现SCA，必须获得CPE和CVE的通信信息。</p>\n<h4 id=\"CPE和CVE数据-API\"><a href=\"#CPE和CVE数据-API\" class=\"headerlink\" title=\"CPE和CVE数据-API\"></a>CPE和CVE数据-API</h4><p>在官方网站<a href=\"https://nvd.nist.gov/\">国家脆弱性数据库</a>上找到CPE数据库和CVE合规性。获取必要信息的方法之一是使用Rest API。<a href=\"https://csrc.nist.gov/CSRC/media/Projects/National-Vulnerability-Database/documents/web%20service%20documentation/Automation%20Support%20for%20CPE%20Retrieval.pdf\">这里</a>描述了它。例如，以下查询允许我们获取CPE数据库的前20个元素，包括相应的CVE：<br><a href=\"https://services.nvd.nist.gov/rest/json/cpes/1.0?addOns=cves\">测试</a><br><img src=\"http://img.moses.wang/20220618140433.png\"><br><strong>以下是ActivePerl的CPE示例：</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123; &quot;deprecated&quot;: false, &quot;cpe23Uri&quot;: &quot;cpe:2.3:a:activestate:activeperl:-:*:*:*:*:*:*:*&quot;, &quot;lastModifiedDate&quot;: &quot;2007-09-14T17:36Z&quot;, &quot;titles&quot;: [ &#123; &quot;title&quot;: &quot;ActiveState ActivePerl&quot;, &quot;lang&quot;: &quot;en_US&quot; &#125; ], &quot;refs&quot;: [], &quot;deprecatedBy&quot;: [], &quot;vulnerabilities&quot;: [ &quot;CVE-2001-0815&quot;, &quot;CVE-2004-0377&quot; ] &#125;</code></pre>\n<p>这里最重要的部分是“cpe23Uri”值。它以某种格式为我们提供了重要信息，当然还有“漏洞”（尽管它们不是CPE列表的一部分）。为了简单起见，我们将“cpe23Uri”字符串读作</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cpe:2.3:a:&lt;vendor&gt;:&lt;product&gt;:&lt;version&gt;:&lt;update&gt;:...</code></pre>\n<p>根据<a href=\"https://cpe.mitre.org/specification/\">规范</a>，代替其中一个片段的连字符意味着逻辑“NA”值。这可以解释为“值未设置”。代替片段的“*”字符意味着“任何”。</p>\n<p>当我们实现基于CPE的解决方案时，主要困难是为每个依赖项找到正确的元素。这里的问题是，<strong>库名称（在我们解析项目链接时获得）可能与相应的CPE条目不匹配</strong>。例如，CPE列表有以下“cpe23Uri”的条目：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cpe:2.3:a:microsoft:asp.net_model_view_controller:2.0:*:*:*:*:*:*:* cpe:2.3:a:microsoft:asp.net_model_view_controller:3.0:*:*:*:*:*:*:* cpe:2.3:a:microsoft:asp.net_model_view_controller:4.0:*:*:*:*:*:*:* cpe:2.3:a:microsoft:asp.net_model_view_controller:5.0:*:*:*:*:*:*:* cpe:2.3:a:microsoft:asp.net_model_view_controller:5.1:*:*:*:*:*:*:*</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>要检测 jar 包存在的漏洞，首先要有准确且足够全的漏洞库，最好能够契合 maven 坐标。NVD 漏洞最全，<strong>但以 cpe 格式标识漏洞的影响软件，使得建立 cpe 和 maven 坐标的对应关系比较麻烦</strong>。 DependencyCheck(<a href=\"https://github.com/jeremylong/DependencyCheck\">https://github.com/jeremylong/DependencyCheck</a>) 基于 NVD 漏洞库通过计算相似度来关联依赖和 cpe，不可避免的会存在误报和漏报。</p></blockquote>\n<h4 id=\"CPE和CVE数据-数据源\"><a href=\"#CPE和CVE数据-数据源\" class=\"headerlink\" title=\"CPE和CVE数据-数据源\"></a>CPE和CVE数据-数据源</h4><p><strong>数据源</strong><a href=\"https://nvd.nist.gov/vuln/data-feeds#JSON_FEED\">NVD - Data Feeds</a></p>\n<ul>\n<li>CPE: <a href=\"https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz\">https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.gz</a></li>\n<li>CWE: <a href=\"https://cwe.mitre.org/data/xml/cwec_latest.xml.zip\">https://cwe.mitre.org/data/xml/cwec_latest.xml.zip</a></li>\n<li>CVE:<ul>\n<li><a href=\"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2021.json.gz\">https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2021.json.gz</a></li>\n<li><a href=\"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2020.json.gz\">https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2020.json.gz</a></li>\n<li><a href=\"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2019.json.gz\">https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2019.json.gz</a></li>\n<li>[…]</li>\n<li><a href=\"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2002.json.gz\">https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2002.json.gz</a><br><img src=\"http://img.moses.wang/20220619134251.png\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"API和数据源类型\"><a href=\"#API和数据源类型\" class=\"headerlink\" title=\"API和数据源类型\"></a>API和数据源类型</h4><p><strong>名词解释</strong></p>\n<ul>\n<li>1.漏洞库：即漏洞数据库，主要是只大型的、公开的、业界公认的漏洞数据库。比如NVD、CNVD、exploit-db等。</li>\n<li>2.CVE ：即为每个漏洞确定了唯一的名称，通过它能帮助安全从业人员快速地在漏洞数据库中找到相应的漏洞信息。</li>\n<li>3.CPE ：即漏洞所关联的产品、版本、依赖路径或命名规范等信息，通过此信息，可以知道某个CVE所影响的组件版本和所在产品的依赖路径。</li>\n<li>4.CWE ：即漏洞的类型，比如某3个组件都存在SQL注入漏洞，这3个漏洞的CVE并不相同，但CWE都可描述为CWE-89 SQL注入类型的漏洞。</li>\n<li>5.CVSS ：即通用漏洞评分系统，通过对漏洞进行评分，来定义威胁的高、中、低以便区别，辅助制定漏洞修复策略。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CVE和CPE API</td>\n<td>传统漏洞数据提要文件的替代品。与JSON漏洞提要和CPE匹配提要相比，API要灵活得多，在单个界面中提供了更丰富的数据集。</td>\n</tr>\n<tr>\n<td>JSON脆弱性信息</td>\n<td>文件中的每个漏洞都包括来自CVE®词典提要的描述和相关参考链接，以及CVSS基本分数、易受攻击的产品配置和弱点分类。</td>\n</tr>\n<tr>\n<td>CPE比赛Feed</td>\n<td>根据官方CPE词典中的CPE匹配提供产品&#x2F;平台适用性声明到CPE URI匹配的提要。</td>\n</tr>\n<tr>\n<td>RSS漏洞Feed</td>\n<td>八天的安全相关软件缺陷窗口。</td>\n</tr>\n<tr>\n<td>漏洞翻译Feed</td>\n<td>漏洞提要的翻译。</td>\n</tr>\n<tr>\n<td>漏洞供应商评论</td>\n<td>供应商就影响产品内部的特定缺陷提供的评论。</td>\n</tr>\n<tr>\n<td>CPE词典</td>\n<td>包含产品列表的词典。</td>\n</tr>\n<tr>\n<td>通用配置枚举（CCE）参考数据</td>\n<td>常见配置项的参考数据。</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用GitHub安全公告advisory\"><a href=\"#使用GitHub安全公告advisory\" class=\"headerlink\" title=\"使用GitHub安全公告advisory\"></a>使用GitHub安全公告advisory</h3><p><a href=\"https://github.com/advisories\">GitHub Advisory</a>是在存储在GitHub上的开源项目中发现的漏洞数据库（CVE）。<br><img src=\"http://img.moses.wang/20220618140941.png\"><br>GitHub Advisory比CPE方便得多，[[SCA软件成分分析前期探索#google 开源洞见]]也使用该数据库。<br>Google开源软件洞见数据库导出的500条advisory如下：<br><img src=\"http://img.moses.wang/20220618141215.png\"></p>\n<p>要以编程方式访问GitHub Advisory，我们需要使用<a href=\"https://developer.github.com/v4/explorer?query=%7B%0A%20%20securityAdvisories(orderBy:%20%7Bfield:%20PUBLISHED_AT,%20direction:%20DESC%7D,%20first:%2010)%20%7B%0A%20%20%20%20nodes%20%7B%0A%20%20%20%20%20%20description%0A%20%20%20%20%20%20ghsaId%0A%20%20%20%20%20%20summary%0A%20%20%20%20%20%20publishedAt%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A\">GraphQL API</a>查询。<br><a href=\"https://docs.github.com/en/graphql/overview/explorer\">Explorer - GitHub Docs</a></p>\n<h3 id=\"snyk-开源漏洞库\"><a href=\"#snyk-开源漏洞库\" class=\"headerlink\" title=\"snyk 开源漏洞库\"></a>snyk 开源漏洞库</h3><p><a href=\"https://snyk.io/vuln\">Snyk Vulnerability Database | Snyk</a>开源数据可以进行漏洞及开源软件查询,支持各种包管理器如Linux、maven、NPM等。<br><img src=\"http://img.moses.wang/20220619175836.png\"><br><strong>该漏洞库以 groupId:artifactId 作为软件名称，以版本区间的方式表示影响范围，SCA 在检测漏洞时，仅需要从 mavenTree 中取出 jar 包版本与漏洞库中的版本区间作比较即可</strong><br><img src=\"http://img.moses.wang/20220619182106.png\"><br><a href=\"https://snyk.docs.apiary.io/#introduction/rest-api\">Snyk API · Apiary</a>API接口支持REST接口调用，<strong>📢API需要商业付费的用户或组织才能够使用，免费个人用户无权访问API</strong><br><img src=\"http://img.moses.wang/20220619181033.png\"><br><strong>付费计划</strong><br><img src=\"http://img.moses.wang/20220619181615.png\"></p>\n<h2 id=\"开源第三方安全扫描工具SCA\"><a href=\"#开源第三方安全扫描工具SCA\" class=\"headerlink\" title=\"开源第三方安全扫描工具SCA\"></a>开源第三方安全扫描工具SCA</h2><h3 id=\"Sonatype\"><a href=\"#Sonatype\" class=\"headerlink\" title=\"Sonatype\"></a>Sonatype</h3><p><a href=\"https://www.sonatype.com/\">Software Supply Chain Security - DevSecOps Governance | Sonatype</a><br><a href=\"https://search.maven.org/\">Maven Central Repository Search</a><br><img src=\"http://img.moses.wang/20220619232543.png\"><br><a href=\"https://ossindex.sonatype.org/\">Sonatype OSS Index</a><br><img src=\"http://img.moses.wang/20220619232727.png\"><br><a href=\"https://central.sonatype.org/search/rest-api-guide/\">REST API - The Central Repository Documentation</a></p>\n<h3 id=\"OWASP-Dependency-Check\"><a href=\"#OWASP-Dependency-Check\" class=\"headerlink\" title=\"OWASP Dependency-Check\"></a>OWASP Dependency-Check</h3><p><a href=\"https://owasp.org/www-project-dependency-check/\">OWASP Dependency-Check</a>是一个用于扫描项目依赖项的SCA实用程序，用于识别项目依赖项并检查是否存在任何已知的、公开披露的漏洞；目前已支持Java、Ruby、.NET、NodeJs、Ruby、Python等语言编写的程序。并为C&#x2F;C++构建系统（autoconf和cmake）提供了有限的支持；另外，作为一款开源工具，在多年来的发展过程中已经支持与许多主流软件进行集成，比如<code>Jenkins</code>等；具备使用方便、落地简单等优势。<br>Dependency-Check的依赖性检查可用于应用程序（及依赖库），执行检查时会将Common Platform Enumeration（CPE）国家漏洞库及NPM Public Advisories库下载到本地，再通过核心引擎中的一系列分析器检查项目依赖性，收集有关依赖项目的信息，然后根据收集的依赖项信息与本地的CPE&amp;NPM库数据进行对比，如果检查发现扫描的组件存在已知的易受攻击和漏洞则标识，最后生成报告进行展示。</p>\n<ul>\n<li>👑项目地址<a href=\"https://github.com/jeremylong/DependencyCheck\">GitHub - jeremylong&#x2F;DependencyCheck: OWASP dependency-check is a software composition analysis utility that detects publicly disclosed vulnerabilities in application dependencies.</a></li>\n<li>👁WIKI<a href=\"https://github.com/jeremylong/DependencyCheck/wiki\">Home · jeremylong&#x2F;DependencyCheck Wiki · GitHub</a></li>\n<li>📒Docs<a href=\"https://jeremylong.github.io/DependencyCheck/index.html\">dependency-check – About</a><br>[[dependency-check]]</li>\n</ul>\n<h3 id=\"OWASP-Dependency-Track\"><a href=\"#OWASP-Dependency-Track\" class=\"headerlink\" title=\"OWASP Dependency-Track\"></a>OWASP Dependency-Track</h3><p><a href=\"https://owasp.org/www-project-dependency-track/\">OWASP Dependency-Track</a>是一个组件分析平台，Dependency-Track是OWASP推出的一个智能供应链组件分析平台，它集成了4种漏洞数据库：<code>NPM Public Advisories</code>、<code>National Vulnerability Database</code>、<code>Sonartype OSS Index</code>和<code>VulnDB</code>，相比于其他开源检测工具单一的漏洞库，Dependency Track出现漏报或者误报的情况会小很多。同时它提供了强大的API集成功能（如openAPI和Jenkins的插件），在开发安全建设过程中我们可以将其整合到我们的<code>pipeline</code>中帮助DevOps团队提高开发流程速度，同时还能控制外部组件的使用和它们可能造成的风险。此外通过maven收集仓库中所有依赖包的信息，记录各个开发团队的应用程序所使用的各种第三方依赖信息，以便进行依赖包管理（版本控制、漏洞管理等）。在开发过程中可以基于<code>soner bug</code>追踪的组件安全跟踪，甚至fortify这样的代码白盒review介入，并通过邮件、钉钉告警通知安全团队、开发团队。<br>👑<a href=\"http://dependencytrack.org/\">官网</a></p>\n<h4 id=\"核心架构\"><a href=\"#核心架构\" class=\"headerlink\" title=\"核心架构\"></a>核心架构</h4><p><img src=\"http://img.moses.wang/20220619224830.png\"></p>\n<h4 id=\"检测原理\"><a href=\"#检测原理\" class=\"headerlink\" title=\"检测原理\"></a>检测原理</h4><p>Dependency Track通过接收到生成的Software BOM(软件物料清单)[[软件物料清单SBOM]]，然后检查物料清单中的各个组件(以及当前清单中的版本)在漏洞数据库中是否存在已知安全漏洞的记录，并通过Dashboard展示出来。所以你需要先准备好一份SBOM清单，然后发送给Dependency Track，等待它完成扫描检测之后，然后在管理界面上查看结果。<br><img src=\"http://img.moses.wang/20220619225029.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SBOM（Software Bill of Material）翻译之后称为软件物料清单。通俗的解释就是我们用到的所有第三方组件依赖（包括第三方组件自己所依赖的其他第三方组件，换句话讲，依赖的依赖）的信息清单，这些内容包括author、group, licenses, versions and copyright等数据。</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>SPDX值</th>\n<th>SWID值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>供应商</td>\n<td>（3.5） PackageSupplier:</td>\n<td><Entity> @role (softwareCreator&#x2F;publisher),@name</td>\n</tr>\n<tr>\n<td>组件</td>\n<td>（3.1）PackageName:</td>\n<td><softwareIdentity> @name</td>\n</tr>\n<tr>\n<td>唯一标识</td>\n<td>（3.2）SPDXID:</td>\n<td><softwareIdentity> @tagID</td>\n</tr>\n<tr>\n<td>版本</td>\n<td>（3.3）PackageVersion:</td>\n<td><softwareIdentity> @version</td>\n</tr>\n<tr>\n<td>组件散列值</td>\n<td>（3.10）PackageChecksum:</td>\n<td><Payload>&#x2F;..&#x2F;<File>@[hash-algorithm]:hash</td>\n</tr>\n<tr>\n<td>相互关系</td>\n<td>（7.1）Relationship:CONTAINS</td>\n<td><Link>@rel,@href</td>\n</tr>\n<tr>\n<td>SBOM编辑人</td>\n<td>（2.8）Creator:</td>\n<td><Entity> @role (tagCreator),@name</td>\n</tr>\n</tbody></table>\n<p>生成SBOM的工具有几个，其中比较有名的是CycloneDX<a href=\"https://cyclonedx.org/\">OWASP CycloneDX Software Bill of Materials (SBOM) Standard</a>是一个轻量级软件材料清单（SBOM）标准。一旦我们有了BOM文件，我们就可以手动或通过整合CI&#x2F;CD中的上传功能将其上传到Dependency-Track。Dependency track相当于一个漏洞库和分析引擎，它基于SBOM，在漏洞库中搜索，这样我们就可以获得比传统组件分析更完整、更复杂的信息。</p>\n<h4 id=\"Dependency-Track-VS-Dependency-check\"><a href=\"#Dependency-Track-VS-Dependency-check\" class=\"headerlink\" title=\"Dependency Track VS Dependency check\"></a>Dependency Track VS Dependency check</h4><ul>\n<li>DependencyCheck更多是给开发团队使用的工具</li>\n<li>DependencyTrack更多的是给安全团队使用的工具</li>\n<li>企业或者组织中的安全团队可以借助DependencyTrack实现第三方组件的统一安全管理</li>\n<li>DependencyCheck只能对第三方组件做安全检测并生成报告，仅此而已</li>\n<li>DependencyTrack会保存历次第三方组件安全检测结果，你可以通过Dashboard了解或者追踪第三方组件的安全变化趋势</li>\n<li>DependencyTrack还提供了很多额外的功能，例如漏洞通知、全局审查第三方组件、审计第三方组件软件授权协议、API等等<br><img src=\"http://img.moses.wang/20220619230140.png\"></li>\n</ul>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>DependencyCheck支持3种部署方式，分别是容器化部署、自运行安装包，以及可以直接在Tomcat里运行的WebApp包。<br><strong>docker部署</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 下载DependencyTrack镜像\n\ndocker pull owasp&#x2F;dependency-track\n\n# 创建并使用宿主机上的存储以避免数据丢失\ndocker volume create --name dependency-track\n\n# 在8080端口上运行DependencyTrack，默认账户密码admin&#x2F;admin\ndocker run -d -m 8192m -p 8080:8080 --name dependency-track -v dependency-track:&#x2F;data owasp&#x2F;dependency-track</code></pre>\n<p>更换数据库（可选）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 1.根路径新建dependency-track目录，然后在该目录下新建application.properties文件，在文件中填写下面配置\n\nalpine.database.mode&#x3D;external\n\nalpine.database.url&#x3D;jdbc:postgresql:&#x2F;&#x2F;localhost:5432&#x2F;dtrack\n\nalpine.database.driver&#x3D;org.postgresql.Driver\n\nalpine.database.username&#x3D;dtrack\n\nalpine.database.password&#x3D;password\n\n# 2.使用命令docker-compose up重新启动一下，配置就生效了，启动时间可能略长。参考：https:&#x2F;&#x2F;docs.dependencytrack.org&#x2F;getting-started&#x2F;database-support&#x2F;</code></pre>\n<p>卸载</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker rmi owasp&#x2F;dependency-track\n\ndocker rm dependency-track\n\ndocker volume rm dependency-track:&#x2F;data</code></pre>\n<p><img src=\"http://img.moses.wang/new/20220623171904.png\">\t</p>\n<h3 id=\"OpenSCA\"><a href=\"#OpenSCA\" class=\"headerlink\" title=\"OpenSCA\"></a>OpenSCA</h3><p>[[OpenSCA]]</p>\n<h2 id=\"商业产品\"><a href=\"#商业产品\" class=\"headerlink\" title=\"商业产品\"></a>商业产品</h2><iframe id=\"regexChart\" src=\"https://www.gartner.com/reviews/market/software-composition-analysis-sca/\" width=\"1290\" height=\"500\"></iframe>\t\n    \n\n\n<h3 id=\"CloudDefense\"><a href=\"#CloudDefense\" class=\"headerlink\" title=\"CloudDefense\"></a>CloudDefense</h3><p><a href=\"https://www.clouddefense.ai/sca-software-composition-analysis\">SCA - Software Composition Analysis</a><br><img src=\"http://img.moses.wang/20220617213011.png\"></p>\n<h3 id=\"VeraCode\"><a href=\"#VeraCode\" class=\"headerlink\" title=\"VeraCode\"></a>VeraCode</h3><p><a href=\"https://www.veracode.com/products/software-composition-analysis\">SCA to Automate Security Scanning | Veracode</a><br><img src=\"http://img.moses.wang/20220617213215.png\"></p>\n<h3 id=\"Snky\"><a href=\"#Snky\" class=\"headerlink\" title=\"Snky\"></a>Snky</h3><p><a href=\"https://snyk.io/\">Snyk | Developer security | Develop fast. Stay secure.</a><br><img src=\"http://img.moses.wang/20220617110123.png\"></p>\n<h3 id=\"Synopsys-blackduck\"><a href=\"#Synopsys-blackduck\" class=\"headerlink\" title=\"Synopsys-blackduck\"></a>Synopsys-blackduck</h3><p><a href=\"https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html\">Black Duck Software Composition Analysis (SCA) | Synopsys</a></p>\n<h3 id=\"Mend\"><a href=\"#Mend\" class=\"headerlink\" title=\"Mend\"></a>Mend</h3><p><a href=\"https://www.mend.io/vulnerability-database/\">Open Source Vulnerability Database | Mend</a><br><img src=\"http://img.moses.wang/20220617215335.png\"></p>\n<h2 id=\"最佳借鉴\"><a href=\"#最佳借鉴\" class=\"headerlink\" title=\"最佳借鉴\"></a>最佳借鉴</h2><h3 id=\"VIVO\"><a href=\"#VIVO\" class=\"headerlink\" title=\"VIVO\"></a>VIVO</h3><h4 id=\"引入前检测\"><a href=\"#引入前检测\" class=\"headerlink\" title=\"引入前检测\"></a>引入前检测</h4><p>第三方组件在引入阶段时，vivo千镜安全实验室会<strong>采用静态分析、动态自动分析和手工调试等多种方式</strong>，对第三方组件进行深度的安全和隐私评估，<strong>保障第三方组件不会存在侵害用户权益的行为。</strong></p>\n<p>开源组件在引入阶段时，vivo千镜安全实验室通过构建开源组件风险知识库，将引入组件与风险知识库进行匹配，从<strong>License、安全、合规</strong>等多维度生成开源组件引入报告。</p>\n<h4 id=\"引入后扫描\"><a href=\"#引入后扫描\" class=\"headerlink\" title=\"引入后扫描\"></a>引入后扫描</h4><p>由于vivo的应用程序众多，如果对所有代码仓及分支进行人工审查，无疑会消耗巨大的人力。因此，<strong>vivo千镜安全实验室开发了软件成分分析引擎</strong>，其中包含正向扫描与逆向检测两个子引擎。软件成分分析引擎通过CI集成自动化触发代码仓扫描，实现自动化分析检测。同时，通过风险管控流程触发风险处理流程，将扫描结果通知到各负责人，从而确保第三方组件的应用安全和开源组件的使用合规。<br><img src=\"http://img.moses.wang/new/20220902110251.png\"></p>\n<h5 id=\"正向扫描\"><a href=\"#正向扫描\" class=\"headerlink\" title=\"正向扫描\"></a>正向扫描</h5><p>正向扫描引擎又称为源码扫描引擎，主要通过扫描代码仓的方式对各应用程序进行软件成分分析，进而扫描出应用程序所集成的第三方组件及开源组件。</p>\n<p>在进行正向扫描之前，需要对应用程序的资产以及第三方组件和开源组件的特征进行收集。应用程序的资产包括代码仓、负责人等信息；第三方和开源组件的特征主要包括开发商、负责人、版本、文件HASH等信息。</p>\n<p><strong>正向扫描引擎包括gradle文件扫描、工程文件扫描以及代码片段扫描：</strong></p>\n<ul>\n<li><p>Gradle文件扫描指通过解析工程中gradle文件，获取通过gradle引入的第三方组件和开源组件；</p>\n</li>\n<li><p>工程文件扫描指通过扫描工程中jar包或aar包，获取通过本地集成引入的第三方组件和开源组件；</p>\n</li>\n<li><p>代码片段扫描指通过扫描源代码，将源代码中代码片段与开源组件的知识库进行比对，获取代码引入的开源组件。</p>\n</li>\n</ul>\n<p>值得一提的是，<strong>正向扫描引擎能够检测出应用程序引入的第三方组件和开源组件的版本信息。</strong>当第三方组件和开源组件披露出安全漏洞时，能够通过正向扫描即时检测出引用问题组件的应用程序信息，从而提高安全响应效率。\t</p>\n<h5 id=\"逆向检测\"><a href=\"#逆向检测\" class=\"headerlink\" title=\"逆向检测\"></a>逆向检测</h5><p>逆向检测引擎主要通过对应用程序的反汇编路径使用特征指纹匹配的方式进行软件成分分析，进而扫描出应用程序所集成的第三方组件及开源组件。</p>\n<p>在进行逆向检测之前，需要对第三方组件和开源组件的特征进行收集。由于逆向扫描主要对应用程序的反汇编代码进行扫描，因此需要将加固的应用进行脱壳预处理。</p>\n<p>逆向扫描引擎对APK进行反汇编后，将反汇编的代码与组件的特征指纹进行匹配，从而得到扫描结果。\t</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li>👑<a href=\"https://pvs-studio.com/en/blog/posts/csharp/0876/\">OWASP Top Ten and Software Composition Analysis (SCA)</a></li>\n<li><a href=\"https://csrc.nist.gov/projects/security-content-automation-protocol/specifications/cpe\">Security Content Automation Protocol | CSRC</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/1fnDelBE1HisEaopEyk8nQ\">58安全应急响应中心|Java 供应链(依赖)安全检测实践</a></li>\n<li><a href=\"https://nvd.nist.gov/developers/products\">API Products</a></li>\n<li><a href=\"https://nvd.nist.gov/developers/vulnerabilities\">API Vulnerabilities</a></li>\n<li>Gartner:SCA市场指南<a href=\"https://www.gartner.com/en/documents/4005759\">Site Unreachable</a></li>\n<li><a href=\"https://xie.infoq.cn/article/5369d9323a55d879b8edd1bcf\">软件成分分析（SCA）完全指南_开源_SEAL软件供应链安全_InfoQ写作社区</a></li>\n<li><a href=\"https://github.com/dependabot/dependabot-core\">GitHub - dependabot&#x2F;dependabot-core: 🤖 The core logic behind Dependabot’s update PR creation. For product feedback see: https://github.com/github/feedback/discussions/categories/dependabot-feedback</a></li>\n<li>dependabot Docs<a href=\"https://docs.github.com/en/code-security/dependabot/dependabot-version-updates\">Keeping your dependencies updated automatically with Dependabot version updates - GitHub Docs</a></li>\n<li><a href=\"https://blog.chainguard.dev/what-an-sbom-can-do-for-you/\">what-an-sbom-can-do-for-you</a></li>\n<li><a href=\"https://myf5.net/post/3102.htm\">企业开源分析和思考</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/F8tRixg_S9WHUEaEWhxSHA\">没有免费午餐——再探移动互联网软件供应链安全</a></li>\n</ul>\n","text":"SCA软件成分分析前期探索概述和背景SCA概念SCA(Software Composition Analysis)软件成分分析技术主要就是针对开源软件以及第三方商业软件设计的各种源码、源码库、模块和框架，识别和清点开源软件的组件及其构成和依赖关系，并识别已知的安全漏洞或潜在的许可...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"SBOM","slug":"SBOM","count":5,"path":"api/tags/SBOM.json"},{"name":"开源漏洞库","slug":"开源漏洞库","count":2,"path":"api/tags/开源漏洞库.json"},{"name":"安全","slug":"安全","count":1,"path":"api/tags/安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SCA%E8%BD%AF%E4%BB%B6%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%E5%89%8D%E6%9C%9F%E6%8E%A2%E7%B4%A2\"><span class=\"toc-text\">SCA软件成分分析前期探索</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0%E5%92%8C%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">概述和背景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SCA%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">SCA概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SCA%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">SCA需求</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">漏洞数据库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#google-%E5%BC%80%E6%BA%90%E6%B4%9E%E8%A7%81\"><span class=\"toc-text\">google 开源洞见</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bigquery-public-data-deps-dev-v1-Projects\"><span class=\"toc-text\">bigquery-public-data.deps_dev_v1.Projects</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bigquery-public-data-deps-dev-v1-PackageVersions\"><span class=\"toc-text\">bigquery-public-data.deps_dev_v1.PackageVersions</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bigquery-public-data-deps-dev-v1-Dependencies\"><span class=\"toc-text\">bigquery-public-data.deps_dev_v1.Dependencies</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bigquery-public-data-deps-dev-v1-Advisories\"><span class=\"toc-text\">bigquery-public-data.deps_dev_v1.Advisories</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#license%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">license查询</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPE%E5%BC%80%E6%94%BE%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">CPE开放数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CPE%E5%92%8CCVE%E6%95%B0%E6%8D%AE-API\"><span class=\"toc-text\">CPE和CVE数据-API</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CPE%E5%92%8CCVE%E6%95%B0%E6%8D%AE-%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">CPE和CVE数据-数据源</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#API%E5%92%8C%E6%95%B0%E6%8D%AE%E6%BA%90%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">API和数据源类型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8GitHub%E5%AE%89%E5%85%A8%E5%85%AC%E5%91%8Aadvisory\"><span class=\"toc-text\">使用GitHub安全公告advisory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#snyk-%E5%BC%80%E6%BA%90%E6%BC%8F%E6%B4%9E%E5%BA%93\"><span class=\"toc-text\">snyk 开源漏洞库</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%BA%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AE%89%E5%85%A8%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7SCA\"><span class=\"toc-text\">开源第三方安全扫描工具SCA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sonatype\"><span class=\"toc-text\">Sonatype</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OWASP-Dependency-Check\"><span class=\"toc-text\">OWASP Dependency-Check</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OWASP-Dependency-Track\"><span class=\"toc-text\">OWASP Dependency-Track</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">核心架构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">检测原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dependency-Track-VS-Dependency-check\"><span class=\"toc-text\">Dependency Track VS Dependency check</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">部署</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OpenSCA\"><span class=\"toc-text\">OpenSCA</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%95%86%E4%B8%9A%E4%BA%A7%E5%93%81\"><span class=\"toc-text\">商业产品</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CloudDefense\"><span class=\"toc-text\">CloudDefense</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#VeraCode\"><span class=\"toc-text\">VeraCode</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Snky\"><span class=\"toc-text\">Snky</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Synopsys-blackduck\"><span class=\"toc-text\">Synopsys-blackduck</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mend\"><span class=\"toc-text\">Mend</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E4%BD%B3%E5%80%9F%E9%89%B4\"><span class=\"toc-text\">最佳借鉴</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#VIVO\"><span class=\"toc-text\">VIVO</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E5%89%8D%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">引入前检测</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E5%90%8E%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">引入后扫描</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">正向扫描</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%90%91%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">逆向检测</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"开软软件合规风险材料整理","uid":"a848febdecd13e7af1ad2da3100c5412","slug":"开源合规","date":"2022-06-19T08:43:00.000Z","updated":"2022-10-26T08:11:21.569Z","comments":true,"path":"api/articles/开源合规.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4136-9804020.png","text":"一、开源概述及开源风险分析开源合规系列（一）：开源概述及开源风险分析 二、开源许可证开源合规系列（二：上）：开源许可证之GPL、AGPL、LGPL、MPL开源合规系列（二：下）：开源许可证之Apache、MIT、BSD及许可证兼容性分析 三、开源合规系列（三）：开源合规建议及许可...","link":"","photos":[],"count_time":{"symbolsCount":174,"symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"开源软件风险合规","slug":"开源软件风险合规","count":1,"path":"api/tags/开源软件风险合规.json"},{"name":"资料整理","slug":"资料整理","count":1,"path":"api/tags/资料整理.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"开源WAF调研之产品选型-Nginx临时应急工具","uid":"ca8ec5f39f069a5397c4e6f4f192ade4","slug":"Nginx-log-check检测工具","date":"2022-06-15T14:30:16.000Z","updated":"2022-10-26T10:01:41.029Z","comments":true,"path":"api/articles/Nginx-log-check检测工具.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159445/a-tunnel-8k-secret-passage-wallpapers-159445-3841-2646948.png","text":"工具介绍此脚本是参考nmgxy&#x2F;klionsec修改而来,重新添加了一些特征，只用来临时救急，还是推荐到ELK或者Splunk中分析🎩项目地址GitHub - al0ne&#x2F;nginx_log_check: Nginx日志安全分析脚本 功能 统计Top 20 地...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"开源WAF产品选型","slug":"开源WAF产品选型","count":7,"path":"api/categories/开源WAF产品选型.json"}],"tags":[{"name":"应急响应","slug":"应急响应","count":1,"path":"api/tags/应急响应.json"},{"name":"Nginx","slug":"Nginx","count":7,"path":"api/tags/Nginx.json"},{"name":"开源WAF产品选型","slug":"开源WAF产品选型","count":7,"path":"api/tags/开源WAF产品选型.json"},{"name":"日志分析","slug":"日志分析","count":1,"path":"api/tags/日志分析.json"},{"name":"安全建设","slug":"安全建设","count":7,"path":"api/tags/安全建设.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
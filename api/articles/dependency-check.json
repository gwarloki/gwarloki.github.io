{"title":"软件供应链安全分析工具-Dependency-Check","uid":"520e1d6d52856a91475d0b89567aa470","slug":"dependency-check","date":"2022-06-22T05:45:00.000Z","updated":"2022-10-26T08:03:58.711Z","comments":true,"path":"api/articles/dependency-check.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4042-53299.png","content":"<h1 id=\"dependency-check\"><a href=\"#dependency-check\" class=\"headerlink\" title=\"dependency-check\"></a>dependency-check</h1><h2 id=\"0x01简介\"><a href=\"#0x01简介\" class=\"headerlink\" title=\"0x01简介\"></a>0x01简介</h2><p>Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序，用于识别项目依赖项并检查是否存在任何已知的，公开披露的漏洞。目前，已支持Java、.NET、Ruby、PHP、Node.js、Python等语言编写的程序，并为C&#x2F;C++构建系统（autoconf和cmake）提供了有限的支持。而且该工具还是OWASP Top 10的解决方案的一部分。</p>\n<p>Dependency-Check支持面广（支持多种语言）、可集成性强，作为一款开源工具，在多年来的发展中已经支持和许多主流的软件进行集成，比如：命令行、Ant、Maven、Gradle、Jenkins、Sonar等；具备使用方便，落地简单等优势。</p>\n<ul>\n<li><a href=\"https://github.com/jeremylong/DependencyCheck\">项目地址</a></li>\n<li><a href=\"https://www.owasp.org/index.php/OWASP_Dependency_Check\">官网</a></li>\n<li><a href=\"https://jeremylong.github.io/DependencyCheck/index.html\">Docs</a></li>\n</ul>\n<h2 id=\"Dependency-Check有三种使用方式：\"><a href=\"#Dependency-Check有三种使用方式：\" class=\"headerlink\" title=\"Dependency Check有三种使用方式：\"></a>Dependency Check有三种使用方式：</h2><ul>\n<li><strong>从命令行使用：</strong>此时Dependency Check作为一个单独的软件，与项目无关，使用时只需指定需要扫描的项目位置即可。在业务上线流程中推荐使用此方式  </li>\n<li><strong>作为插件在项目中使用：</strong>此时需要在项目的配置文件中做相关内容添加，只对当前项目有效。别的项目需要使用时，需要重新修改配置文件  </li>\n<li><strong>作为Ant Task使用：</strong>这种方式的使用介于以上两者之间，可以在多个项目中使用，但是需要安装，并且需要在项目的build.xml中添加相关配置。</li>\n</ul>\n<h2 id=\"0x02实现原理\"><a href=\"#0x02实现原理\" class=\"headerlink\" title=\"0x02实现原理\"></a>0x02实现原理</h2><p>依赖性检查可用于扫描应用程序（及其依赖库），执行检查时会将 Common Platform Enumeration (CPE)美帝国家漏洞数据库及NPM Public Advisories库下载到本地，再通过核心引擎中的一系列分析器检查项目依赖性，收集有关依赖项的信息，然后根据收集的依赖项信息与本地的CPE&amp;NPM库数据进行对比，如果检查发现扫描的组件存在已知的易受攻击的漏洞则标识，最后生成报告进行展示。</p>\n<p>依赖项检查的工作原理是收集有关其扫描的文件的信息（使用分析器）。收集的信息称为证据；收集的证据有三种类型：<code>供应商</code>、<code>产品</code>和<code>版本</code>。例如，JarAnalyzer将从清单、pom.xml和扫描的JAR文件中的软件包名称中收集信息，并具有启发式方法将来自各种来源的信息放入一个或多个证据桶中。<br>在NVD CVE数据（模式可以<a href=\"http://nvd.nist.gov/schema/nvd-cve-feed_2.0.xsd\">在这里</a>找到）<a href=\"http://nvd.nist.gov/schema/nvd-cve-feed_2.0.xsd\">中</a>，每个CVE条目都有一个易受攻击的软件列表：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;entry id&#x3D;&quot;CVE-2012-5055&quot;&gt;\n  ...\n    &lt;vuln:vulnerable-software-list&gt;\n      &lt;vuln:product&gt;cpe:&#x2F;a:vmware:springsource_spring_security:3.1.2&lt;&#x2F;vuln:product&gt;\n      &lt;vuln:product&gt;cpe:&#x2F;a:vmware:springsource_spring_security:2.0.4&lt;&#x2F;vuln:product&gt;\n      &lt;vuln:product&gt;cpe:&#x2F;a:vmware:springsource_spring_security:3.0.1&lt;&#x2F;vuln:product&gt;\n    &lt;&#x2F;vuln:vulnerable-software-list&gt;\n  ...\n  &lt;&#x2F;entry&gt;</code></pre>\n<p>在NVD CVE数据库中，每个CVE条目都有一个易受攻击的软件列表。这些CPE条目记录了“CPE:&#x2F;入口类型:供应商:产品:版本:修订:…”这些属性。这些数据被收集并存储在Lucene索引中。然后使用所收集的证据，并尝试匹配Lucene CPE索引中的条目。如果找到，CPEAnalyzer分析器将向依赖项添加标识符，并随后添加到报告中。一旦确定了CPE，就将关联的CVE条目添加到报告中。<br>这些证据在写入报告的时候会被分级使用不同的信心级别——低、中、高和最高。它等于在识别过程中使用的证据的最低水平的信心水平。如果用于识别某个CPE的一系列证据中信心等级最低的证据是高级，那么，那么CPE将拥有高级的信心水平。</p>\n<h2 id=\"0x03Quickstart\"><a href=\"#0x03Quickstart\" class=\"headerlink\" title=\"0x03Quickstart\"></a>0x03Quickstart</h2><h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew update &amp;&amp; brew install dependency-check</code></pre>\n<h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><p> <a href=\"https://github.com/jeremylong/DependencyCheck/releases/download/v7.1.1/dependency-check-7.1.1-release.zip.asc\">GitHub Release</a></p>\n<h3 id=\"编译安装-略\"><a href=\"#编译安装-略\" class=\"headerlink\" title=\"编译安装-略\"></a>编译安装-略</h3><h3 id=\"usage\"><a href=\"#usage\" class=\"headerlink\" title=\"usage\"></a>usage</h3><h4 id=\"命令行使用\"><a href=\"#命令行使用\" class=\"headerlink\" title=\"命令行使用\"></a>命令行使用</h4><p><a href=\"https://jeremylong.github.io/DependencyCheck/dependency-check-cli/arguments.html\">Command Line Arguments</a><br><strong>dependency-check –advancedHelp</strong>包括使用本地数据库、制成品库扫描等<br><img src=\"http://img.moses.wang/new/20220725131600.png\"></p>\n<h5 id=\"支持的文件dependency-check-–-File-Type-Analyzers\"><a href=\"#支持的文件dependency-check-–-File-Type-Analyzers\" class=\"headerlink\" title=\"支持的文件dependency-check – File Type Analyzers\"></a>支持的文件<a href=\"https://jeremylong.github.io/DependencyCheck/analyzers/index.html\">dependency-check – File Type Analyzers</a></h5><p>dependency-check支持多种格式的文件：Zip archive format (*.zip, *.ear, *.war, *.jar, *.sar, <em>.apk, .nupkg); Tape Archive Format (.tar); Gzip format (</em>.gz, .tgz); Bzip2 format (.bz2, *.tbz2)。</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p>第一次使用,需要下载漏洞库<br><img src=\"http://img.moses.wang/20220622141711.png\"></p>\n<p> 生成扫描报告:<br> Dependency-check支持多种输出格式，默认是HTML格式。在命令式方式使用时，指定参数–format来选定格式，可以有<strong>XML, HTML, CSV, JSON</strong>, VULN, ALL这些选项（必须是大写）。<br> <img src=\"http://img.moses.wang/20220622141823.png\">                                                              </p>\n<h4 id=\"扫描结果对比\"><a href=\"#扫描结果对比\" class=\"headerlink\" title=\"扫描结果对比\"></a>扫描结果对比</h4><p> [[OpenSCA#测试对比]]</p>\n<h4 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h4><ul>\n<li>Maven: <code>mvn -version</code> 3.5.0 and higher</li>\n<li>Maven命令方式:</li>\n<li><code>mvn org.owasp:dependency-check-maven:check</code></li>\n<li>查询某一个依赖 <code>mvn dependency:list|grep -i &quot;log4j*&quot;</code></li>\n<li><code>mvn dependency:tree</code></li>\n<li>聚合查询 <code>mvn clean org.owasp:dependency-check-maven:aggregate -Dformat=HTML</code></li>\n<li>需要在maven的项目依赖你添加dependency-check的依赖如下： <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;project&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            ...\n            &lt;plugin&gt;\n              &lt;groupId&gt;org.owasp&lt;&#x2F;groupId&gt;\n              &lt;artifactId&gt;dependency-check-maven&lt;&#x2F;artifactId&gt;\n              &lt;executions&gt;\n                  &lt;execution&gt;\n                      &lt;goals&gt;\n                          &lt;goal&gt;check&lt;&#x2F;goal&gt;\n                      &lt;&#x2F;goals&gt;\n                  &lt;&#x2F;execution&gt;\n              &lt;&#x2F;executions&gt;\n            &lt;&#x2F;plugin&gt;\n            ...\n        &lt;&#x2F;plugins&gt;\n        ...\n    &lt;&#x2F;build&gt;\n    ...\n&lt;&#x2F;project&gt;</code></pre></li>\n</ul>\n<h4 id=\"ant使用\"><a href=\"#ant使用\" class=\"headerlink\" title=\"ant使用\"></a>ant使用</h4><p> 略 <a href=\"https://jeremylong.github.io/DependencyCheck/dependency-check-ant/configuration.html\">dependency-check-ant – Configuration</a></p>\n<h2 id=\"0x04-漏洞库\"><a href=\"#0x04-漏洞库\" class=\"headerlink\" title=\"0x04 漏洞库\"></a>0x04 漏洞库</h2><p>本地安装后，会缓存NVD数据库，主要是两个文件<strong>jsrepository.json</strong>和<strong>odc.mv.db</strong><br><img src=\"http://img.moses.wang/20220622143616.png\"></p>\n<h3 id=\"搭建本地NVD-Mirror库\"><a href=\"#搭建本地NVD-Mirror库\" class=\"headerlink\" title=\"搭建本地NVD Mirror库\"></a>搭建本地NVD Mirror库</h3><h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><ul>\n<li>企业中内网环境可能CI服务器不会开放对外网的访问权限，需要搭建一个本地的NVDMirror</li>\n<li>需要二次开发</li>\n</ul>\n<h4 id=\"手动搭建nvd\"><a href=\"#手动搭建nvd\" class=\"headerlink\" title=\"手动搭建nvd\"></a>手动搭建nvd</h4><p>官方提供了对应jar包来作为mirror的服务<a href=\"https://github.com/stevespringett/nist-data-mirror/\">GitHub - stevespringett&#x2F;nist-data-mirror: A simple Java command-line utility to mirror the CVE JSON data from NIST.</a></p>\n<ol>\n<li>下载release jar包<a href=\"https://github.com/stevespringett/nist-data-mirror/releases/tag/nist-data-mirror-1.6.0\">Site Unreachable</a></li>\n<li>执行<code>java -jar nist-data-mirror.jar</code></li>\n<li>搭建Apache服务</li>\n<li>定时任务更新jsreponsitory.json<a href=\"https://jeremylong.github.io/DependencyCheck/data/cachenvd.html\">dependency-check – Snapshotting the NVD</a></li>\n<li>客户端使用设置参数如下<pre class=\"line-numbers language-none\"><code class=\"language-none\">--cveUrlModified http:&#x2F;&#x2F;你的本地服务器:30006&#x2F;nvdcve-1.1-modified.json.gz\n--cveUrlBase http:&#x2F;&#x2F;你的本地服务器:30006&#x2F;nvdcve-1.1-modified.json.gz</code></pre></li>\n<li>jenkins pipeline修复mirror地址<pre class=\"line-numbers language-none\"><code class=\"language-none\">dependencyCheck additionalArguments: &#39;--cveUrlModified http:&#x2F;&#x2F;x.x.x.x:8080&#x2F;nvdcve-1.1-2019.json.gz --cveUrlBase http:&#x2F;&#x2F;x.x.x.x:8080&#x2F;nvdcve-1.1-2019.json.gz &#39;, odcInstallation: &#39;dependency-check&#39;</code></pre></li>\n</ol>\n<h4 id=\"docker搭建\"><a href=\"#docker搭建\" class=\"headerlink\" title=\"docker搭建\"></a>docker搭建</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ mvn clean package\n$ docker build --rm -t sspringett&#x2F;nvdmirror .\n$ mkdir target&#x2F;docs\n$ docker run -dit \\\n  --name mirror \\\n  -p 80:80 \\\n  --mount type&#x3D;bind,source&#x3D;&quot;$(pwd)&quot;&#x2F;target&#x2F;docs&#x2F;,target&#x3D;&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;htdocs \\\n  sspringett&#x2F;nvdmirror</code></pre>\n<p><img src=\"http://img.moses.wang/20220622155600.png\"></p>\n<h4 id=\"k8s部署\"><a href=\"#k8s部署\" class=\"headerlink\" title=\"k8s部署\"></a>k8s部署</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 打包，**需要chartmusuem**\n# cd to charts directory\n$ cd nist-data-mirror\n\n# Create directory for package\n$ mkdir .&#x2F;target\n\n# Package helm chart\n$ helm package --app-version &lt;app_version&gt;  --version &lt;helm_chart_version&gt; -destination .&#x2F;target .\n\n# As a best practice, push your packaged chart to helm repo. e.g. push it to artifactory, chartmusuem etc.\n$ helm push target&#x2F;nist-data-mirror-&lt;helm_chart_version&gt;.tgz chartmuseum\n# 部署\n# helm install --name &lt;release_name&gt; &lt;helm_repo&gt;&#x2F;&lt;chart_name&gt;\n$ helm install --name nist-data-mirror chartmuseum&#x2F;nist-data-mirror</code></pre>\n\n<h3 id=\"Mysql-存储nvd-数据\"><a href=\"#Mysql-存储nvd-数据\" class=\"headerlink\" title=\"Mysql 存储nvd 数据\"></a>Mysql 存储nvd 数据</h3><p>目前支持的数据库包括：h2、mysql、oracle、sql server、postgresQL。<br>以MySQL为例：<br>1.创建MySQL数据库<br>2.初始化数据库，脚本-&gt;<a href=\"https://github.com/jeremylong/DependencyCheck/tree/main/core/src/main/resources/data\">DependencyCheck&#x2F;core&#x2F;src&#x2F;main&#x2F;resources&#x2F;data at main · jeremylong&#x2F;DependencyCheck · GitHub</a><br>3.将对应的MySQL数据库驱动拷贝到<strong>dependency-check-7.1.0-release\\dependency-check\\lib的目录中</strong><br>4.执行命令<code>dependency-check -s biz-service-0-1.0.0.jar --dbDriverName r --connectionString jdbc:mysql://127.0.0.1:3306/dependencycheck --dbUser dcuser --propertyfile dependencycheck.properties</code><br><strong>暂时没有需要未实际搭建</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 初始账号密码\ndata.user&#x3D;dcuser\ndata.password&#x3D;DC-Pass1337!</code></pre>\n<h2 id=\"CI-x2F-CD集成\"><a href=\"#CI-x2F-CD集成\" class=\"headerlink\" title=\"CI&#x2F;CD集成\"></a>CI&#x2F;CD集成</h2><h3 id=\"Jenkins-未测试Jenkins没有权限\"><a href=\"#Jenkins-未测试Jenkins没有权限\" class=\"headerlink\" title=\"Jenkins-未测试Jenkins没有权限\"></a>Jenkins-未测试Jenkins没有权限</h3><ol>\n<li><p>安装OWASP Dependency-Check插件</p>\n</li>\n<li><p>全局工具配置下配置dependency插件路径及版本（可单独下载）<br>自动安装未成功，可以手动下载</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">wget https:&#x2F;&#x2F;github.com&#x2F;jeremylong&#x2F;DependencyCheck&#x2F;releases&#x2F;download&#x2F;v7.1.1&#x2F;dependency-check-7.1.1-release.zip</code></pre></li>\n<li><p>全局工具配置，设置Dendency-Check 别名 安装路径</p>\n</li>\n<li><p>freestyle项目在构建步骤选择‘增加构建步骤’，选择‘Dependency_check’<br>或者使用**###  execute shell**</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sh &#x2F;home&#x2F;dc&#x2F;dependency-check&#x2F;bin&#x2F;dependency-check.sh -s $&#123;WORKSPACE&#125;&#x2F; --format HTML --format XML  -o .&#x2F;</code></pre></li>\n<li><p>pipeline流水线中执行dependency-check安全扫描</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sh &#39;&#x2F;data&#x2F;jenkins&#x2F;tools&#x2F;org.jenkinsci.plugins.DependencyCheck.tools.DependencyCheckInstallation&#x2F;dependency-check&#x2F;bin&#x2F;dependency-check.sh -s PWD&#x2F;dependency-check-report.xml’\nsh &#39;&#x2F;data&#x2F;jenkins&#x2F;tools&#x2F;org.jenkinsci.plugins.DependencyCheck.tools.DependencyCheckInstallation&#x2F;dependency-check&#x2F;bin&#x2F;dependency-check.sh -s PWD&#x2F;dependency-check-report.html</code></pre></li>\n<li><p>使用Jenkins发布XML和HTML报告<br><img src=\"http://img.moses.wang/new/20220721090548.png\"></p>\n</li>\n<li><p>设置风险门禁，设置允许的严重、高、中或低严重性发现总数的阈值。如果发现的数量等于或大于任何一个严重性的阈值，则作业状态将更改为不稳定或失败。也可以设置对新发现的检测结果设置阈值。<br><img src=\"http://img.moses.wang/new/20220721090845.png\"></p>\n</li>\n<li><p>最终效果<br><img src=\"http://img.moses.wang/new/20220721090958.png\"></p>\n</li>\n<li><p>查看结果汇总<br><img src=\"http://img.moses.wang/new/20220721091137.png\"></p>\n</li>\n<li><p>html报告解析</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from bs4 import BeautifulSoup\nfrom lxml import etree\n\nclass GetSecRes:\n    \n    def get_dependency_critical_num_with_lxml(self, filename):\n        &#39;&#39;&#39;\n        用lxml库解析安全扫描的html报告，并统计出其中的critical的漏洞数量\n        :param filename: dependency-check扫描完成后生产的html文件，文件名全路径\n        :return:critical数量\n        &#39;&#39;&#39;\n        # 读取html文件\n        with open(filename, encoding&#x3D;&#39;utf-8&#39;) as f:\n            data &#x3D; f.read()\n        doc &#x3D; etree.HTML(data)\n        # 获取漏洞汇总表中的漏洞行信息\n        trs &#x3D; doc.xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;summaryTable&quot;]&#x2F;&#x2F;tr[@class&#x3D;&quot; vulnerable&quot;]&#39;)\n        criticalres &#x3D; []\n        # 统计出每行的critical数量\n        for tr in trs:\n            tr_list &#x3D; tr.xpath(&#39;.&#x2F;td&#x2F;@data-sort-value&#39;)\n            td_text &#x3D; tr.xpath(&#39;.&#x2F;td&#x2F;text()&#39;)\n            tr_list.extend(td_text)\n            [criticalres.append(td) for td in tr_list if &quot;CRITICAL&quot; &#x3D;&#x3D; td]\n        return (len(criticalres))\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    import sys\n    filename &#x3D; sys.argv[1]\n    criticalres &#x3D; GetSecRes().get_dependency_critical_num_with_lxml(filename)\n    print(”严重组件数量“,criticalres)</code></pre>\n<p><img src=\"http://img.moses.wang/new/20220721100232.png\"></p>\n</li>\n<li><p>集成脚本到jenkins的execute shell中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">critical&#x3D;$(python3 &#x2F;home&#x2F;get-security-result.py $&#123;DIR&#125;&#x2F;dependency-check-report.html)  \necho $critical</code></pre></li>\n</ol>\n<h3 id=\"Sonarqube-未测试没有权限\"><a href=\"#Sonarqube-未测试没有权限\" class=\"headerlink\" title=\"Sonarqube-未测试没有权限\"></a>Sonarqube-未测试没有权限</h3><p>1.下载对应sonarqube版本的jar包插件<a href=\"https://github.com/dependency-check/dependency-check-sonar-plugin\">GitHub - dependency-check&#x2F;dependency-check-sonar-plugin: Integrates Dependency-Check reports into SonarQube</a><br>2.上传到%SONAR_HOME%&#x2F;extensions&#x2F;plugins目录下<br>3.重启sonarqube<br>4.jenkins流水线中执行sonar扫描</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"http://www.mianhuage.com/913.html\">jar第三方组件Dependency-check依赖检查工具|棉花哥的博客|Cotton’s Blog</a></li>\n<li><a href=\"https://www.codenong.com/jsf1a2f5357d12/\">使用OWASP Dependency-Check进行第三方依赖包安全扫描实践 | 码农家园</a></li>\n<li><a href=\"https://www.xianxiaba.com/kejitongxun/21322420.html\">「干货」Dependency check配置Mysql数据库存储nvd数据_科技通讯_闲暇巴</a></li>\n<li><a href=\"https://bloodzer0.github.io/ossa/other-security-branch/devsecops/sdc/\">SonarQube集成DependencyCheck - Open-Source Security Architecture</a></li>\n<li><a href=\"https://plugins.jenkins.io/dependency-check-jenkins-plugin/\">OWASP Dependency-Check | Jenkins plugin</a></li>\n<li><a href=\"https://www.cnblogs.com/happylumei/p/16091297.html\">【安全测试】Owasp Dependency-check 集成jenkins - 码上起舞 - 博客园</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_44455388/article/details/120200607#:~:text=jenkins%E9%9B%86%E6%88%90Dependency-Check%201%E3%80%81jenkins%E4%BE%9D%E6%AC%A1%E9%80%89%E6%8B%A9%20%5BManage%20Jenkins%5D-%3E%20%5BManage%20Plugins%5D-,%5B%E5%8F%AF%E9%80%89%E6%8F%92%E4%BB%B6%5D%E5%AE%89%E8%A3%85OWASP%20Dependency-Check%20Plugin%E5%92%8CAnalysis%20Model%20API%20Plugin%EF%BC%88%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%A4%B1%E8%B4%A5%EF%BC%8C%E9%87%8D%E5%90%AFjenkins%E5%A4%9A%E8%AF%95%E5%87%A0%E6%AC%A1%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%EF%BC%89.\">Dependency-Check部署及Jenkins集成OWASP Dependency-Check Plugin_我在北国不背锅的博客-CSDN博客_jenkins owasp</a></li>\n</ul>\n","text":"dependency-check0x01简介Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序，用于识别项目依赖项并检查是否存在任何已知的，公开披露的漏洞。目前，已支持Java、.NET、R...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"OWASP","slug":"OWASP","count":2,"path":"api/tags/OWASP.json"},{"name":"dependency-check","slug":"dependency-check","count":1,"path":"api/tags/dependency-check.json"},{"name":"部署手册","slug":"部署手册","count":3,"path":"api/tags/部署手册.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#dependency-check\"><span class=\"toc-text\">dependency-check</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x01简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dependency-Check%E6%9C%89%E4%B8%89%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">Dependency Check有三种使用方式：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">0x02实现原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03Quickstart\"><span class=\"toc-text\">0x03Quickstart</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mac\"><span class=\"toc-text\">mac</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">下载安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85-%E7%95%A5\"><span class=\"toc-text\">编译安装-略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#usage\"><span class=\"toc-text\">usage</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">命令行使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E7%9A%84%E6%96%87%E4%BB%B6dependency-check-%E2%80%93-File-Type-Analyzers\"><span class=\"toc-text\">支持的文件dependency-check – File Type Analyzers</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%AB%E6%8F%8F%E7%BB%93%E6%9E%9C%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">扫描结果对比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">插件使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ant%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">ant使用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-%E6%BC%8F%E6%B4%9E%E5%BA%93\"><span class=\"toc-text\">0x04 漏洞库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0NVD-Mirror%E5%BA%93\"><span class=\"toc-text\">搭建本地NVD Mirror库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82\"><span class=\"toc-text\">需求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAnvd\"><span class=\"toc-text\">手动搭建nvd</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#docker%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">docker搭建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#k8s%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">k8s部署</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mysql-%E5%AD%98%E5%82%A8nvd-%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">Mysql 存储nvd 数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CI-x2F-CD%E9%9B%86%E6%88%90\"><span class=\"toc-text\">CI&#x2F;CD集成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jenkins-%E6%9C%AA%E6%B5%8B%E8%AF%95Jenkins%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90\"><span class=\"toc-text\">Jenkins-未测试Jenkins没有权限</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sonarqube-%E6%9C%AA%E6%B5%8B%E8%AF%95%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90\"><span class=\"toc-text\">Sonarqube-未测试没有权限</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"软件供应链安全分析工具-Dependency-Track","uid":"afb19c047533022f884066f88b6a2608","slug":"dependency-track","date":"2022-06-23T09:38:36.281Z","updated":"2022-10-26T08:04:25.268Z","comments":true,"path":"api/articles/dependency-track.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4052-6309800.png","text":"dependency-track概述和背景[[SCA软件成分分析前期探索#OWASP Dependency-Track]] 部署DTquick-start[[SCA软件成分分析前期探索#部署]]docker安装版本为V3.8.0 K8S部署helm-charts前期准备：安装SC...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"SBOM","slug":"SBOM","count":5,"path":"api/tags/SBOM.json"},{"name":"OWASP","slug":"OWASP","count":2,"path":"api/tags/OWASP.json"},{"name":"部署手册","slug":"部署手册","count":3,"path":"api/tags/部署手册.json"},{"name":"dependency-track","slug":"dependency-track","count":1,"path":"api/tags/dependency-track.json"},{"name":"软件供应链","slug":"软件供应链","count":1,"path":"api/tags/软件供应链.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"软件成分分析-OpenSCA","uid":"6da9a10f7f69267b09cc355dd9f52db7","slug":"OpenSCA","date":"2022-06-22T01:09:00.000Z","updated":"2022-10-26T08:42:13.438Z","comments":true,"path":"api/articles/OpenSCA.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29451-52642.png","text":"OpenSCA0x01简介OpenSCA是SCA技术原理的实现。作为悬镜安全 (opens new window)旗下源鉴OSS开源威胁管控产品 (opens new window)的开源版本，OpenSCA继承了源鉴OSS的多源SCA开源应用安全缺陷检测等核心能力，通过软件成分...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件成分分析工具","slug":"软件成分分析工具","count":5,"path":"api/tags/软件成分分析工具.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"opensca","slug":"opensca","count":1,"path":"api/tags/opensca.json"},{"name":"悬镜安全","slug":"悬镜安全","count":1,"path":"api/tags/悬镜安全.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
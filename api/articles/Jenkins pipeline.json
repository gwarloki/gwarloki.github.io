{"title":"CI/CD 过程中的部分pipeline","uid":"832ec458ec0531279eee1cd18e61ce2f","slug":"Jenkins pipeline","date":"2022-09-14T02:13:00.000Z","updated":"2022-10-26T09:18:52.847Z","comments":true,"path":"api/articles/Jenkins pipeline.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29512-7452839.png","content":"<h2 id=\"DT\"><a href=\"#DT\" class=\"headerlink\" title=\"DT\"></a>DT</h2><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">import hudson.model.*;\nimport hudson.*\nimport groovy.json.JsonSlurper;\n\npipeline &#123;\n    agent any\n\n    tools &#123;\n        &#x2F;&#x2F; maven &#39;maven&#39;\n        &#x2F;&#x2F;maven &#39;maven-apollo&#39;\n        maven maven\n        git &#39;Default&#39;\n        jdk &#39;jdk&#39;\n        &#x2F;&#x2F; nodejs &#39;node&#39;\n\n    &#125;\n         \n    stages &#123;\n        stage(&#39;删除上次构建&#39; )&#123;\n            steps &#123;\n               \n                sh &#39;rm -rf *&#39;\n                sh &#39;&#39;&#39;\n                    if [[ $maven &#x3D;&#x3D; &quot;maven-bhb&quot; ]];then\n                        rm -rf &#x2F;data&#x2F;maven&#x2F;localRepository&#x2F;com&#x2F;hcfc&#x2F;*\n                    else\n                        rm -rf &#x2F;data&#x2F;maven&#x2F;localRepository3.8.1&#x2F;com&#x2F;hcfc&#x2F;*\n                    fi\n                &#39;&#39;&#39;\n\n                wrap([$class: &#39;BuildUser&#39;]) &#123;\n                  \n                   script&#123;\n                       buildName &quot;#$&#123;BUILD_ID&#125;-$&#123;projectName&#125;-$&#123;BRANCH&#125;-$&#123;env.BUILD_USER&#125;&quot;   \n\n                   &#125;\n                &#125;\n                \n            &#125;\n        &#125;\n        \n        stage(&#39;拉取代码&#39;)&#123;\n            steps &#123;\n                echo &#39;代码分支:&#39;+BRANCH\n                echo &#39;代码地址:&#39; +GIT_URL\n                git branch: BRANCH, credentialsId: &#39;0eeb53a0-0390-41a4-9ac2-8d4c4c5c884f&#39;, url: GIT_URL\n                \n            &#125;\n        &#125;\n\n       \n        stage(&#39;build&#39;) &#123;\n         steps &#123;\n                sh &#39;&#39;&#39;\n                    mvn clean install -e -U -DskipDockerPush -DdockerImageTags&#x3D;latest -Dmaven.test.skip&#x3D;true $mvn_params -f pom.xml\n                    \n                &#39;&#39;&#39;\n             &#125;\n         &#125;\n         \n        stage(&#39;Generating SBOM with Cyclonedx&#39;) &#123;\n            steps &#123;\n                sh &#39;mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom&#39;\n            &#125;\n        &#125;\n        \n\n         stage(&#39;dependencyTrackPublisher&#39;) &#123;\n             steps &#123;\n                 withCredentials([string(credentialsId: &#39;dt&#39;, variable: &#39;API_KEY&#39;)]) &#123;\n                     dependencyTrackPublisher artifact: &#39;target&#x2F;bom.xml&#39;, projectName: projectName, projectVersion: branch, \\\n                                             autoCreateProjects: true, dependencyTrackApiKey:API_KEY, synchronous: true, \\\n                                             failedNewCritical : 10000, failedNewHigh : 10000, failedNewLow: 10000, failedNewMedium: 10000, \\\n                                             failedTotalCritical : 10000, failedTotalHigh : 10000, failedTotalLow : 10000, failedTotalMedium : 10000,\n                                             unstableNewCritical : 10000, unstableNewHigh : 10000, unstableNewLow : 10000, unstableNewMedium : 10000,\\\n                                             unstableTotalCritical : 10000, unstableTotalHigh : 10000,unstableTotalLow : 10000, unstableTotalMedium : 10000\n                 &#125;\n             &#125;\n         &#125;\n        \n        stage(&#39;安全合规检查&#39;)&#123;\n            steps &#123;\n                script &#123;\n                    def jsonPayload &#x3D; new File(&quot;$WORKSPACE&#x2F;target&#x2F;bom.json&quot;).text\n                    def slurper &#x3D; new JsonSlurper()\n                    def states &#x3D; slurper.parseText(jsonPayload)\n                    def components &#x3D; states.components\n                    def checks &#x3D; [&#39;org.apache.shiro:shiro-spring&#39;:&#39;1.9.1&#39;]\n                    def fail_components &#x3D; &quot;&quot;\n                    for (component in components)&#123;\n                        def dep_name &#x3D; component.group + &quot;:&quot; + component.name\n                        \n                        if (dep_name in checks)&#123;\n                            current_version &#x3D; component.version\n                            \n                            check_version &#x3D; checks.get(dep_name)\n                            String[] current_version_chars &#x3D; current_version.split(&#39;\\\\.&#39;)\n                            String[] check_version_chars &#x3D; check_version.split(&#39;\\\\.&#39;)\n                            \n                            \n                            for(int i&#x3D;0; i&lt;current_version_chars.size(); i++)&#123;\n                                curr &#x3D; Integer.parseInt(current_version_chars[i])\n                                check &#x3D; Integer.parseInt(check_version_chars[i])\n                                if (curr &lt; check)&#123;\n                                    fail_components +&#x3D; component.group + &quot;:&quot; + component.name + &quot;版本过低，当前版本为：&quot; + component.version + &quot;，应不低于&quot; + check_version + &quot;\\n&quot;\n                                    break\n                                &#125;\n                            &#125;\n                        &#125;\n                        \n                    &#125;\n                    if(fail_components !&#x3D; &quot;&quot;)&#123;\n                        println(fail_components)\n                        mvn dependency:tree\n                        error &quot;安全合规检查失败，请升级版本！！！&quot;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<h2 id=\"DC\"><a href=\"#DC\" class=\"headerlink\" title=\"DC\"></a>DC</h2><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">import hudson.model.*;\nimport hudson.*\n\npipeline &#123;\n    agent any\n\n    tools &#123;\n        &#x2F;&#x2F; maven &#39;maven&#39;\n        maven &#39;maven-apollo&#39;\n        git &#39;Default&#39;\n        jdk &#39;jdk&#39;\n        &#x2F;&#x2F; nodejs &#39;node&#39;\n\n    &#125;\n    \n    stages &#123;\n        stage(&#39;删除上次构建&#39; )&#123;\n            steps &#123;\n               \n                sh &#39;rm -rf *&#39;\n                sh &#39;rm -rf &#x2F;data&#x2F;maven&#x2F;localRepository3.8.1&#x2F;com&#x2F;hcfc&#x2F;*&#39;\n\n                wrap([$class: &#39;BuildUser&#39;]) &#123;\n                  \n                   script&#123;\n                       buildName &quot;#$&#123;service_name&#125;-$&#123;BRANCH&#125;-$&#123;env.BUILD_USER&#125;&quot;   \n\n                   &#125;\n                &#125;\n            &#125;\n        &#125;\n        \n        stage(&#39;拉取代码&#39;)&#123;\n            steps &#123;\n                echo &#39;代码分支:&#39;+BRANCH\n                echo &#39;代码地址:&#39; +GIT_URL\n                git branch: BRANCH, credentialsId: &#39;0eeb53a0-0390-41a4-9ac2-8d4c4c5c884f&#39;, url: GIT_URL\n           \n            &#125;\n        &#125;\n        \n        stage(&#39;build&#39;) &#123;\n            steps &#123;\n                sh &#39;&#39;&#39;\n                    mvn clean install -e -U -DskipDockerPush -DdockerImageTags&#x3D;latest -Dmaven.test.skip&#x3D;true $mvn_params -f pom.xml\n                    \n                &#39;&#39;&#39;\n            &#125;\n        &#125;\n        \n        \n        stage(&#39;Dependency-Check 分析&#39;)&#123;\n            steps &#123;\n               sh &#39;&#39;&#39;\n               alias dependency-check&#x3D;&#39;sh &#x2F;data&#x2F;dependency-check&#x2F;dependency-check&#x2F;bin&#x2F;dependency-check.sh&#39;\n\n               dependency-check -n -s $&#123;WORKSPACE&#125;&#x2F; --format HTML --format XML  -o .&#x2F; \n               &#39;&#39;&#39;\n           \n            &#125;\n        &#125;\n        \n        stage(&#39;发布 Dependency-Check 结果&#39;)&#123;\n            steps &#123;\n               dependencyCheckPublisher pattern: &#39;dependency-check-report.xml&#39;\n           \n            &#125;\n        &#125;\n        \n        stage(&#39;发布HTML&#39;)&#123;\n            steps &#123;\n               publishHTML (target : [allowMissing: false,\n               alwaysLinkToLastBuild: false,\n               keepAll: true,\n               reportDir: workspace,\n               reportFiles: &#39;dependency-check-report.html&#39;,\n               reportName: &#39;依赖检测报告&#39;,\n               reportTitles: &#39;OWASP Report&#39;])\n           \n            &#125;\n        &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<h2 id=\"maven-build\"><a href=\"#maven-build\" class=\"headerlink\" title=\"maven build\"></a>maven build</h2><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">import hudson.model.*;\nimport hudson.*\n\npipeline &#123;\n    agent any\n\n    tools &#123;\n        &#x2F;&#x2F; maven &#39;maven&#39;\n        maven &#39;maven-apollo&#39;\n        git &#39;Default&#39;\n        jdk &#39;jdk&#39;\n        &#x2F;&#x2F; nodejs &#39;node&#39;\n\n    &#125;\n         \n    stages &#123;\n        stage(&#39;删除上次构建&#39; )&#123;\n            steps &#123;\n               \n                sh &#39;rm -rf *&#39;\n                sh &#39;rm -rf &#x2F;data&#x2F;maven&#x2F;localRepository3.8.1&#x2F;com&#x2F;hcfc&#x2F;*&#39;\n                &#x2F;&#x2F; sh &#39;docker images&#39;\n                \n                wrap([$class: &#39;BuildUser&#39;]) &#123;\n                  \n                   script&#123;\n                       buildName &quot;#$&#123;BUILD_ID&#125;-$&#123;service_name&#125;-$&#123;BRANCH&#125;-$&#123;env.BUILD_USER&#125;&quot;   \n\n                   &#125;\n                &#125;\n            &#125;\n        &#125;\n        \n        stage(&#39;拉取代码&#39;)&#123;\n            steps &#123;\n                echo &#39;代码分支:&#39;+BRANCH\n                echo &#39;代码地址:&#39; +GIT_URL\n                git branch: BRANCH, credentialsId: &#39;0eeb53a0-0390-41a4-9ac2-8d4c4c5c884f&#39;, url: GIT_URL\n              \n            &#125;\n        &#125;\n\n        stage(&#39;yml文件校验&#39;)&#123;\n            steps &#123;\n                script &#123;\n                    if (!service_name.contains(&quot;apollo&quot;))&#123;\n                        sh &#39;&#39;&#39;\n                           \n                            isExist&#x3D;&#96;find . -name application-*.yml&#96;\n                            if [ -z $isExist ]; then\n                                echo &quot;yml文件校验通过&quot;\n                            else\n                                echo &quot;yml文件校验不通过，存在命名为 $isExist 的文件，可能会引起生产问题，请联系开发删除&quot;\n                                exit 2\n                            fi\n                            &#39;&#39;&#39;\n                    &#125;\n                &#125;\n                \n            &#125;            \n        &#125;\n\n        \n        stage(&#39;验证 DOCKER_IMAGE 长度&#39;)&#123;\n            steps &#123;\n                sh &#39;&#39;&#39;\n                    if [[ $&#123;#DOCKER_IMAGE&#125; -gt 28 ]];then\n                        echo &quot;镜像名称长度不能超过28！！！！修改后再来吧！&quot;\n                        exit 2\n                    fi\n                    &#39;&#39;&#39;\n            &#125;\n        &#125;\n        \n        stage(&#39;apollo配置校验&#39;)&#123;\n            steps &#123;\n                script &#123;\n                    sh &#39;&#39;&#39;\n                        updatedb\n                        bootstrapList&#x3D;&#96;locate bootstrap | grep $WORKSPACE&#39;&#x2F;&#39;&#96;\n                        for bootstrap in $bootstrapList\n                            do\n                                cat $bootstrap | while read line\n                                    do\n                                        echo $line\n                                        str&#x3D;$&#123;line##*( )&#125;\n                                        echo $str\n                                        if [[ $str &#x3D;&#x3D; config-service* ]];then\n                                            echo &quot;$bootstrap 文件检查失败，请将apollo.configservice修改为apollo.meta!!! &quot;\n                                            exit 2\n                                        fi\n\n                                    done\n                            done\n                    &#39;&#39;&#39;\n                &#125;\n                \n            &#125;            \n        &#125;\n        \n        \n        stage(&#39;Dockerfile镜像源检查&#39;) &#123;\n         steps &#123;\n                sh &#39;&#39;&#39;\n                    if [[ $POM_PATH &#x3D;&#x3D; &#39;pom.xml&#39; ]];then\n                        updatedb\n                        dockerfiles&#x3D;&#96;locate Dockerfile | grep -v target | grep $WORKSPACE&#39;&#x2F;&#39;&#96;\n                    else\n                        dir&#x3D;$&#123;POM_PATH%&#x2F;*&#125;\n                        echo $dir\n                        dockerfiles&#x3D;&#96;locate Dockerfile | grep -v target | grep $WORKSPACE&#39;&#x2F;&#39; | grep $dir&#96;\n                    fi\n                    \n                    for dockerfile in $dockerfiles\n                        do\n                            cat $dockerfile | while read line\n                                do\n                                    echo $line\n                                    str&#x3D;$&#123;line##*( )&#125;\n                                    echo $str\n                                    if [[ $str &#x3D;~ ^FROM ]];then\n                                        if [[ !( $str &#x3D;~ &#39;&#x2F;&#39; ) ]] || [[ !( $str &#x3D;~ &#39;registry.moses.com&#39; ) ]];then\n                                            echo &quot;Dockerfile 没有指定镜像源&quot;\n                                            exit 2\n                                        else\n                                            exit 0\n                                           \n                                        fi\n                                    fi\n                                done\n                        done\n                &#39;&#39;&#39;\n            &#125;\n        &#125;\n\n\n        stage(&#39;mavenSnapshotCheck&#39;)&#123;\n            steps &#123;\n                \n                sh &#39;&#39;&#39;\n                    echo &quot;获取白名单列表......&quot;\n                    white_services&#x3D;(&quot;hcfc-slam-entrust-web-v2&quot; &quot;hcfc-slam-entrust-soa&quot; &quot;credit-tencent&quot; &quot;lam-quota-soa&quot; &quot;credit-cloud&quot; &quot;credit-face&quot; &quot;hcfc-lam-web-v2&quot; &quot;hcfc-lam-cm-soa&quot; &quot;hcfc-lam-cm-web&quot; &quot;jdgp&quot; &quot;hcfc-lam-core-web&quot; &quot;hcfc-lam-core-soa&quot; &quot;hcfc-antifraud-auto&quot; &quot;hcfc-antifraud-soa&quot; &quot;hcfc-antifraud-web&quot; &quot;hcfc-auditor-auto&quot; &quot;hcfc-auditor-soa&quot; &quot;hcfc-auditor-web&quot; &quot;hcfc-roster-soa&quot; &quot;hcfc-jdgp-server&quot; &quot;id-generator&quot;)\n\n                    echo &quot;检查依赖项......&quot;\n                    \n                    dependency&#x3D;&#96;mvn dependency:list | grep -i snapshot| grep INFO|grep com.hcfc|awk &#39;&#123;print $2&#125;&#39;&#96;\n\n                    if ( [[ $&#123;#dependency&#125; -gt 0 ]] &amp;&amp; [[ ! (&quot;$&#123;white_services[@]&#125;&quot; &#x3D;~ &quot;$&#123;service_name&#125;&quot;) ]] );then\n\n                            echo &quot;依赖检查失败，请联系研发修改！！！&quot;\n                            exit 2\n                    else\n                        echo &quot;依赖检查通过！！！&quot;\n                    fi \n\n                    echo &quot;依赖检查结束......&quot;\n\n                    &#39;&#39;&#39;\n            &#125;\n\n        &#125;\n\n        &#x2F;&#x2F; stage(&#39;mavenSnapshotCheck&#39;) &#123;\n        &#x2F;&#x2F;     steps &#123;\n        &#x2F;&#x2F;         mavenSnapshotCheck check: true\n                \n        &#x2F;&#x2F;     &#125;\n        &#x2F;&#x2F; &#125;\n\n\n        stage(&#39;build&#39;) &#123;\n         steps &#123;\n                sh &#39;&#39;&#39;\n                    mvn clean install -e -U -DskipDockerPush -DdockerImageTags&#x3D;latest -Dmaven.test.skip&#x3D;true $mvn_params -f pom.xml\n                    if [[ $copy_to_remote_server &#x3D;&#x3D; &quot;true&quot; ]];then\n                        updatedb\n                        jar_path&#x3D;&#96;locate $service_name&quot;.jar&quot;| grep &quot;$WORKSPACE&quot;|grep docker|awk &#39;NR&#x3D;&#x3D;1&#123;print&#125;&#39;&#96;\n                        current&#x3D;$(date &quot;+%Y%m%d%H%M%S&quot;)\n                        ssh root@10.1.80.10 &quot;mkdir -p &#x2F;data&#x2F;guangfudai&#x2F;$service_name&#x2F;$current&quot;\n\t                    scp -r $jar_path &quot;root@10.1.80.10:&#x2F;data&#x2F;guangfudai&#x2F;$service_name&#x2F;$current&#x2F;&quot;\n                    fi\n                   # docker images\n                    \n                &#39;&#39;&#39;\n             &#125;\n         &#125;\n\n        stage(&#39;tag&#39;) &#123;\n            steps &#123;\n                sh &#39;&#39;&#39;\n                    \n\n                    if [[ &quot;$&#123;BRANCH&#125;&quot; &#x3D; &#39;master&#39; ]];then\n                    \n                        global_version&#x3D;&#96;cat pom.xml| grep revision|wc -l&#96;\n                    \n    \n                        if [[ $global_version -gt 0 ]];then\n                            POM_VERSION&#x3D;&#96;mvn -Dexec.executable&#x3D;&#39;echo&#39; -Dexec.args&#x3D;&#39;$&#123;project.version&#125;&#39; --non-recursive exec:exec -q -f pom.xml&#96;\n                        else\n                            POM_VERSION&#x3D;&#96;mvn -Dexec.executable&#x3D;&#39;echo&#39; -Dexec.args&#x3D;&#39;$&#123;project.version&#125;&#39; --non-recursive exec:exec -q -f $POM_PATH&#96;\n    \n                        fi\n                        \n                        VERSION&#x3D;&quot;$POM_VERSION&quot;\n                    else\n                        VERSION&#x3D;&quot;$&#123;BRANCH&#125;.$&#123;BUILD_ID&#125;&quot;\n                    fi\n                    echo &quot;Version:$VERSION&quot;\n                    echo &quot;#&#123;DOCKER_IMAGE&#125;&#x3D;$VERSION&quot; &gt; micro-service.version\n                    \n                    if [[ $POM_DOCKER_IMAGE &#x3D;~ &quot;:&quot; ]];then\n                        sub&#x3D;$&#123;POM_DOCKER_IMAGE##*:&#125;\n                        if [[ $sub &#x3D;~ &quot;&#x2F;&quot; ]];then\n                            echo $POM_DOCKER_IMAGE\n                        else\n                            VERSION&#x3D;$&#123;POM_DOCKER_IMAGE##*:&#125;\n                            POM_DOCKER_IMAGE&#x3D;$&#123;POM_DOCKER_IMAGE%%:*&#125;\n                        fi\n                    fi\n                    \n                    image&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;docker images| grep &quot;latest&quot;|awk &#39;&#123;print $1&#125;&#39;|grep &quot;$POM_DOCKER_IMAGE$&quot;|wc -l&#96;\n                    \n\n                    if [[ $image -ne 0 ]];then\n                            &#x2F;usr&#x2F;bin&#x2F;docker tag  $POM_DOCKER_IMAGE:latest $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:$VERSION\n\n                            if [[ &quot;$&#123;BRANCH&#125;&quot; &#x3D; &quot;master&quot; ]]; then\n                                &#x2F;usr&#x2F;bin&#x2F;docker tag $POM_DOCKER_IMAGE:latest  $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:latest\n                                &#x2F;usr&#x2F;bin&#x2F;docker tag $POM_DOCKER_IMAGE:latest $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:$&#123;BRANCH&#125;.$&#123;BUILD_ID&#125;\n                                &#x2F;usr&#x2F;bin&#x2F;docker push $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:$&#123;BRANCH&#125;.$&#123;BUILD_ID&#125;\n                                &#x2F;usr&#x2F;bin&#x2F;docker push $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:latest\n                            fi\n\n                            &#x2F;usr&#x2F;bin&#x2F;docker push $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:$VERSION\n\n                            echo &quot;&#x2F;usr&#x2F;bin&#x2F;docker image: $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:$VERSION&quot;\n                            echo &quot;&#x2F;usr&#x2F;bin&#x2F;docker image: $ENV_DOCKER_REGISTRY_HOST&#x2F;$DOCKER_IMAGE:latest&quot;\n                    else\n                            echo &quot;镜像打包失败，请检查 前面流程失败或者POM_DOCKER_IMAGE与研发代码中的不匹配&quot;\n\n                    fi\n                    echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下请忽略&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;\n                &#39;&#39;&#39;\n\n            &#125;\n        &#125;\n        \n        stage(&#39;clean no use images 忽略此步骤&#39;) &#123;\n         steps &#123;\n             \n             sh &#39;&#39;&#39;\n                if [[ $POM_DOCKER_IMAGE &#x3D;~ &quot;:&quot; ]];then\n                    POM_DOCKER_IMAGE&#x3D;$&#123;POM_DOCKER_IMAGE%%:*&#125;\n                fi\n                &#x2F;usr&#x2F;bin&#x2F;docker rmi $(&#x2F;usr&#x2F;bin&#x2F;docker images | grep -w $POM_DOCKER_IMAGE | awk -F &#39; &#39; &#39;&#123;print $1&quot;:&quot;$2&#125;&#39;)\n                &#x2F;usr&#x2F;bin&#x2F;docker rmi $(&#x2F;usr&#x2F;bin&#x2F;docker images | grep -w $DOCKER_IMAGE | awk -F &#39; &#39; &#39;&#123;print $1&quot;:&quot;$2&#125;&#39;)\n            &#39;&#39;&#39;\n                \n            &#125;\n         &#125;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<h2 id=\"push-images-to-registry-Nexus\"><a href=\"#push-images-to-registry-Nexus\" class=\"headerlink\" title=\"push images to registry Nexus\"></a>push images to registry Nexus</h2><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">import hudson.model.*;\nimport hudson.*\n\npipeline &#123;\n    agent any\n\n    tools &#123;\n        &#x2F;&#x2F; maven &#39;maven&#39;\n        maven &#39;maven-apollo&#39;\n        git &#39;Default&#39;\n        jdk &#39;jdk&#39;\n\n    &#125;\n         \n    stages &#123;\n        stage(&#39;删除上次构建&#39; )&#123;\n            steps &#123;\n               \n                sh &#39;rm -rf *&#39;\n                sh &#39;rm -rf &#x2F;data&#x2F;maven&#x2F;localRepository3.8.1&#x2F;com&#x2F;hcfc&#x2F;*&#39;\n                sh &#39;docker images&#39;\n                \n                wrap([$class: &#39;BuildUser&#39;]) &#123;\n                  \n                  script&#123;\n                      buildName &quot;#$&#123;BUILD_ID&#125;-$&#123;dir_names&#125;-$&#123;env.BUILD_USER&#125;&quot;   \n                  &#125;\n                &#125;\n            &#125;\n        &#125;\n        \n        stage(&#39;拉取代码&#39;)&#123;\n            steps &#123;\n                echo &#39;代码分支:&#39;+BRANCH\n                echo &#39;代码地址:&#39; +GIT_URL\n                git branch: BRANCH, credentialsId: &#39;0eeb53a0-0390-41a4-9ac2-8d4c4c5c884f&#39;, url: GIT_URL\n                \n            &#125;\n        &#125;\n\n        stage(&#39;推送jar包&#39;)&#123;\n            steps &#123;\n                script&#123;\n                    \n                    sh &#39;&#39;&#39;\n                        dirs&#x3D;$&#123;dir_names&#x2F;&#x2F;,&#x2F; &#125;\n                        for dir in $&#123;dirs[@]&#125;\n                        do\n                            package_version&#x3D;&#96;mvn -Dexec.executable&#x3D;echo &#39;-Dexec.args&#x3D;$&#123;project.version&#125;&#39; --non-recursive exec:exec -q -f $dir&#x2F;pom.xml&#96;\n                            package_name&#x3D;&#96;mvn -Dexec.executable&#x3D;echo &#39;-Dexec.args&#x3D;$&#123;project.artifactId&#125;&#39; --non-recursive exec:exec -q -f $dir&#x2F;pom.xml&#96;\n                            url&#x3D;&#39;http:&#x2F;&#x2F;maven.moses.com&#x2F;service&#x2F;rest&#x2F;v1&#x2F;search?group&#x3D;com.hcfc&amp;name&#x3D;&#39;$package_name&#39;&amp;version&#x3D;&#39;$package_version\n                            \n                            curl -X GET $url -H &#39;Authorization: Basic dGVzdGplbmtpbnM6MzEybzZ6V0VOUGpvWmlWS3FHaWQ&#x3D;&#39; &gt; response_json\n                            items&#x3D;&#96;jq .items response_json&#96;\n                            \n                            if [[ $items !&#x3D; &#39;&#39; &amp;&amp; $items !&#x3D; [] ]];then\n                                echo &quot;版本已存在 &quot;\n                            fi\n                        done\n                    \n                        \n                        if [[ $dir_names &#x3D;&#x3D; &quot;&quot; ]];then\n                            mvn clean deploy $mvn_params -DskipDockerPush -DskipTests\n                        else\n                            mvn clean deploy -pl $dir_names $mvn_params -DskipDockerPush -DskipTests\n                        fi\n                        &#39;&#39;&#39;\n                &#125;\n                \n            &#125;\n        &#125;\n    &#125;\n\n&#125;</code></pre>\n<h2 id=\"前端项目打包\"><a href=\"#前端项目打包\" class=\"headerlink\" title=\"前端项目打包\"></a>前端项目打包</h2><pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">import hudson.model.*;\n\npipeline &#123;\n    agent any\n\n    tools &#123;\n        git &#39;Default&#39;\n        nodejs &#39;node-13&#39;\n\n    &#125;\n         \n    stages &#123;\n        stage(&#39;删除上次构建&#39; )&#123;\n            steps &#123;\n                sh &#39;rm -rf *&#39;\n                \n                wrap([$class: &#39;BuildUser&#39;]) &#123;\n                  \n                   script&#123;\n                       buildName &quot;#$&#123;service_name&#125;-$&#123;BRANCH&#125;-$&#123;env.BUILD_USER&#125;&quot;   \n\n                   &#125;\n                &#125;\n            &#125;\n        &#125;\n        \n        stage(&#39;拉取代码&#39;)&#123;\n            steps &#123;\n                echo &#39;代码分支:&#39;+BRANCH\n                echo &#39;代码地址:&#39; +GIT_URL\n                git branch: BRANCH, credentialsId: &#39;0eeb53a0-0390-41a4-9ac2-8d4c4c5c884f&#39;, url: GIT_URL\n            &#125;\n        &#125;\n        \n        stage(&#39;安装npm&#39;)&#123;\n            steps &#123;\n                script &#123;\n                    sh  &#39;&#39;&#39;\n                        cnpm install\n                        git submodule init \n                        git submodule update\n                    &#39;&#39;&#39;\n                &#125;\n            &#125;\n        &#125;\n\n        stage(&#39;build&#39;) &#123;\n            steps &#123;\n                sh &#39;&#39;&#39;\n                    export CI&#x3D;false\n                    npm run build$&#123;ENVIRONMENT&#125;\n                &#39;&#39;&#39;\n            &#125;\n        &#125;\n         \n        stage(&#39;deploy&#39;) &#123;\n            steps &#123;\n                sh &#39;&#39;&#39;\n                    cd $BUILD_DIR\n                    ssh $SSH_AGENT_ACCOUNT@$SSH_AGENT_IP &quot;cd $SSH_AGENT_PATH&#x2F;$DOMAIN&#x2F;$DIR &amp;&amp; rm -rf *&quot;\n                    scp -r * $SSH_AGENT_ACCOUNT@$SSH_AGENT_IP:$SSH_AGENT_PATH&#x2F;$DOMAIN&#x2F;$DIR\n                    ssh $SSH_AGENT_ACCOUNT@$SSH_AGENT_IP &quot;cd $SSH_AGENT_PATH&#x2F;$DOMAIN&#x2F;$DIR &amp;&amp; zip -r $&#123;service_name&#125;.moses.com.zip .&#x2F;*&quot;\n                &#39;&#39;&#39;\n            &#125;\n        &#125;               \n\n    &#125;\n\n&#125;</code></pre>","text":"DTimport hudson.model.*; import hudson.* import groovy.json.JsonSlurper; pipeline &#123; agent any tools &#123; &#x2F;&#x2F; maven &#39;mave...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"CI/CD","slug":"CI-CD","count":1,"path":"api/tags/CI-CD.json"},{"name":"Jenkins","slug":"Jenkins","count":1,"path":"api/tags/Jenkins.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DT\"><span class=\"toc-text\">DT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DC\"><span class=\"toc-text\">DC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#maven-build\"><span class=\"toc-text\">maven build</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#push-images-to-registry-Nexus\"><span class=\"toc-text\">push images to registry Nexus</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85\"><span class=\"toc-text\">前端项目打包</span></a></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"软件供应链分析工具-GoLang原生工具","uid":"9c3da876af68c4f62cd5f90bc6783fab","slug":"GoLang native sca tool for developer","date":"2022-09-14T02:13:00.000Z","updated":"2022-10-26T08:41:52.362Z","comments":true,"path":"api/articles/GoLang native sca tool for developer.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29376-6050591.png","text":"GoLang native sca tool for developer0x01简介2022-09-06，Go 安全团队正式对外宣布Go漏洞管理工具 Govulncheck， Govulncheck 是一款面向开发者的供应链漏洞检测工具，通过分析源代码或编译后的二进制文件，分析项...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"GoLand","slug":"GoLand","count":1,"path":"api/tags/GoLand.json"},{"name":"软件成分分析工具","slug":"软件成分分析工具","count":5,"path":"api/tags/软件成分分析工具.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"软件成分分析工具-syft","uid":"5d3847e382c5758f0e662a8985f6d419","slug":"syft","date":"2022-08-31T09:44:00.000Z","updated":"2022-10-26T09:05:01.983Z","comments":true,"path":"api/articles/syft.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29480-2917846.png","text":"syft0x01简介syftGitHub about：CLI tool and library for generating a Software Bill of Materials from container images and filesystems其他信息 项目由anc...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"镜像依赖分析","slug":"镜像依赖分析","count":1,"path":"api/tags/镜像依赖分析.json"},{"name":"docker-SBOM","slug":"docker-SBOM","count":1,"path":"api/tags/docker-SBOM.json"},{"name":"容器镜像安全","slug":"容器镜像安全","count":1,"path":"api/tags/容器镜像安全.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
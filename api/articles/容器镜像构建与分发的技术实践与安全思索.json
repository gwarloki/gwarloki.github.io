{"title":"容器镜像构建与分发的技术实践与安全思索","uid":"d761d3905282bd119994c0c8a6e0235c","slug":"容器镜像构建与分发的技术实践与安全思索","date":"2022-09-01T06:34:00.000Z","updated":"2022-10-27T02:20:09.450Z","comments":true,"path":"api/articles/容器镜像构建与分发的技术实践与安全思索.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/244766/beach-themed-backgrounds-244766-2113386-274623.png","content":"<h1 id=\"容器镜像构建与分发的技术实践与安全思索\"><a href=\"#容器镜像构建与分发的技术实践与安全思索\" class=\"headerlink\" title=\"容器镜像构建与分发的技术实践与安全思索\"></a>容器镜像构建与分发的技术实践与安全思索</h1><h2 id=\"Backend\"><a href=\"#Backend\" class=\"headerlink\" title=\"Backend\"></a>Backend</h2><p><strong>Docker 能引爆容器，主要原因是它带来了镜像和镜像分发技术。</strong> 容器运行时是 Kubernetes 平台的基础组件，镜像则是容器的静态文件，容器由镜像创建。在 Kubernetes 平台中，我们交付的所有应用，最终都是以镜像形式交付的，镜像的构建与分发，直接影响 CI&#x2F;CD 的完成度。所以，镜像也是 Kubernetes 平台的重要基础。</p>\n<h3 id=\"镜像的来源\"><a href=\"#镜像的来源\" class=\"headerlink\" title=\"镜像的来源\"></a>镜像的来源</h3><p>镜像的来源一般有两种形式。一种是通过构建生成镜像，在基础镜像上添加用户自定义的内容及配置，制作出业务镜像，如基于 JDK 基础镜像构建 Java 程序的应用镜像。另一种是从镜像仓库获取别人制作好的镜像，很多常用软件或系统都会有官方制作好的镜像，存储在公开的镜像仓库中，如 rocky、nginx、redis 等，你可以在 Docker Hub 搜索并下载它们。</p>\n<h3 id=\"关于免发行版容器的概念\"><a href=\"#关于免发行版容器的概念\" class=\"headerlink\" title=\"关于免发行版容器的概念\"></a>关于免发行版容器的概念</h3><p>大体概念是将应用程序打包到容器镜像中，同时尽可能多地删除操作系统（软件包管理器、库、shell等）如谷歌的[[容器镜像构建与分发的技术实践与安全思索#基础镜像-Distroless]].<br>但是，就Linux发行版来说是由两个主要组件组成的：内核和用户空间。内核相对容器理解，它是是个硬件或虚拟机运行的特殊程序。用户空间有点难以理解。用户空间包括在容器镜像中看到的所有内容，如C库（glibc)、Web服务器、加密库、时区数据、区域设置数据（语言）等。<br><strong>用户空间无法真正从发行版容器镜像中删除，无发行版镜像必须始终在内核上运行。即使谷歌的[[容器镜像构建与分发的技术实践与安全思索#基础镜像-Distroless]]项目也依赖Debian来满足用户空间要求。</strong> <a href=\"https://github.com/GoogleContainerTools/distroless/issues/780\">when can we expect distroless based on bullseye? · Issue #780 · GoogleContainerTools&#x2F;distroless · GitHub</a><br><strong>即使在无发行版的容器镜像中，想Java虚拟机、Python和node.js等内容也是根据C库编译的，该库是这些用户空间程序可以访问Linux内核中的低级功能（网络套接字、存储、文件等）</strong></p>\n<h2 id=\"Challenge\"><a href=\"#Challenge\" class=\"headerlink\" title=\"Challenge\"></a>Challenge</h2><h3 id=\"企业中哪个部门负责构建镜像\"><a href=\"#企业中哪个部门负责构建镜像\" class=\"headerlink\" title=\"企业中哪个部门负责构建镜像\"></a>企业中哪个部门负责构建镜像</h3><h3 id=\"docker的安全问题\"><a href=\"#docker的安全问题\" class=\"headerlink\" title=\"docker的安全问题\"></a>docker的安全问题</h3><ul>\n<li> Docker daemon (Docker in Docker)</li>\n<li> Docker Unix socket从主机挂载到构建容器中</li>\n</ul>\n<h3 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h3><ul>\n<li>多大程度的利用缓存</li>\n<li>OCI标准和K8S生态</li>\n</ul>\n<h2 id=\"Theory\"><a href=\"#Theory\" class=\"headerlink\" title=\"Theory\"></a>Theory</h2><h3 id=\"反模式之黄金基础镜像\"><a href=\"#反模式之黄金基础镜像\" class=\"headerlink\" title=\"反模式之黄金基础镜像\"></a>反模式之黄金基础镜像</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>•黄金基础镜像 (golden base image)：我们预先配置好的镜像，作为构建应用程序镜像的基础镜像。<br>•反模式 (antipattern) ：在实践中经常出现但低效或是有待优化的设计模式。</p></blockquote>\n<p>黄金镜像的概念作为最常见的基础容器安全控制的思路，通过预先配置好的基础镜像构建企业应用程序的镜像，镜像的工具和库都经过了严格的审核。<strong>需要检查、维护相关软件的安全状态，并且要审核使用非黄金镜像构建的应用镜像，可能要引入可信镜像的概念和方法论</strong>考虑到当从第三方或官方获取需要的上游镜像构建应用程序和配置时会引入新的相关问题，首先，从上游镜像到内部定制版镜像的初始转换涉及额外工作。其次，运维团队有责任存储和维护这些内部镜像。在典型环境中，使用的镜像数量会越来越多，涉及的额外工作也随之增加，最终导致更严峻的安全状况，如镜像的更新操作，即使有，频率也会很低。</p>\n<p><strong>黄金镜像的一些要求：</strong></p>\n<ul>\n<li>确保安装了特定的软件</li>\n<li>确保不存在易受攻击的库</li>\n<li>确保用户具有正确的权限</li>\n</ul>\n<p><strong>评估黄金镜像的原则：</strong></p>\n<ul>\n<li>确保镜像由信誉良好的组织发布。不能随便从 DockerHub 或其他公开的镜像注册表的某个仓库下载镜像，因为这些镜像将是构建应用程序镜像的基础。</li>\n<li>优先选择持续更新的镜像。基础镜像通常包含工具和库，发现漏洞时，必须打补丁。</li>\n<li>首选开源了构建过程或规范的镜像。通常是 Dockerfile 文件，你可以通过它了解镜像是如何构建的。</li>\n<li>避免使用包含不必要工具或库的镜像。首选最小化镜像，这些镜像占用的空间很小，必要时开发人员可以在其上进行二次构建。</li>\n</ul>\n<h3 id=\"基础镜像-Distroless\"><a href=\"#基础镜像-Distroless\" class=\"headerlink\" title=\"基础镜像-Distroless\"></a>基础镜像-Distroless</h3><p>谷歌现在通过提供 <code>Distroless</code> 镜像向全世界开放这种能力。谷歌构建的这些镜像的目标是只包含你的应用程序及其依赖项，同时它们将没有常规 <code>Linux</code> 发行版的所有特性，包括 <code>shell</code>。</p>\n<p><strong>这意味着虽然可以想以前一样运行应用程序的容器，但不能在容器运行的时候进入容器内</strong>。这是一个重大的安全改进，因为你现在已经为黑客通过 <code>shell</code> 进入你的容器关上了大门。</p>\n<p>以下基础镜像是正式发布的版本：<strong>目前最新版本支持debian11</strong></p>\n<ul>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/base/README.md\">gcr.io&#x2F;distroless&#x2F;static-debian10</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/base/README.md\">gcr.io&#x2F;distroless&#x2F;base-debian10</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/java/README.md\">gcr.io&#x2F;distroless&#x2F;java-debian10</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/cc/README.md\">gcr.io&#x2F;distroless&#x2F;cc-debian10</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/nodejs/README.md\">gcr.io&#x2F;distroless&#x2F;nodejs-debian10</a></li>\n</ul>\n<p>下面的基础镜像仍在实验阶段，不推荐用于生产环境：</p>\n<ul>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/experimental/python2.7/README.md\">gcr.io&#x2F;distroless&#x2F;python2.7-debian10</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/experimental/python3/README.md\">gcr.io&#x2F;distroless&#x2F;python3-debian10</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/java/jetty/README.md\">gcr.io&#x2F;distroless&#x2F;java&#x2F;jetty-debian10</a></li>\n<li><a href=\"https://github.com/GoogleContainerTools/distroless/blob/main/experimental/dotnet/README.md\">gcr.io&#x2F;distroless&#x2F;dotnet</a></li>\n</ul>\n<h4 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Start by building the application.\nFROM golang:1.18 as build\n\nWORKDIR &#x2F;go&#x2F;src&#x2F;app\nCOPY . .\n\nRUN go mod download\nRUN CGO_ENABLED&#x3D;0 go build -o &#x2F;go&#x2F;bin&#x2F;app\n\n# Now copy it into our base image.\nFROM gcr.io&#x2F;distroless&#x2F;static-debian11\nCOPY --from&#x3D;build &#x2F;go&#x2F;bin&#x2F;app &#x2F;\nCMD [&quot;&#x2F;app&quot;]\n\n</code></pre>\n<h4 id=\"关于网络\"><a href=\"#关于网络\" class=\"headerlink\" title=\"关于网络\"></a>关于网络</h4><p>参考<a href=\"https://soulteary.com/2018/10/03/how-to-get-your-k8s-cluster.html#%E8%8E%B7%E5%8F%96%E9%95%9C%E5%83%8F%E5%B9%B6%E5%AF%BC%E5%87%BA%E4%B8%BA%E7%A6%BB%E7%BA%BF%E9%95%9C%E5%83%8F%E5%8C%85\">下载离线镜像</a>，使用云服务器或者有🪜条件的服务器获取镜像。</p>\n<h4 id=\"关于调试\"><a href=\"#关于调试\" class=\"headerlink\" title=\"关于调试\"></a>关于调试</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Start by building the application.\nFROM golang:1.18 as build\n\nWORKDIR &#x2F;go&#x2F;src&#x2F;app\nCOPY . .\n\nRUN go mod download\nRUN CGO_ENABLED&#x3D;0 go build -o &#x2F;go&#x2F;bin&#x2F;app\n\n# 在镜像后添加 debug 标签开启调试模式\nFROM gcr.io&#x2F;distroless&#x2F;base:debug\nCOPY --from&#x3D;build &#x2F;go&#x2F;bin&#x2F;app &#x2F;\nCMD [&quot;&#x2F;app&quot;]</code></pre>\n\n<h2 id=\"Tools-构建容器的工具\"><a href=\"#Tools-构建容器的工具\" class=\"headerlink\" title=\"Tools-构建容器的工具\"></a>Tools-构建容器的工具</h2><h3 id=\"BuildKit\"><a href=\"#BuildKit\" class=\"headerlink\" title=\"BuildKit\"></a>BuildKit</h3><p><strong>BuildKit</strong> 是下一代的镜像构建组件，在 <a href=\"https://github.com/moby/buildkit\">https://github.com/moby/buildkit</a> 开源。</p>\n<p><strong>注意：如果您的镜像构建使用的是云服务商提供的镜像构建服务（腾讯云容器服务、阿里云容器服务等），由于上述服务提供商的 Docker 版本低于 18.09，BuildKit 无法使用，将造成镜像构建失败。<a href=\"https://docs.docker.com/build/\">build</a>建议使用 BuildKit 构建镜像时使用一个新的 Dockerfile 文件（例如 Dockerfile.buildkit）</strong></p>\n<p>目前，Docker Hub 自动构建已经支持 buildkit，具体请参考 <a href=\"https://github.com/docker-practice/docker-hub-buildx\">https://github.com/docker-practice/docker-hub-buildx</a></p>\n<h3 id=\"Cloud-Native-Buildpacks（CNB）\"><a href=\"#Cloud-Native-Buildpacks（CNB）\" class=\"headerlink\" title=\"Cloud Native Buildpacks（CNB）\"></a>Cloud Native Buildpacks（CNB）</h3><h3 id=\"kaniko\"><a href=\"#kaniko\" class=\"headerlink\" title=\"kaniko\"></a>kaniko</h3><p>kaniko 是一个在容器或 Kubernetes 集群内从 Dockerfile 构建容器镜像的工具 ( Build Container Images In Kubernetes )。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由于 kaniko 不依赖于 Docker 守护进程，并且完全在用户空间中执行 Dockerfile 中的每个命令，这使得能够在轻松或安全地运行在<code>无Docker守护程序的环境</code>（如标准Kubernetes集群 V1.24.x）中构建容器映像。<br>在 Kubernetes V1.24.x 版本之后默认采用 containerd.io 作为缺省的cri，不在支持 docker-shim 意味着我们不需要安装 docker 环境</p></blockquote>\n<h3 id=\"Bazel\"><a href=\"#Bazel\" class=\"headerlink\" title=\"Bazel\"></a>Bazel</h3><p>待补充</p>\n<h3 id=\"img\"><a href=\"#img\" class=\"headerlink\" title=\"img\"></a>img</h3><p>待补充</p>\n<h3 id=\"jib\"><a href=\"#jib\" class=\"headerlink\" title=\"jib\"></a>jib</h3><p>如果你是在 Java 环境下面，还可以使用 Jib 来构建镜像，Jib 也是 Google 开源的，只是是针对 Java 容器镜像构建的工具。<br>通过使用 Jib，Java 开发人员可以使用他们熟悉的 Java 工具来构建镜像。Jib 是一个快速而简单的容器镜像构建工具，它负责处理将应用程序打包到容器镜像中所需的所有步骤，它不需要你编写 Dockerfile 或安装 Docker，而且可以直接集成到 Maven 和 Gradle 中，只需要将插件添加到构建中，就可以立即将 Java 应用程序容器化。</p>\n<p>Jib 利用了 Docker 镜像的分层机制，将其与构建系统集成，并通过以下方式优化 Java 容器镜像的构建：</p>\n<ul>\n<li><p>简单：Jib 使用 Java 开发，并作为 Maven 或 Gradle 的一部分运行。你不需要编写 Dockerfile 或运行 Docker 守护进程，甚至无需创建包含所有依赖的大 JAR 包。因为 Jib 与 Java 构建过程紧密集成，所以它可以访问到打包应用程序所需的所有信息。</p>\n</li>\n<li><p>快速：Jib 利用镜像分层和缓存来实现快速、增量的构建。它读取你的构建配置，将你的应用程序组织到不同的层（依赖项、资源、类）中，并只重新构建和推送发生变更的层。在项目进行快速迭代时，Jib 只将发生变更的层（而不是整个应用程序）推送到镜像仓库来节省宝贵的构建时间。</p>\n</li>\n<li><p>可重现：Jib 支持根据 Maven 和 Gradle 的构建元数据进行声明式的容器镜像构建，因此，只要输入保持不变，就可以通过配置重复创建相同的镜像。</p>\n</li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://mp.weixin.qq.com/s/8B36Tyjer3lN5I1mhjBICA\">容器镜像构建与分发</a><br><a href=\"https://cloud.tencent.com/developer/article/1840211\">如何使用 Distroless 让你的容器更加安全 - 腾讯云开发者社区-腾讯云</a><br><a href=\"https://zhuanlan.zhihu.com/p/421204096\">使用以语言为中心的容器基础镜像 distroless - 知乎</a><br><a href=\"https://soulteary.com/2018/10/03/how-to-get-your-k8s-cluster.html#%E8%8E%B7%E5%8F%96%E9%95%9C%E5%83%8F%E5%B9%B6%E5%AF%BC%E5%87%BA%E4%B8%BA%E7%A6%BB%E7%BA%BF%E9%95%9C%E5%83%8F%E5%8C%85\">简单的 Kubernetes 集群搭建 - 苏洋博客</a><br><a href=\"https://www.thoughtworks.com/zh-cn/radar/techniques/distroless-docker-images\">Distroless Docker images | Technology Radar | Thoughtworks</a><br><a href=\"https://segmentfault.com/a/1190000040255793\">如何使用 Distroless 让你的容器更加安全 - SegmentFault 思否</a><br><a href=\"https://mp.weixin.qq.com/s/wchtH6i0xKrIrqSuYKmWkg\">丢弃手中的docker build ，使用Kaniko直接在K8S集群或Containerd环境构建推送容器镜像</a><br><a href=\"https://mp.weixin.qq.com/s/6zCtacL5rpO9Y6o0IrQl8Q\">常用容器镜像构建工具和方案介绍</a><br><a href=\"https://betterprogramming.pub/how-to-harden-your-containers-with-distroless-docker-images-c2abd7c71fdb\">Harden Your Containers with Distroless Docker Images | Better Programming</a><br><a href=\"https://www.redhat.com/en/blog/why-distroless-containers-arent-security-solution-you-think-they-are\">Why distroless containers aren’t the security solution you think they are</a><br><a href=\"https://opensource.com/article/19/2/linux-distributions-still-matter-containers?extIdCarryOver=true&sc_cid=701f2000001Css5AAC\">Do Linux distributions still matter with containers?</a><br><a href=\"https://www.thoughtworks.com/zh-cn/radar/techniques/distroless-docker-images\">Distroless Docker images | Technology Radar | Thoughtworks</a><br><a href=\"https://mp.weixin.qq.com/s/1o4ec6m4LANHt1wgPrwZDA\">可以像 Docker 一样方便的使用 Containerd 吗？</a></p>\n","text":"容器镜像构建与分发的技术实践与安全思索BackendDocker 能引爆容器，主要原因是它带来了镜像和镜像分发技术。 容器运行时是 Kubernetes 平台的基础组件，镜像则是容器的静态文件，容器由镜像创建。在 Kubernetes 平台中，我们交付的所有应用，最终都是以镜像形...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"Cloud-Native-Security","slug":"Cloud-Native-Security","count":12,"path":"api/categories/Cloud-Native-Security.json"}],"tags":[{"name":"容器镜像安全","slug":"容器镜像安全","count":2,"path":"api/tags/容器镜像安全.json"},{"name":"Distroless","slug":"Distroless","count":1,"path":"api/tags/Distroless.json"},{"name":"buidlkit","slug":"buidlkit","count":1,"path":"api/tags/buidlkit.json"},{"name":"CNB","slug":"CNB","count":1,"path":"api/tags/CNB.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E4%B8%8E%E5%88%86%E5%8F%91%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%AE%89%E5%85%A8%E6%80%9D%E7%B4%A2\"><span class=\"toc-text\">容器镜像构建与分发的技术实践与安全思索</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Backend\"><span class=\"toc-text\">Backend</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%95%9C%E5%83%8F%E7%9A%84%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">镜像的来源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%85%8D%E5%8F%91%E8%A1%8C%E7%89%88%E5%AE%B9%E5%99%A8%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">关于免发行版容器的概念</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Challenge\"><span class=\"toc-text\">Challenge</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%81%E4%B8%9A%E4%B8%AD%E5%93%AA%E4%B8%AA%E9%83%A8%E9%97%A8%E8%B4%9F%E8%B4%A3%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">企业中哪个部门负责构建镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">docker的安全问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">性能问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Theory\"><span class=\"toc-text\">Theory</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%BB%84%E9%87%91%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">反模式之黄金基础镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F-Distroless\"><span class=\"toc-text\">基础镜像-Distroless</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#example\"><span class=\"toc-text\">example</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">关于网络</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">关于调试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tools-%E6%9E%84%E5%BB%BA%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">Tools-构建容器的工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BuildKit\"><span class=\"toc-text\">BuildKit</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cloud-Native-Buildpacks%EF%BC%88CNB%EF%BC%89\"><span class=\"toc-text\">Cloud Native Buildpacks（CNB）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#kaniko\"><span class=\"toc-text\">kaniko</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Bazel\"><span class=\"toc-text\">Bazel</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#img\"><span class=\"toc-text\">img</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jib\"><span class=\"toc-text\">jib</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"容器镜像安全工具-Veinmind-tools","uid":"3675872e04aa6948518b5c79b3c5c1a2","slug":"veinmind-tools","date":"2022-09-13T08:44:00.000Z","updated":"2022-10-27T02:23:49.299Z","comments":true,"path":"api/articles/veinmind-tools.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159415/4k-beautiful-sunrise-reflection-wallpapers-159415-2155234-3113697.png","text":" 工具的道与术：道，是指这个工具内在的哲学，如果你觉得哲学这个词太大了，也可以叫它逻辑。一个工具的优雅之处就体现在「道」上，「道」虽然貌似虚无缥缈，它却是最容易区分同类型工具之间不同之处的东西。术，就是技术层面，这个工具怎么操作，怎么用起来。 veinmind-tools0x01...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Cloud-Native-Security","slug":"Cloud-Native-Security","count":12,"path":"api/categories/Cloud-Native-Security.json"}],"tags":[{"name":"CI/CD","slug":"CI-CD","count":4,"path":"api/tags/CI-CD.json"},{"name":"容器安全","slug":"容器安全","count":3,"path":"api/tags/容器安全.json"},{"name":"镜像安全","slug":"镜像安全","count":3,"path":"api/tags/镜像安全.json"},{"name":"长亭科技","slug":"长亭科技","count":1,"path":"api/tags/长亭科技.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"软件成分分析工具-syft","uid":"5d3847e382c5758f0e662a8985f6d419","slug":"syft","date":"2022-08-31T09:44:00.000Z","updated":"2022-10-26T09:05:01.983Z","comments":true,"path":"api/articles/syft.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29480-2917846.png","text":"syft0x01简介syftGitHub about：CLI tool and library for generating a Software Bill of Materials from container images and filesystems其他信息 项目由anc...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"镜像依赖分析","slug":"镜像依赖分析","count":1,"path":"api/tags/镜像依赖分析.json"},{"name":"docker-SBOM","slug":"docker-SBOM","count":1,"path":"api/tags/docker-SBOM.json"},{"name":"容器镜像安全","slug":"容器镜像安全","count":2,"path":"api/tags/容器镜像安全.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
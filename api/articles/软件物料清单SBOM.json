{"title":"概念梳理-软件供应链清单SBOM","uid":"ff9f99b916729c965fcce33c1ab740e6","slug":"软件物料清单SBOM","date":"2022-06-29T09:33:00.000Z","updated":"2022-10-26T08:03:31.007Z","comments":true,"path":"api/articles/软件物料清单SBOM.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4039-2362656.png","content":"<h2 id=\"概述和背景\"><a href=\"#概述和背景\" class=\"headerlink\" title=\"概述和背景\"></a>概述和背景</h2><p>软件供应链安全始于对关键环节的可见性，企业需要为每个应用程序持续构建详细的 SBOM（Software Bill of Material，软件物料清单），从而全面洞察每个应用软件的组件情况。SBOM 是描述软件包依赖树的一系列<strong>元数据</strong>，包括<code>供应商</code>、<code>版本号</code>和<code>组件名称</code>等多项关键信息，这些信息在分析软件安全漏洞时发挥着重要作用。<br><img src=\"http://img.moses.wang/new/20220629173506.png\"></p>\n<p>上表是一份软件物料清单示例，其中 SPDX 和 SWID 是两种国际通用的 SBOM 字段标准。</p>\n<ul>\n<li>SPDX（The Software Package Data Exchange，软件包数据交换）是 <code>Linux 基金会</code>下的开放性标准，其用于交流软件物料清单信息，包括组件、许可证、版权等信.SPDX 通过为公司和社区共享重要数据提供通用格式来减少冗余工作，从而简化 流程并提高合规性。</li>\n<li>SWID（Software Identification，软件标识）标签旨在为组织提供一种透明的方式来跟踪在他们的托管设备商安装的软件，它于 2012 年由 ISO 提出，并于 2015 年更新为 ISO&#x2F;IEC 19770-2:2015。SWID 标签文件包含有关软件产品特定版本详尽的描述性信息。除表格中的两种应用最为广泛的 SBOM 字段标准外，还有 CycloneDX、CoSWID、CPE、Grafeas 等其他较为常见的标准，各标准的应用场景存在一定的区别。 </li>\n<li>CycloneDX:专为安全上下文和供应链组件分析而构建。核心团队由OWASP、Sonatype和serviceNow的人领导。</li>\n</ul>\n<p>SBOM 的概念源自制造业，其中物料清单是详细说明产品中包含的所有项目的清单。例如：在汽车行业，制造商会 为每辆车维护一份详细的材料清单。此 BOM 列出了原始设备制造商自己制造的零件和第三方供应商的零件。当发现有缺陷的部件时，汽车制造商可以准确地知道哪些车辆受到影响，并可以通知车主维修或更换。</p>\n<p>同样，构建软件的企业也需要维护准确、最新的 SBOM，其中包括第三方和开源组件的清单，以确保其代码质量高、合规且安全。企业通过要求软件供应商提供 SBOM，以发现潜在的安全和许可证问题，或者应用程序是否使用过 时的库版本。</p>\n<p>当发现此类问题时，管理员可以要求供应商使用较新版本重建应用程序，在等待更新的软件期间，安全人员有机会采取临时缓解措施来保护应用程序免受攻击者利用该漏洞进行攻击，还可以帮助安全人员在漏洞 被披露或核心库发布新版本时 , 对应用程序和代码进行抽查以避免出现安全问题。</p>\n<p>举个例子：如果安全人员手中有一份在其环境中运行的每个应用程序的物料清单，那么早在 2014 年 4 月，当 Heartbleed 漏洞最初被披露时，安全人员就无需测试每个应用程序中是否包含 OpenSSL，而是可以通过检查列表 就立即知道哪些应用程序依赖于易受攻击的版本和需要采取的措施。</p>\n<h2 id=\"SBOM生产流程\"><a href=\"#SBOM生产流程\" class=\"headerlink\" title=\"SBOM生产流程\"></a>SBOM生产流程</h2><p>在成熟的体系下，SBOM 的生产可以通过软件生命周期每个阶段所使用的工具和任务流程化地完成，这些工具和 任务包括知识产权审计、采购管理、许可证管理、代码扫描、版本控制系统、编译器、构建工具、CI&#x2F;CD 工具、包管理器和版本库管理工具等<br><img src=\"http://img.moses.wang/new/20220629173616.png\"><br>SBOM 中应该包含软件组件与此组件所依赖的任何其他基础软件组件之间的关系。软件产品在发布任何版本时， SBOM 都应作为产品文档的一部分被提供，在 CI&#x2F;CD 的标准实践中，SBOM 中包含的信息将不断更新。它从在需求中集成安全性需求开始，或者是 SBOM 中的一些元素已经在需求阶段被添加到用例中，这样安全性和 SBOM 就可以成为 DevOps 过程的标准和结构化的一部分。 </p>\n<p>为了确保持续一致性，应在测试工作中将 SBOM 作为测试用例的一部分，同时 SBOM 信息应随着使用工具和组 件的更新而更新，使 SBOM 信息自动更新成为 CI&#x2F;CD 管道中每个构建周期标准的一部分。在发布运营阶段使用 SBOM 可以在使用的库或组件存在漏洞时，以更快的时间检测出有哪些应用程序中存在这些漏洞，并及时进行修复工作。</p>\n<h2 id=\"SBOM可提高软件供应链的透明度\"><a href=\"#SBOM可提高软件供应链的透明度\" class=\"headerlink\" title=\"SBOM可提高软件供应链的透明度\"></a>SBOM可提高软件供应链的透明度</h2><p>尽管 SBOM 对许多人来说依然很陌生，但其需求却不断呈现增长态势。Gartner 在其 2020 年的“应用程序安全测 试魔力象限”中预测到：“到 2024 年，至少一半的企业软件买家要求软件供应商必须提供详细的、定期更新的软 件物料清单，同时 60% 的企业将为他们创建的所有应用程序和服务自动构建软件材料清单，而这两组数据在 2019 年都还不到 5%。” </p>\n<p>现代软件是使用第三方组件组装而成的，它们以复杂而独特的方式粘合在一起，并与原始代码集成以实现企业所 需要的功能。在现代多层供应链中，单个软件可能有成百上千的供应商，从原材料来源到最终组装系统的全套供 应商中找出某一组件的来源需要花费大量的时间和精力。因此，为所有组件构建详细准确的 SBOM，帮助企业跟 踪当前运行的程序、源代码、构建依赖项、子组件等所依赖组件的使用情况，检测软件组件是否带有已知的安全漏洞或功能漏洞。<br><img src=\"http://img.moses.wang/new/20220629173727.png\"><br>SBOM 有助于揭示整个软件供应链中的漏洞与弱点，提高软件供应链的透明度，减轻软件供应链攻击的威胁。通过 使用 SBOM 可以帮助企业进行漏洞管理、应急响应、资产管理、许可证和授权管理、知识产权管理、合规性管理、 基线建立和配置管理等</p>\n<p>通过自动化创建 SBOM 可以在漏洞披露时及时地进行响应排查以及快速的安全修复，最小化软件供应链的安全风 险；在开源组件和版本快速迭代的情况下，从风险管理的角度跟踪和持续监测闭源组件和开源组件的安全态势； </p>\n<p>同时 SBOM 列举了管理开源组件的许可证，可以保护企业免受不当使用相关的法律或知识产权的风险，保护应用 程序在软件供应链中的合规性，避免将已知缺陷传递到软件供应链的下游。</p>\n<h2 id=\"SBOM为漏洞风险治理节省大量时间\"><a href=\"#SBOM为漏洞风险治理节省大量时间\" class=\"headerlink\" title=\"SBOM为漏洞风险治理节省大量时间\"></a>SBOM为漏洞风险治理节省大量时间</h2><p>SBOM 的使用可以为软件供应链的漏洞治理节省大量时间。及时性对于企业在漏洞修复时是非常重要的。以往，企业在修复已部署系统的漏洞缺陷时往往需要几个月甚至是数年的时间，其重要原因之一是企业无法在漏洞出现 的第一时间知晓该信息。</p>\n<p>软件供应链下游的企业需要等待上游软件供应商完成软件补丁，才可以进行漏洞修复， 在等待的时间内，下游企业往往会面临无法预知的安全风险。而构建详细准确的 SBOM 则可以避免这一现象的发生， 允许所有利益相关者在漏洞发现时立即开始评估漏洞，并开始制定相关的补救措施。以下通过一张对比图来说明 SBOM 对漏洞风险治理时间的影响。<br><img src=\"http://img.moses.wang/new/20220629173901.png\"><br>受感染的开源组件在软件中未被修复的每一分钟都会增加潜在被利用的风险，SBOM 有助于企业在漏洞披露的早期 对漏洞进行识别，通过 SBOM 提供受感染开源组件和依赖项的准确位置，采取适当的步骤进行修改，为企业在风 险分析、漏洞管理和补救过程中节省数百小时至数月的时间。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li>📒<a href=\"https://zhuanlan.zhihu.com/p/404951634\">浅谈软件供应链安全治理与应用实践（内附报告下载地址） - 知乎</a></li>\n<li><a href=\"https://slscan.io/en/latest/\">Scan docs</a></li>\n<li>🔧<a href=\"https://github.com/CycloneDX/cyclonedx-cli\">GitHub - CycloneDX&#x2F;cyclonedx-cli: CycloneDX CLI tool for SBOM analysis, merging, diffs and format conversions.</a></li>\n<li>🔧<a href=\"https://cyclonedx.org/about/guiding-principles\">Guiding Principles</a></li>\n<li>🔧<a href=\"https://www.synopsys.com/software-integrity/code-dx.html\">Code Dx Application Vulnerability Correlation | Synopsys</a></li>\n<li>🔧<a href=\"https://github.com/grafeas/grafeas\">GitHub - grafeas&#x2F;grafeas: Artifact Metadata API</a></li>\n<li>🔧<a href=\"https://github.com/grafeas/kritis\">GitHub - grafeas&#x2F;kritis: Deploy-time Policy Enforcer for Kubernetes applications</a></li>\n<li>📒<a href=\"https://zhuanlan.zhihu.com/p/490906629\">开源安全危机的特效药：SBOM - 知乎</a></li>\n<li>📒<a href=\"https://zhuanlan.zhihu.com/p/537274094\">OpenSSF安全计划：SBOM将驱动软件供应链安全 - 知乎</a></li>\n</ul>\n","text":"概述和背景软件供应链安全始于对关键环节的可见性，企业需要为每个应用程序持续构建详细的 SBOM（Software Bill of Material，软件物料清单），从而全面洞察每个应用软件的组件情况。SBOM 是描述软件包依赖树的一系列元数据，包括供应商、版本号和组件名称等多项关...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"SBOM","slug":"SBOM","count":5,"path":"api/tags/SBOM.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0%E5%92%8C%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">概述和背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SBOM%E7%94%9F%E4%BA%A7%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">SBOM生产流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SBOM%E5%8F%AF%E6%8F%90%E9%AB%98%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE%E7%9A%84%E9%80%8F%E6%98%8E%E5%BA%A6\"><span class=\"toc-text\">SBOM可提高软件供应链的透明度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SBOM%E4%B8%BA%E6%BC%8F%E6%B4%9E%E9%A3%8E%E9%99%A9%E6%B2%BB%E7%90%86%E8%8A%82%E7%9C%81%E5%A4%A7%E9%87%8F%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">SBOM为漏洞风险治理节省大量时间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"云原生恶意软件扫描","uid":"de32a1a96e94010ffce347f9070bfa2b","slug":"云原生恶意软件扫描","date":"2022-07-08T03:50:32.192Z","updated":"2022-10-27T02:12:38.512Z","comments":true,"path":"api/articles/云原生恶意软件扫描.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/244772/yellow-flower-field-background-244772-1997945-8799134.png","text":"云原生恶意软件扫描0x01简介YaRadare可以对容器镜像、正在运行的docker容器和系统文件中找到恶意软甲威胁的事件。使用 YARA ruleset识别资源匹配恶意软件签名。 0x02架构图略 0x03核心能力 At rest: scan local container i...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Cloud-Native-Security","slug":"Cloud-Native-Security","count":12,"path":"api/categories/Cloud-Native-Security.json"}],"tags":[{"name":"恶意文件软件扫描","slug":"恶意文件软件扫描","count":1,"path":"api/tags/恶意文件软件扫描.json"},{"name":"DevSecOps","slug":"DevSecOps","count":3,"path":"api/tags/DevSecOps.json"},{"name":"yara-scanner","slug":"yara-scanner","count":1,"path":"api/tags/yara-scanner.json"},{"name":"threat-hunting","slug":"threat-hunting","count":1,"path":"api/tags/threat-hunting.json"},{"name":"ioc","slug":"ioc","count":1,"path":"api/tags/ioc.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"供应链安全可信系统技术框架","uid":"89d77735267b5346cef8f56cdc08f0d1","slug":"供应链安全可信系统技术框架","date":"2022-06-29T08:43:00.000Z","updated":"2022-10-26T08:00:03.709Z","comments":true,"path":"api/articles/供应链安全可信系统技术框架.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4025-5037682.png","text":"供应链安全可信系统技术框架概述和背景NIST发布了《网络安全软件供应链安全管理实践》（Cybersecurity Supply Chain Risk Management Practices for Systems and Organizations ）[[NIST网络安全软件供...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"技术框架","slug":"技术框架","count":1,"path":"api/tags/技术框架.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
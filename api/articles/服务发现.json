{"title":"微服务学习-服务发现","uid":"d1f13540bd8121bde49915d55687c3f7","slug":"服务发现","date":"2021-09-26T04:23:21.000Z","updated":"2022-10-27T05:40:15.602Z","comments":true,"path":"api/articles/服务发现.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-910618-6855685.png","content":"<h1 id=\"一、什么是服务发现？\"><a href=\"#一、什么是服务发现？\" class=\"headerlink\" title=\"一、什么是服务发现？\"></a>一、什么是服务发现？</h1><p>让用户不用关心服务提供者的具体网络位置（IP、端口等）和配置步骤，只需要选择和链接即可使用这些服务。<br><code>如局域网内 通过WS-Discovery或者Bonjor协议发现并连接网络打印机服务，亦或是华为鸿蒙超级终端通过蓝牙、WIFI等通信技术[软总线技术] ，可以实现发现并使用其他设备</code></p>\n<h1 id=\"二、为什么是服务发现？\"><a href=\"#二、为什么是服务发现？\" class=\"headerlink\" title=\"二、为什么是服务发现？\"></a>二、为什么是服务发现？</h1><p>随着应用架构从单体式应用-SOA-微服务的演进，应用的拆分、服务间解耦和服务<strong>动态扩展</strong>带来的服务迁移、服务治理等需求促使服务发现机制的产生。</p>\n<h1 id=\"三、微服务中的服务发现\"><a href=\"#三、微服务中的服务发现\" class=\"headerlink\" title=\"三、微服务中的服务发现\"></a>三、微服务中的服务发现</h1><p>客户端发现：  </p>\n<ul>\n<li>1.服务提供者的实例在启动时或者位置信息发生变化时会向服务注册表注册自身，在停止时会向服务注册表注销自身，如果服务提供者的实例发生故障，在一段时间内不发送心跳之后，也会被服务注册表注销。     </li>\n<li>2.服务消费者的实例会向服务注册表查询服务提供者的位置信息，然后通过这些位置信息直接向服务提供者发起请求。</li>\n</ul>\n<p>服务端发现：    </p>\n<ul>\n<li>第一步与客户端发现相同。  </li>\n<li>服务消费者不直接向服务注册表查询，也不直接向服务提供者发起请求，而是将对服务提供者的请求发往一个中央路由器或者负载均衡器，中央路由器或者负载均衡器查询服务注册表获取服务提供者的位置信息，并将请求转发给服务提供者。</li>\n</ul>\n<p><img src=\"https://jimmysong.io/kubernetes-handbook/images/service-discovery-in-microservices.png\" alt=\"架构图\"></p>\n<p>这两种架构都各有利弊，以客户端服务发现软件<code>Eureka</code>和服务端服务发现架构<code>Kubernetes/SkyDNS+Ingress LB+Traefik+PowerDNS</code>为例说明。   </p>\n<table>\n<thead>\n<tr>\n<th>服务发现方案</th>\n<th>Pros</th>\n<th>Cons</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Eureka</td>\n<td>使用简单，适用于java语言开发的项目，比服务端服务发现少一次网络跳转</td>\n<td>对非Java语言的支持不够好，Consumer需要内置特定的服务发现客户端和发现逻辑</td>\n</tr>\n<tr>\n<td>Kubernetes</td>\n<td>Consumer无需关注服务发现具体细节，只需知道服务的DNS域名即可，支持异构语言开发</td>\n<td>需要基础设施支撑，多了一次网络跳转，可能有性能损失</td>\n</tr>\n</tbody></table>\n<h2 id=\"Eurka\"><a href=\"#Eurka\" class=\"headerlink\" title=\"Eurka\"></a>Eurka</h2><p>Eureka 和 Spring Boot、Spring Cloud 都整合的非常好，所以使用起来非常简单，只需在 pom 中加入对 Spring Cloud Eureka Server 的依赖并在代码中加入 @EnableEurekaServer，即可创建一个 Eureka Server，在服务提供者和消费者这边，只需在 pom 中加入对 Spring Cloud Eureka 的依赖并在代码中加入 @EnableDiscoveryClient，代码运行时即可自动将自身注册到 Eureka Server 中，然后使用 getInstances 方法即可查询服务实例的位置信息，这个时候还可以使用客户端负载均衡方案 Netflix Ribbon 对这些实例做负载均衡。    </p>\n<p><strong>Ribbon提供一组丰富的功能集：</strong><br>多种内建的负载均衡规则：   </p>\n<ul>\n<li>Round-robin 轮询负载均衡    </li>\n<li>平均加权响应时间负载均衡  </li>\n<li>随机负载均衡    </li>\n<li>可用性过滤负载均衡（避免跳闸线路和高并发链接数）<br>*自定义负载均衡插件系统<br>*与服务发现解决方案的可拔插集成（包括Eureka）<br>*云原生智能，例如可用区亲和性和不健康区规避<br>*内建的故障恢复能力</li>\n</ul>\n<h2 id=\"consul\"><a href=\"#consul\" class=\"headerlink\" title=\"consul\"></a>consul</h2><p>略</p>\n<h2 id=\"zookeeper\"><a href=\"#zookeeper\" class=\"headerlink\" title=\"zookeeper\"></a>zookeeper</h2><p>见zookeeper</p>\n","text":"一、什么是服务发现？让用户不用关心服务提供者的具体网络位置（IP、端口等）和配置步骤，只需要选择和链接即可使用这些服务。如局域网内 通过WS-Discovery或者Bonjor协议发现并连接网络打印机服务，亦或是华为鸿蒙超级终端通过蓝牙、WIFI等通信技术[软总线技术] ，可以实...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"分布式","slug":"分布式","count":6,"path":"api/categories/分布式.json"},{"name":"微服务","slug":"分布式/微服务","count":3,"path":"api/categories/分布式/微服务.json"}],"tags":[{"name":"服务发现 - 微服务","slug":"服务发现-微服务","count":1,"path":"api/tags/服务发现-微服务.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%9F\"><span class=\"toc-text\">一、什么是服务发现？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%9F\"><span class=\"toc-text\">二、为什么是服务发现？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0\"><span class=\"toc-text\">三、微服务中的服务发现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Eurka\"><span class=\"toc-text\">Eurka</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#consul\"><span class=\"toc-text\">consul</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#zookeeper\"><span class=\"toc-text\">zookeeper</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"软件供应链安全分析工具-snyk","uid":"7635de4b7a3e17088e6fc5a823d4941c","slug":"使用snyk检查开源软件依赖中的漏洞.md","date":"2021-12-31T08:35:00.000Z","updated":"2022-10-26T08:22:52.067Z","comments":true,"path":"api/articles/使用snyk检查开源软件依赖中的漏洞.md.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4211-7091776.png","text":"使用snyk检查开源软件依赖中的漏洞.md0x01简介Snyk 是一家美国的安全公司，致力于监控开源软件包中的漏洞。Snyk 以其庞大的漏洞资料库为基础（由以色列和伦敦的资安研究专家团队负责维护该资料库），持续的监控开源社区中各种软件包的安全情况，以及给出解决方案。 随著 Sny...","link":"","photos":[],"count_time":{"symbolsCount":762,"symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件供应链安全分析工具","slug":"软件供应链安全分析工具","count":1,"path":"api/tags/软件供应链安全分析工具.json"},{"name":"snyk","slug":"snyk","count":1,"path":"api/tags/snyk.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"通过自建DevSecOps环境学习","uid":"b970fe5bee1957a85fe7360386c990fe","slug":"通过自建DevSecOps环境学习","date":"2021-08-20T06:20:21.000Z","updated":"2022-10-27T02:40:56.148Z","comments":true,"path":"api/articles/通过自建DevSecOps环境学习.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-909591-7848524.png","text":"前导知识 版本控制系统：Git Jenkins 持续集成与持续交付：CI&#x2F;CD 制品仓库管理：Artifactory、Nexus IaC，基础设施管理配置管理工具 公有云私有云相关技术组件 DevSecOps平台搭建DevSecOps-StudioDevSecOps-S...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"DevSecOps","slug":"DevSecOps","count":3,"path":"api/categories/DevSecOps.json"}],"tags":[{"name":"CI/CD","slug":"CI-CD","count":4,"path":"api/tags/CI-CD.json"},{"name":"Jenkins","slug":"Jenkins","count":2,"path":"api/tags/Jenkins.json"},{"name":"DevSecOps","slug":"DevSecOps","count":3,"path":"api/tags/DevSecOps.json"},{"name":"实验环境","slug":"实验环境","count":1,"path":"api/tags/实验环境.json"},{"name":"Vagrant","slug":"Vagrant","count":1,"path":"api/tags/Vagrant.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"服务限流熔断组件选型","uid":"79f5d6330829493d02164e331a2eb0fa","slug":"服务限流熔断组件选型","date":"2022-08-22T07:56:20.000Z","updated":"2022-10-27T02:59:25.150Z","comments":true,"path":"api/articles/服务限流熔断组件选型.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-910171-4749885.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>架构选的好，下班走的早👌🏻</p></blockquote>\n<h1 id=\"服务限流熔断组件选型\"><a href=\"#服务限流熔断组件选型\" class=\"headerlink\" title=\"服务限流熔断组件选型\"></a>服务限流熔断组件选型</h1><h2 id=\"0x01简介\"><a href=\"#0x01简介\" class=\"headerlink\" title=\"0x01简介\"></a>0x01简介</h2><h3 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a>Sentinel</h3><p>Sentinel 是一款面向<strong>分布式服务架构</strong>的轻量级流量控制组件，主要以流量为切入点，从<code>流量控制</code>、<code>熔断降级</code>、<code>系统自适应保护</code>等多个维度来保障服务的稳定性，核心思想是：<strong>根据对应资源配置的规则来为资源执行相应的流控&#x2F;降级&#x2F;系统保护策略</strong></p>\n<h2 id=\"0x02架构图\"><a href=\"#0x02架构图\" class=\"headerlink\" title=\"0x02架构图\"></a>0x02架构图</h2><p><img src=\"http://img.moses.wang/new/20220822160107.png\"></p>\n<h2 id=\"0x03核心能力\"><a href=\"#0x03核心能力\" class=\"headerlink\" title=\"0x03核心能力\"></a>0x03核心能力</h2><h2 id=\"0x04对比\"><a href=\"#0x04对比\" class=\"headerlink\" title=\"0x04对比\"></a>0x04对比</h2><table>\n<thead>\n<tr>\n<th>类别</th>\n<th>Hystrix(不维护)</th>\n<th>resilience4j</th>\n<th>Sentinel</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>隔离策略</td>\n<td>线程池、信号量隔离</td>\n<td>信号量隔离</td>\n<td>信号量隔离、并发线程数限流</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>异常比率</td>\n<td>异常比率、响应时间</td>\n<td>异常比率、异常数、响应时间</td>\n</tr>\n<tr>\n<td>单机限流</td>\n<td>有限的支持</td>\n<td>Rate Limiter</td>\n<td>基于QPS，支持基于调用关系的限流</td>\n</tr>\n<tr>\n<td>集群限流</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>不支持</td>\n<td>简单的Rate Limiter模式</td>\n<td>支持预热模式、匀速摸排对模式</td>\n</tr>\n<tr>\n<td>系统自适应保护</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>热点防护</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>规则配置</td>\n<td>支持多种数据源</td>\n<td>有限的形式</td>\n<td>支持多种数据源</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>插件的形式</td>\n<td>接口的形式</td>\n<td>多个扩展点</td>\n</tr>\n<tr>\n<td>实时统计的实现</td>\n<td>滑动窗口（基于RxJava)</td>\n<td>Ring Bit Buffer</td>\n<td>滑动窗口（LeapArry）</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>简单的监控查看</td>\n<td>不提供控制台，可对接其他监控系统</td>\n<td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td>\n</tr>\n</tbody></table>\n<h2 id=\"0x05Quickstart\"><a href=\"#0x05Quickstart\" class=\"headerlink\" title=\"0x05Quickstart\"></a>0x05Quickstart</h2><p><a href=\"https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0\">控制台 · alibaba&#x2F;Sentinel Wiki · GitHub</a></p>\n<h2 id=\"0x06使用说明\"><a href=\"#0x06使用说明\" class=\"headerlink\" title=\"0x06使用说明\"></a>0x06使用说明</h2><h3 id=\"1、资源与规则：\"><a href=\"#1、资源与规则：\" class=\"headerlink\" title=\"1、资源与规则：\"></a>1、资源与规则：</h3><p><code>Sentinel</code> 可以简单分为 <code>Sentinel</code> 核心库和 <code>Dashboard</code>，核心库不依赖 <code>Dashboard</code>，但是结合 <code>Dashboard</code> 可以获得更好的效果。使用 <code>Sentinel</code> 来进行资源保护，主要分为几个步骤:</p>\n<p><strong>（1）定义资源：</strong> 资源可以是程序中的任何内容，例如一个服务，服务里的方法，甚至是一段代码。</p>\n<p><strong>（2）定义规则：</strong> Sentinel 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p>\n<p><strong>（3）检验规则是否生效</strong></p>\n<p>由于 Sentinel 中所有的规则都可以在动态地查询和修改，并且修改后立即生效，并且 Sentinel 中资源定义和规则的配置是分离的。因此在编码时，我们先把需要保护的资源定义好（埋点），之后便可以在需要的时候动态配置规则了。也可以理解为，只要有了资源，我们就能在任何时候灵活地定义各种规则。</p>\n<h4 id=\"1-1、定义资源：\"><a href=\"#1-1、定义资源：\" class=\"headerlink\" title=\"1.1、定义资源：\"></a>1.1、定义资源：</h4><p>对于资源的定义有两种，一种是硬编码的方式，一种是通过 <code>@SentinelResource</code> 注解的方式。</p>\n<p><strong>（1）硬编码方式(不推荐)：</strong><br><strong>（2）@SentinelResource注解方式(推荐)：</strong></p>\n<h4 id=\"1-2、定义规则：\"><a href=\"#1-2、定义规则：\" class=\"headerlink\" title=\"1.2、定义规则：\"></a>1.2、定义规则：</h4><p>Sentinel 支持以下几种规则：流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p>\n<h3 id=\"2、流控规则：\"><a href=\"#2、流控规则：\" class=\"headerlink\" title=\"2、流控规则：\"></a>2、流控规则：</h3><h4 id=\"2-1、流控规则的核心属性：\"><a href=\"#2-1、流控规则的核心属性：\" class=\"headerlink\" title=\"2.1、流控规则的核心属性：\"></a>2.1、流控规则的核心属性：</h4><p>流量控制，原理是监控应用流量的 QPS 或 并发线程数 等指标，当达到指定阈值时对流量进行控制，避免系统被瞬时的流量高峰冲垮，保障应用高可用性。同一个资源可以创建多条限流规则，一条限流规则由以下属性组成：</p>\n<p><strong>① resource：</strong> 资源名，即限流规则的作用对象，默认请求路径。</p>\n<p><strong>② limitApp：</strong> 流控针对的调用来源，若为 default 则不区分调用来源，默认值default</p>\n<p><strong>③ count：</strong> 限流阈值</p>\n<p><strong>④ grade：</strong> 限流阈值类型（1代表 QPS，0 代表并发线程数），默认值QPS</p>\n<p><strong>⑤ strategy：</strong> 流控模式</p>\n<ul>\n<li><p><strong>直接拒绝（默认）：</strong> 接口达到限流条件时，直接限流</p>\n</li>\n<li><p><strong>关联：</strong> 当关联的资源达到阈值时，就限流自己（适合做应用让步）</p>\n</li>\n<li><p><strong>链路：</strong> 只记录指定链路上的流量，指定资源从入口资源进来的流量，如果达到阈值，就可以限流</p>\n</li>\n</ul>\n<p><strong>⑥ controlBehavior：</strong> 流控效果</p>\n<ul>\n<li><p><strong>快速失败（默认）：</strong> 当 QPS 超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<code>FlowException</code></p>\n</li>\n<li><p><strong>排队等待：</strong> 这种方式严格控制了请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p>\n</li>\n<li><p><strong>Warm Up：</strong> 该方式主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况。预热底层是根据令牌桶算法实现的。</p>\n</li>\n</ul>\n<h4 id=\"2-2、阈值类型：\"><a href=\"#2-2、阈值类型：\" class=\"headerlink\" title=\"2.2、阈值类型：\"></a>2.2、阈值类型：</h4><p><strong>（1）基于 QPS 的流控：</strong></p>\n<p>QPS，每秒请求数，即在不断向服务器发送请求的情况下，服务器每秒能够处理的请求数量。</p>\n<p><strong>（2）基于并发线程数的流控：</strong></p>\n<p>并发数控制用于保护业务线程池不被慢调用耗尽。例如，当应用所依赖的下游应用由于某种原因导致服务不稳定、响应延迟增加，对于调用者来说，意味着吞吐量下降和更多的线程数占用，极端情况下甚至导致线程池耗尽。为应对太多线程占用的情况，业内有使用隔离的方案，比如：</p>\n<ul>\n<li><p>通过不同业务逻辑使用不同线程池来隔离业务自身之间的资源争抢（线程池隔离），这种隔离方案虽然隔离性比较好，但是代价就是线程数目太多，线程上下文切换的 overhead 比较大，特别是对低延时的调用有比较大的影响。</p>\n</li>\n<li><p>使用信号量来控制同时请求的个数（信号量隔离），这种隔离方案虽然能够控制线程数量，但无法控制请求排队时间，当请求过多时排队也是无益的，直接拒绝能够迅速降低系统压力。</p>\n</li>\n</ul>\n<p><code>Sentinel</code> 并发线程数限流不负责创建和管理线程池，而是简单统计当前请求上下文的线程个数（正在执行的调用数目），如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。并发数控制通常在调用端进行配置。</p>\n<h4 id=\"2-3、流控效果：\"><a href=\"#2-3、流控效果：\" class=\"headerlink\" title=\"2.3、流控效果：\"></a>2.3、流控效果：</h4><p>当系统的流量超过设定的阈值时，<code>sentinel</code> 则采取措施进行流量控制，流控效果总共分为三种：<strong>快速失败、Warm Up、排队等待</strong>。对应的 <code>FlowRule</code> 中的 <code>controlBehavior</code>字段。</p>\n<ul>\n<li><p><strong>快速失败（默认）：</strong> 当 QPS 超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<code>FlowException</code></p>\n</li>\n<li><p><strong>排队等待：</strong> 这种方式严格控制了请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p>\n</li>\n<li><p><strong>Warm Up：</strong> 该方式主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况。预热底层是根据令牌桶算法实现的。</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：若使用除了快速失败之外的流量控制效果，则调用关系限流策略（<code>strategy</code>）会被忽略。</p></blockquote>\n<p><strong>（1）快速失败：</strong></p>\n<p>默认的流量控制方式，当 QPS 超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出<code>FlowException</code>。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时</p>\n<p><strong>（2）Warm Up：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：该方式只针对 QPS 流控，对并发线程数流控不支持</p></blockquote>\n<p>即预热&#x2F;冷启动方式，该方式主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况。</p>\n<p>预热底层是根据令牌桶算法实现的，源码对应得类在 <code>com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController</code> 中，算法中有一个冷却因子<code>coldFactor</code>，默认值是3，即请求 QPS 从 <code>threshold(阈值) / 3</code> 开始，经预热时长逐渐升至设定的 QPS 阈值。</p>\n<p>比如通过 <code>sentinel-dashboard</code> 设定 <code>testWarmUP</code> 资源的 QPS 阈值为，流控效果为 <code>warm up</code>，预热时长为5秒，如下图所示，<code>testWarmUP</code> 资源刚开始限流的阈值为 <code>20/3=7</code>，但经过10秒的预热后，慢慢将阈值升至20。<br><strong>（3）排队等待：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：这一效果只针对QPS流控，并发线程数流控不支持。</p></blockquote>\n<p>排队等待的方式会以匀速排队方式严格控制请求通过的间隔时间，也就是让请求以均匀的速度通过，其余的排队等待，它还会让设置一个超时时间，当请求超过超时间时间还未处理，则会被丢弃。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://mp.weixin.qq.com/s/7p6y4PSy0liv1q8Y4hLPDw\">https://mp.weixin.qq.com/s/7p6y4PSy0liv1q8Y4hLPDw</a></p>\n","text":" 架构选的好，下班走的早👌🏻 服务限流熔断组件选型0x01简介SentinelSentinel 是一款面向分布式服务架构的轻量级流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来保障服务的稳定性，核心思想是：根据对应资源配置的规则来为资源执行相应的流...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"分布式","slug":"分布式","count":6,"path":"api/categories/分布式.json"},{"name":"微服务","slug":"分布式/微服务","count":3,"path":"api/categories/分布式/微服务.json"}],"tags":[{"name":"服务限流","slug":"服务限流","count":2,"path":"api/tags/服务限流.json"},{"name":"Sentinel","slug":"Sentinel","count":1,"path":"api/tags/Sentinel.json"},{"name":"Hystrix","slug":"Hystrix","count":1,"path":"api/tags/Hystrix.json"},{"name":"技术选型","slug":"技术选型","count":1,"path":"api/tags/技术选型.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E7%86%94%E6%96%AD%E7%BB%84%E4%BB%B6%E9%80%89%E5%9E%8B\"><span class=\"toc-text\">服务限流熔断组件选型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x01简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sentinel\"><span class=\"toc-text\">Sentinel</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02%E6%9E%B6%E6%9E%84%E5%9B%BE\"><span class=\"toc-text\">0x02架构图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B\"><span class=\"toc-text\">0x03核心能力</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">0x04对比</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05Quickstart\"><span class=\"toc-text\">0x05Quickstart</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x06%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">0x06使用说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%B5%84%E6%BA%90%E4%B8%8E%E8%A7%84%E5%88%99%EF%BC%9A\"><span class=\"toc-text\">1、资源与规则：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1%E3%80%81%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%EF%BC%9A\"><span class=\"toc-text\">1.1、定义资源：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2%E3%80%81%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99%EF%BC%9A\"><span class=\"toc-text\">1.2、定义规则：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99%EF%BC%9A\"><span class=\"toc-text\">2、流控规则：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1%E3%80%81%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99%E7%9A%84%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7%EF%BC%9A\"><span class=\"toc-text\">2.1、流控规则的核心属性：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2%E3%80%81%E9%98%88%E5%80%BC%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">2.2、阈值类型：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3%E3%80%81%E6%B5%81%E6%8E%A7%E6%95%88%E6%9E%9C%EF%BC%9A\"><span class=\"toc-text\">2.3、流控效果：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"软件供应链安全分析工具-ORT","uid":"f5c84e15a346599d9534a7755e6c3e3f","slug":"工具-用于审查开源软件ort","date":"2022-08-23T05:42:00.000Z","updated":"2022-10-26T09:11:26.638Z","comments":true,"path":"api/articles/工具-用于审查开源软件ort.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29503-4893451.png","text":"工具-用于审查开源软件ort0x01简介OSS审查工具包（ORT）旨在协助处理在许可证合规性检查中通常需要执行的任务，特别是（但不限于）自由和开源软件依赖项。 👑项目地址GitHub - oss-review-toolkit&#x2F;ort: A suite of tools ...","link":"","photos":[],"count_time":{"symbolsCount":643,"symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件成分分析工具","slug":"软件成分分析工具","count":5,"path":"api/tags/软件成分分析工具.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"ORT","slug":"ORT","count":1,"path":"api/tags/ORT.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"软件物料清单工具介绍","uid":"b8a4b9dfcb608a8cfda6fb4feb8db13c","slug":"SBOM工具介绍","date":"2022-08-22T02:26:00.000Z","updated":"2022-10-26T08:46:48.497Z","comments":true,"path":"api/articles/SBOM工具介绍.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29454-8398992.png","text":"SBOM工具介绍Backend据Tidelift统计，92%的应用程序包含开源组件。事实上，现代程序平均有70%是开源软件。根据乔·拜登总统于2021年7月12日发布的《关于提高国家网络安全的行政命令》，这是一项要求。该行政命令将SBOM定义为“包含构建软件中使用的各种组件的详细...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SBOM","slug":"SBOM","count":5,"path":"api/tags/SBOM.json"},{"name":"软件物料清单","slug":"软件物料清单","count":1,"path":"api/tags/软件物料清单.json"},{"name":"软件物料清单生成工具","slug":"软件物料清单生成工具","count":1,"path":"api/tags/软件物料清单生成工具.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
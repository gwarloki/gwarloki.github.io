{"title":"容器安全平台-Trivy","uid":"f80e788fa76fb3d65b76873268419752","slug":"容器镜像安全-trivy","date":"2022-01-28T08:06:10.000Z","updated":"2022-10-27T02:15:14.168Z","comments":true,"path":"api/articles/容器镜像安全-trivy.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159422/4k-empty-road-new-wallpapers-159422-9910-8627450.png","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p><code>Trivy</code>是一款简单而全面的扫描仪，用于处理容器映像、文件系统和Git存储库中的漏洞以及配置问题。<code>Trivy</code>检测操作系统包（Alpine、RHEL、CentOS等）和特定语言包（Bundler、Composer、npm、yarn等）的漏洞。此外，<code>Trivy</code>将基础设施扫描为代码（IaC）文件，如Terraform、Dockerfile和Kubernetes，以检测使您的部署面临攻击风险的潜在配置问题。<code>Trivy</code>易于使用.<strong>trivy已经成了harbor v.2.2.1的默认安全扫描插件</strong></p>\n<p>trivy目前分为<a href=\"https://github.com/aquasecurity/trivy\">安装版</a>和<a href=\"https://github.com/aquasecurity/harbor-scanner-trivy\">habor集成版</a></p>\n<p>功能对比<br><img src=\"https://s2.loli.net/2022/01/28/2dHelGxj4Z3T6ts.png\"></p>\n<h1 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h1><h2 id=\"集成版\"><a href=\"#集成版\" class=\"headerlink\" title=\"集成版\"></a>集成版</h2><p>架构<br><img src=\"https://s2.loli.net/2022/01/28/aODiyBxh86Qw5Un.png\"></p>\n<h3 id=\"helm安装\"><a href=\"#helm安装\" class=\"headerlink\" title=\"helm安装\"></a>helm安装</h3><p>Harbor&gt;&#x3D;2.0版本Trivy已默认集成。harbor chart&gt;&#x3D;1.4可以使用官方Helm安装</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">helm repo add harbor https:&#x2F;&#x2F;helm.goharbor.io</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">helm install harbor harbor&#x2F;harbor \\\n  --create-namespace \\\n  --namespace harbor \\\n  --set clair.enabled&#x3D;false \\\n  --set trivy.enabled&#x3D;true</code></pre>\n<p><strong>Harbor 1.10 on Kubernetes</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">helm repo add aqua https:&#x2F;&#x2F;aquasecurity.github.io&#x2F;helm-charts</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">helm install harbor-scanner-trivy aqua&#x2F;harbor-scanner-trivy \\\n  --namespace harbor --create-namespace</code></pre>\n<h3 id=\"RHEL-x2F-CentOS手动部署\"><a href=\"#RHEL-x2F-CentOS手动部署\" class=\"headerlink\" title=\"RHEL&#x2F;CentOS手动部署\"></a>RHEL&#x2F;CentOS手动部署</h3><p>安装docker</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">  cd &#x2F;etc&#x2F;yum.repos.d&#x2F;  \n  wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo  \n  yum makecache  \n  yum install docker-ce  -y  &amp;&amp; systemctl start docker &amp;&amp; systemctl enable docker  \n  \n  \n  vim &#x2F;etc&#x2F;docker&#x2F;daemon.json  \n  \n&#123;  \n&quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;],    \n&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]  \n&#125;  \n  \n systemctl  restart  docker</code></pre>\n<p>安装docker-compose</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.23.2&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose  \n\nchmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</code></pre>\n<p>下载harbor</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">wget  https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v2.2.3&#x2F;harbor-offline-installer-v2.2.3.tgz</code></pre>\n<p>修改 harbor.yml配置文件，生产环境请用https，这里仅用于测试</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tar xf harbor-offline-installer-v2.2.3.tgz   \ncp harbor.yml.tmpl harbor.yml  \n  \n.&#x2F;prepare   \n.&#x2F;install.sh  --with-trivy  --with-chartmuseum</code></pre>\n<p><strong>Vmware Harbor 提供了一个API 接口，这样我们就可以与SOC 集成，查看images 的安全情况。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;projects&#x2F;&#123;project_name&#125;&#x2F;repositories&#x2F;&#123;repository_name&#125;&#x2F;artifacts&#x2F;&#123;reference&#125;&#x2F;additions&#x2F;vulnerabilities    \n  \n  \ncurl -X GET &quot;http:&#x2F;&#x2F;172.16.116.5&#x2F;api&#x2F;v2.0&#x2F;projects&#x2F;library&#x2F;repositories&#x2F;fastjson&#x2F;artifacts&#x2F;1.2.24&#x2F;additions&#x2F;vulnerabilities&quot; -H &quot;accept: application&#x2F;json&quot; -H &quot;X-Request-Id: 111&quot;</code></pre>\n<h2 id=\"安装版\"><a href=\"#安装版\" class=\"headerlink\" title=\"安装版\"></a>安装版</h2><h3 id=\"RHEL-x2F-CentOS\"><a href=\"#RHEL-x2F-CentOS\" class=\"headerlink\" title=\"RHEL&#x2F;CentOS\"></a>RHEL&#x2F;CentOS</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#添加源\n$ sudo vim &#x2F;etc&#x2F;yum.repos.d&#x2F;trivy.repo [trivy] name&#x3D;Trivy repository baseurl&#x3D;https:&#x2F;&#x2F;aquasecurity.github.io&#x2F;trivy-repo&#x2F;rpm&#x2F;releases&#x2F;$releasever&#x2F;$basearch&#x2F; gpgcheck&#x3D;0 enabled&#x3D;1 $ sudo yum -y update $ sudo yum -y install trivy</code></pre>\n<h3 id=\"RPM\"><a href=\"#RPM\" class=\"headerlink\" title=\"RPM\"></a>RPM</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rpm -ivh https:&#x2F;&#x2F;github.com&#x2F;aquasecurity&#x2F;trivy&#x2F;releases&#x2F;download&#x2F;v0.22.0&#x2F;trivy_0.22.0_Linux-64bit.rpm</code></pre>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull aquasec&#x2F;harbor-scanner-trivy:0.25.0</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --rm -v [YOUR_CACHE_DIR]:&#x2F;root&#x2F;.cache&#x2F; aquasec&#x2F;trivy:0.25.0 [YOUR_IMAGE_NAME]</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#部署Redis\n$docker run --name redis -d --rm redis:5\n#部署trivy-adapter\ndocker run --name trivy-adapter -d --rm \\\n  -p 8181:8181 \\\n adapter,core,redis&#39; \\\n  -e &quot;SCANNER_LOG_LEVEL&#x3D;trace&quot; \\\n  -e &quot;SCANNER_TRIVY_DEBUG_MODE&#x3D;true&quot; \\\n  -e &quot;TRIVY_NON_SSL&#x3D;true&quot; \\\n  -e &quot;SCANNER_API_SERVER_ADDR&#x3D;:8181&quot; \\\n  -e &quot;SCANNER_STORE_REDIS_URL&#x3D;redis:&#x2F;&#x2F;redis:6379&quot; \\\n  -e &quot;SCANNER_JOB_QUEUE_REDIS_URL&#x3D;redis:&#x2F;&#x2F;redis:6379&quot; \\\n  --network harbor_harbor \\\n  aquasec&#x2F;harbor-scanner-trivy:0.25.0</code></pre>\n\n\n<p>参数列表：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SCANNER_LOG_LEVEL</td>\n<td>info</td>\n<td>The log level of trace, debug, info, warn, warning, error, fatal or panic. The standard logger logs entries with that level or anything above it.</td>\n</tr>\n<tr>\n<td>SCANNER_API_SERVER_ADDR</td>\n<td>:8080</td>\n<td>Binding address for the API server</td>\n</tr>\n<tr>\n<td>SCANNER_API_SERVER_TLS_CERTIFICATE</td>\n<td>N&#x2F;A</td>\n<td>The absolute path to the x509 certificate file</td>\n</tr>\n<tr>\n<td>SCANNER_API_SERVER_TLS_KEY</td>\n<td>N&#x2F;A</td>\n<td>The absolute path to the x509 private key file</td>\n</tr>\n<tr>\n<td>SCANNER_API_SERVER_CLIENT_CAS</td>\n<td>N&#x2F;A</td>\n<td>A list of absolute paths to x509 root certificate authorities that the api use if required to verify a client certificate</td>\n</tr>\n<tr>\n<td>SCANNER_API_SERVER_READ_TIMEOUT</td>\n<td>15s</td>\n<td>The maximum duration for reading the entire request, including the body</td>\n</tr>\n<tr>\n<td>SCANNER_API_SERVER_WRITE_TIMEOUT</td>\n<td>15s</td>\n<td>The maximum duration before timing out writes of the response</td>\n</tr>\n<tr>\n<td>SCANNER_API_SERVER_IDLE_TIMEOUT</td>\n<td>60s</td>\n<td>The maximum amount of time to wait for the next request when keep-alives are enabled</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_CACHE_DIR</td>\n<td>&#x2F;home&#x2F;scanner&#x2F;.cache&#x2F;trivy</td>\n<td>Trivy cache directory</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_REPORTS_DIR</td>\n<td>&#x2F;home&#x2F;scanner&#x2F;.cache&#x2F;reports</td>\n<td>Trivy reports directory</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_DEBUG_MODE</td>\n<td>false</td>\n<td>The flag to enable or disable Trivy debug mode</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_VULN_TYPE</td>\n<td>os,library</td>\n<td>Comma-separated list of vulnerability types. Possible values are os and library.</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_SEVERITY</td>\n<td>UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL</td>\n<td>Comma-separated list of vulnerabilities severities to be displayed</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_IGNORE_UNFIXED</td>\n<td>false</td>\n<td>The flag to display only fixed vulnerabilities</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_IGNORE_POLICY</td>\n<td></td>\n<td>The path for the Trivy ignore policy OPA Rego file</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_SKIP_UPDATE</td>\n<td>false</td>\n<td>The flag to disable Trivy DB downloads.</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_OFFLINE_SCAN</td>\n<td>false</td>\n<td>The flag to disable external API requests to identify dependencies.</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_GITHUB_TOKEN</td>\n<td>N&#x2F;A</td>\n<td>The GitHub access token to download Trivy DB (see GitHub rate limiting)</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_INSECURE</td>\n<td>false</td>\n<td>The flag to skip verifying registry certificate</td>\n</tr>\n<tr>\n<td>SCANNER_TRIVY_TIMEOUT</td>\n<td>5m0s</td>\n<td>The duration to wait for scan completion</td>\n</tr>\n<tr>\n<td>SCANNER_STORE_REDIS_NAMESPACE</td>\n<td>harbor.scanner.trivy:store</td>\n<td>The namespace for keys in the Redis store</td>\n</tr>\n<tr>\n<td>SCANNER_STORE_REDIS_SCAN_JOB_TTL</td>\n<td>1h</td>\n<td>The time to live for persisting scan jobs and associated scan reports</td>\n</tr>\n<tr>\n<td>SCANNER_JOB_QUEUE_REDIS_NAMESPACE</td>\n<td>harbor.scanner.trivy:job-queue</td>\n<td>The namespace for keys in the scan jobs queue backed by Redis</td>\n</tr>\n<tr>\n<td>SCANNER_JOB_QUEUE_WORKER_CONCURRENCY</td>\n<td>1</td>\n<td>The number of workers to spin-up for the scan jobs queue</td>\n</tr>\n<tr>\n<td>SCANNER_REDIS_URL</td>\n<td>redis:&#x2F;&#x2F;harbor-harbor-redis:6379</td>\n<td>The Redis server URI. The URI supports schemas to connect to a standalone Redis server, i.e. redis:&#x2F;&#x2F;:password@standalone_host:port&#x2F;db-number and Redis Sentinel deployment, i.e. redis+sentinel:&#x2F;&#x2F;:password@sentinel_host1:port1,sentinel_host2:port2&#x2F;monitor-name&#x2F;db-number.</td>\n</tr>\n<tr>\n<td>SCANNER_REDIS_POOL_MAX_ACTIVE</td>\n<td>5</td>\n<td>The max number of connections allocated by the Redis connection pool</td>\n</tr>\n<tr>\n<td>SCANNER_REDIS_POOL_MAX_IDLE</td>\n<td>5</td>\n<td>The max number of idle connections in the Redis connection pool</td>\n</tr>\n<tr>\n<td>SCANNER_REDIS_POOL_IDLE_TIMEOUT</td>\n<td>5m</td>\n<td>The duration after which idle connections to the Redis server are closed. If the value is zero, then idle connections are not closed.</td>\n</tr>\n<tr>\n<td>SCANNER_REDIS_POOL_CONNECTION_TIMEOUT</td>\n<td>1s</td>\n<td>The timeout for connecting to the Redis server</td>\n</tr>\n<tr>\n<td>SCANNER_REDIS_POOL_READ_TIMEOUT</td>\n<td>1s</td>\n<td>The timeout for reading a single Redis command reply</td>\n</tr>\n<tr>\n<td>SCANNER_REDIS_POOL_WRITE_TIMEOUT</td>\n<td>1s</td>\n<td>The timeout for writing a single Redis command.</td>\n</tr>\n<tr>\n<td>HTTP_PROXY</td>\n<td>N&#x2F;A</td>\n<td>The URL of the HTTP proxy server</td>\n</tr>\n<tr>\n<td>HTTPS_PROXY</td>\n<td>N&#x2F;A</td>\n<td>The URL of the HTTPS proxy server</td>\n</tr>\n<tr>\n<td>NO_PROXY</td>\n<td>N&#x2F;A</td>\n<td>The URLs that the proxy settings do not apply to</td>\n</tr>\n</tbody></table>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://aquasecurity.github.io/trivy/v0.22.0/getting-started/overview/\">https://aquasecurity.github.io/trivy/v0.22.0/getting-started/overview/</a></p>\n","text":"介绍Trivy是一款简单而全面的扫描仪，用于处理容器映像、文件系统和Git存储库中的漏洞以及配置问题。Trivy检测操作系统包（Alpine、RHEL、CentOS等）和特定语言包（Bundler、Composer、npm、yarn等）的漏洞。此外，Trivy将基础设施扫描为代码...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Cloud-Native-Security","slug":"Cloud-Native-Security","count":12,"path":"api/categories/Cloud-Native-Security.json"}],"tags":[{"name":"云原生安全","slug":"云原生安全","count":6,"path":"api/tags/云原生安全.json"},{"name":"容器安全平台","slug":"容器安全平台","count":5,"path":"api/tags/容器安全平台.json"},{"name":"产品选型","slug":"产品选型","count":6,"path":"api/tags/产品选型.json"},{"name":"Trivy","slug":"Trivy","count":1,"path":"api/tags/Trivy.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">安装部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%86%E6%88%90%E7%89%88\"><span class=\"toc-text\">集成版</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#helm%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">helm安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RHEL-x2F-CentOS%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">RHEL&#x2F;CentOS手动部署</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E7%89%88\"><span class=\"toc-text\">安装版</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RHEL-x2F-CentOS\"><span class=\"toc-text\">RHEL&#x2F;CentOS</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RPM\"><span class=\"toc-text\">RPM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker\"><span class=\"toc-text\">docker</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DevSecOps工具链","uid":"1a872c8e58dbc5f12955fd570dcb5da9","slug":"Devsecops工具链","date":"2022-02-08T02:58:04.000Z","updated":"2022-10-27T02:45:24.231Z","comments":true,"path":"api/articles/Devsecops工具链.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-909668-1806574.png","text":"DevSecOps实践Gartner在2019年的一篇文章中给出了一个经过调研和分析的比较全面的实践清单。如图它由一些列关键路径和持续步骤中的措施和机制组成，周而复始第运转。它的关注点主要是在研发过程中的安全漏洞及其引发的各类风险的管控。 忘记了😄 某证券公司DevSecOps落...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"DevSecOps","slug":"DevSecOps","count":3,"path":"api/categories/DevSecOps.json"}],"tags":[{"name":"DevSecOps工具链","slug":"DevSecOps工具链","count":1,"path":"api/tags/DevSecOps工具链.json"},{"name":"CI/CD","slug":"CI-CD","count":4,"path":"api/tags/CI-CD.json"},{"name":"工具链风险","slug":"工具链风险","count":1,"path":"api/tags/工具链风险.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"软件供应链安全分析工具-snyk","uid":"7635de4b7a3e17088e6fc5a823d4941c","slug":"使用snyk检查开源软件依赖中的漏洞.md","date":"2021-12-31T08:35:00.000Z","updated":"2022-10-26T08:22:52.067Z","comments":true,"path":"api/articles/使用snyk检查开源软件依赖中的漏洞.md.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4211-7091776.png","text":"使用snyk检查开源软件依赖中的漏洞.md0x01简介Snyk 是一家美国的安全公司，致力于监控开源软件包中的漏洞。Snyk 以其庞大的漏洞资料库为基础（由以色列和伦敦的资安研究专家团队负责维护该资料库），持续的监控开源社区中各种软件包的安全情况，以及给出解决方案。 随著 Sny...","link":"","photos":[],"count_time":{"symbolsCount":762,"symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件供应链安全分析工具","slug":"软件供应链安全分析工具","count":1,"path":"api/tags/软件供应链安全分析工具.json"},{"name":"snyk","slug":"snyk","count":1,"path":"api/tags/snyk.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
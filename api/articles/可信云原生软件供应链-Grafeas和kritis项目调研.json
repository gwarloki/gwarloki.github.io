{"title":"新技术调研可信云原生软件供应链-Grafeas和Kritis","uid":"82f3f8f0afc02942b9512346798bab47","slug":"可信云原生软件供应链-Grafeas和kritis项目调研","date":"2022-07-12T03:19:54.198Z","updated":"2022-10-26T08:01:49.645Z","comments":true,"path":"api/articles/可信云原生软件供应链-Grafeas和kritis项目调研.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4036-9280805.png","content":"<h1 id=\"可信云原生软件供应链-Grafeas和kritis项目调研\"><a href=\"#可信云原生软件供应链-Grafeas和kritis项目调研\" class=\"headerlink\" title=\"可信云原生软件供应链-Grafeas和kritis项目调研\"></a>可信云原生软件供应链-Grafeas和kritis项目调研</h1><h2 id=\"0x01背景\"><a href=\"#0x01背景\" class=\"headerlink\" title=\"0x01背景\"></a>0x01背景</h2><p>在Google内部运行了大量的容器，每周需要部署超过20亿次容器(2019年5月数据， <a href=\"https://www.infoq.com/presentations/supply-grafeas-kritis/\">Software Supply Chain with Grafeas and Kritis</a> ，我理解是每天需要创建3亿次容器) ，所以Google有巨大的压力需要了解容器内究竟发生了什么，部署了什么代码，哪些代码是自己开发的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>任何一个巨型软件公司都使用了大量的开源、商用以及自研软件，就好比组装iPhone是由全世界不同供应商提供的零部件，你需要完整跟踪整个供应链，以确保质量和安全性。**由于软件开发中多语言的数据规范存在较大的差异，Groovy有自己定义的命名规范、Docker使用Sha256来表示每一层layer、Go语言使用URL定义自己的组件地址<br>你可以将Grafeas+Kritis视为一个巨大的软件指纹库，来验证部署的源代码、软件状态、测试和安全记录。在InfoQ有一篇翻译介绍文章 <a href=\"https://www.infoq.cn/article/2018/05/grafeas-kritis-security\">使用“Grafeas”元数据 API 和“Kritis”部署授权管理软件供应链</a></p></blockquote>\n<p>当你编写了代码，构建了镜像以及容器，并且测试和验证了二进制代码，然后通过QA测试最终部署到生产环境。这个过程由持续集成CI pipelines自动完成。你依然需要检查你的发布包中所包含的第三方依赖，因为你只控制了自己编写的程序代码部分，如果没有第三方依赖的功能、安全检查，你依然无法信任自己发布的软件包是安全可靠的。</p>\n<p>Google开发了Grafeas和Kritis，通过开放的<code>metadata</code>(元数据)标准，定义如何构建元数据和测试元数据，并且作为一个中心化的元数据知识库，包含了你的最终产品所使用的变量以及编译信息。可以通过配置策略控制和查看修改，然后通过<code>Kritis(管理控制器)部署到Kubernetes中</code>，就可以运行集群管理定义，在某些pod加载是检查镜像中的服务漏洞以及镜像来源，如果不符合管理定义策略，就会拒绝加载pod。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Grafeas是中心化元数据存储中心；Kritis是运行在Kubernetes集群中的管理控制器。Kritis是通过Grafeas提供的API来读取元数据信息，然后对容器进行策略检查</p></blockquote>\n<p><img src=\"http://img.moses.wang/new/20220725091150.png\"></p>\n<h2 id=\"0x02Grafras元数据安全审计\"><a href=\"#0x02Grafras元数据安全审计\" class=\"headerlink\" title=\"0x02Grafras元数据安全审计\"></a>0x02Grafras元数据安全审计</h2><p><a href=\"https://github.com/grafeas/grafeas\">GitHub - grafeas&#x2F;grafeas: Artifact Metadata API</a><br>Grafeas 起源于容器的安全性质量控制，但从定义来看它并不局限于容器。它是提供<strong>统一方式来审计，监控软件组件的开源工件元数据 API</strong>。 这里的’Software’可以是 Docker 镜像，也可以是 War，Jar 和 Zip 包，’Supply Chain’ 指的是构建这些发布包所包含的组件。Grafeas是由IBM与谷歌合作推出的。<br>Grafeas提供了两种元数据的api，notes和occurrences：<br>Projects：是notes和occurrences的存储库。  </p>\n<ul>\n<li><strong>Notes：是有关软件构件的某些方面的细节。这可以是对已知软件漏洞的描述，关于如何构建软件的细节(构建版本，它的校验和等等)，以及它部署的历史等等。</strong>  </li>\n<li><strong>Occurrences：是notes的实例，其中详细描述了它们是如何创建的，以及它们是如何创建的。例如，一个已知的软件漏洞的细节，可能会出现描述哪个漏洞扫描器在检测到它时检测到的信息，以及该漏洞是否被处理过。</strong></li>\n</ul>\n<h3 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h3><p>notes描述了元数据的上层描述。举例，你可以在分析了一个Linux软件包之后创建一个有关特定安全漏洞的note。你可以使用这个note来存储有关一个编译进程的编译器信息。note通常由执行这个分析的provider来拥有和创建。可以通过分析以及跨不同项目发生多次来生成notes。</p>\n<p>note的名字必须按照格式 <code>/projects/&lt;project_id&gt;/notes/&lt;notes_id&gt;</code> 。这里note ID是对每个项目唯一，并且尽可能提供信息。例如，漏洞note对名字可以是 <code>CVE-2013-4869</code> 以引用它所描述对CVE。</p>\n<p>通常应该将note和occurrences存储到各自独立对项目，这样可以使用精细控制的访问权限来管理。<br>note只能由note的owner编辑，并且只对具有访问引用occurrences的用户只读。</p>\n<h3 id=\"Occurrences-存在\"><a href=\"#Occurrences-存在\" class=\"headerlink\" title=\"Occurrences(存在)\"></a>Occurrences(存在)</h3><p>occurrence是note的执行实体(实例&#x2F;instantiation)。occurrences描述了给定note的特定对象。例如，有关一个漏洞的note的occurrence将会描述在哪个软件包中发现漏洞，指定补救步骤(remediation steps)。或者，一个有关编译详情的note的occurrence会描述一个编译的生成的容器镜像。</p>\n<h2 id=\"0x03-Kritis\"><a href=\"#0x03-Kritis\" class=\"headerlink\" title=\"0x03 Kritis\"></a>0x03 Kritis</h2><p>Kritis是一个拟议的软件供应链管理框架，它允许<strong>使用存储于Grafeas中的元数据与Kubernetes构建和实施实时部署策略，这可以避免发布存在已知问题的容器镜像</strong>。kritis-validation-hook组件是部署可信容器环节中进行容器镜像签名验证的关键组件。通过在部署前对容器镜像进行签名验证可以确保只部署经过可信授权方进行过签名的容器镜像，降低在环境中运行意外或恶意代码的风险。</p>\n<p>Kritis的使用是验证型<strong>admission webhook</strong>，这是在接收到admission请求以后的HTTP回调，就能够根据定制的admission策略来决定我们是否接受或者拒绝这个请求。<br><a href=\"https://github.com/grafeas/kritis\">GitHub - grafeas&#x2F;kritis: Deploy-time Policy Enforcer for Kubernetes applications</a></p>\n<h2 id=\"0x04架构图\"><a href=\"#0x04架构图\" class=\"headerlink\" title=\"0x04架构图\"></a>0x04架构图</h2><p><img src=\"http://img.moses.wang/new/20220712114012.png\"></p>\n<h2 id=\"0x05总结\"><a href=\"#0x05总结\" class=\"headerlink\" title=\"0x05总结\"></a>0x05总结</h2><p>总的来说Grafeas这个项目还有不少工作要做，但是对于最核心的部分，软件供应链建模以及相对应的API，项目设计得比较妥当，担得上「A Component Metadata API」这个称号。这个感觉类似于Google在CI&#x2F;CD云原生领域的Tekton项目，同样是靠出色的建模脱颖而出。而且有意思的是这两个项目都出自Google，而不是垂直行业里的老大JFrog&#x2F;Jenkins，反而是等Google推出后，JFrog&#x2F;Jenkins不约而同地加入了Google的Grafeas&#x2F;Tekton项目。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://developer.aliyun.com/article/738408\">Kubernetes 时代的安全软件供应链-阿里云开发者社区</a></p>\n","text":"可信云原生软件供应链-Grafeas和kritis项目调研0x01背景在Google内部运行了大量的容器，每周需要部署超过20亿次容器(2019年5月数据， Software Supply Chain with Grafeas and Kritis ，我理解是每天需要创建3亿次容...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"云原生安全","slug":"云原生安全","count":1,"path":"api/tags/云原生安全.json"},{"name":"新技术调研","slug":"新技术调研","count":1,"path":"api/tags/新技术调研.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E4%BF%A1%E4%BA%91%E5%8E%9F%E7%94%9F%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE-Grafeas%E5%92%8Ckritis%E9%A1%B9%E7%9B%AE%E8%B0%83%E7%A0%94\"><span class=\"toc-text\">可信云原生软件供应链-Grafeas和kritis项目调研</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">0x01背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02Grafras%E5%85%83%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">0x02Grafras元数据安全审计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Notes\"><span class=\"toc-text\">Notes</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Occurrences-%E5%AD%98%E5%9C%A8\"><span class=\"toc-text\">Occurrences(存在)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-Kritis\"><span class=\"toc-text\">0x03 Kritis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04%E6%9E%B6%E6%9E%84%E5%9B%BE\"><span class=\"toc-text\">0x04架构图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">0x05总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"开源软件治理-开源软件引入风险及管控举措","uid":"bcfb0bc31886c6fac8f776ffee8c1943","slug":"浅谈敏捷开发模式下银行业金融机构开源软件引入风险及管控举措","date":"2022-07-12T09:46:07.062Z","updated":"2022-10-26T08:02:47.285Z","comments":true,"path":"api/articles/浅谈敏捷开发模式下银行业金融机构开源软件引入风险及管控举措.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4031-3851750.png","text":"☁️简介见链接 🔗链接浅谈敏捷开发模式下银行业金融机构开源软件引入风险及管控举措 – 安全村SPDX License List | Software Package Data Exchange (SPDX) 🤔感悟 🏈行动开源许可证Apache Apache许可证(Apache L...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"开源软件治理","slug":"开源软件治理","count":1,"path":"api/tags/开源软件治理.json"},{"name":"开源软件引入","slug":"开源软件引入","count":1,"path":"api/tags/开源软件引入.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"概念梳理-软件供应链清单SBOM","uid":"ff9f99b916729c965fcce33c1ab740e6","slug":"软件物料清单SBOM","date":"2022-06-29T09:33:00.000Z","updated":"2022-10-26T08:03:31.007Z","comments":true,"path":"api/articles/软件物料清单SBOM.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4039-2362656.png","text":"概述和背景软件供应链安全始于对关键环节的可见性，企业需要为每个应用程序持续构建详细的 SBOM（Software Bill of Material，软件物料清单），从而全面洞察每个应用软件的组件情况。SBOM 是描述软件包依赖树的一系列元数据，包括供应商、版本号和组件名称等多项关...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"SBOM","slug":"SBOM","count":5,"path":"api/tags/SBOM.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
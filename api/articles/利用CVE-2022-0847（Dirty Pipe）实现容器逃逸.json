{"title":"容器安全漏洞分析-利用CVE-2022-0847（Dirty Pipe)实现容器逃逸","uid":"b2ff5f03ec5fcb6c8c71d036621f3f9f","slug":"利用CVE-2022-0847（Dirty Pipe）实现容器逃逸","date":"2022-06-18T08:37:00.000Z","updated":"2022-10-27T02:27:14.458Z","comments":true,"path":"api/articles/利用CVE-2022-0847（Dirty Pipe）实现容器逃逸.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159415/4k-beautiful-sunrise-reflection-wallpapers-159415-2155332-3962102.png","content":"<h1 id=\"利用CVE-2022-0847（Dirty-Pipe）实现容器逃逸\"><a href=\"#利用CVE-2022-0847（Dirty-Pipe）实现容器逃逸\" class=\"headerlink\" title=\"利用CVE-2022-0847（Dirty Pipe）实现容器逃逸\"></a>利用CVE-2022-0847（Dirty Pipe）实现容器逃逸</h1><h2 id=\"0x00-背景简介\"><a href=\"#0x00-背景简介\" class=\"headerlink\" title=\"0x00 背景简介\"></a>0x00 背景简介</h2><p><a href=\"https://github.com/greenhandatsjtu/CVE-2022-0847-Container-Escape\">GitHub - greenhandatsjtu&#x2F;CVE-2022-0847-Container-Escape: CVE-2022-0847 used to achieve container escape 利用CVE-2022-0847 (Dirty Pipe) 实现容器逃逸</a>来源于上海交大网络与系统安全实验室的分享</p>\n<h2 id=\"0x01-漏洞概要\"><a href=\"#0x01-漏洞概要\" class=\"headerlink\" title=\"0x01 漏洞概要\"></a>0x01 漏洞概要</h2><h3 id=\"CVE-2022-0847介绍\"><a href=\"#CVE-2022-0847介绍\" class=\"headerlink\" title=\"CVE-2022-0847介绍\"></a>CVE-2022-0847介绍</h3><ul>\n<li>2022 年 03 月 7 日，安全研究员 Max Kellermann 披露了一个 Linux 内核本地提 权漏洞 CVE-2022-0847，命名为 Dirty Pipe [[Dirty Pipe提权CVE-2022-0847]]</li>\n<li>由于 pipe_buffer 结构体未正确初始化，攻击者可利用此漏洞向只读文件的页缓 存写入数据</li>\n</ul>\n<h3 id=\"CAP-DAC-READ-SEARCH\"><a href=\"#CAP-DAC-READ-SEARCH\" class=\"headerlink\" title=\"CAP_DAC_READ_SEARCH\"></a>CAP_DAC_READ_SEARCH</h3><p>• 用于打开文件的系统调用 openat() 可以拆分为两个系统调用1 name_to_handle_at() 用于得到目标文件的句柄<br>open_by_handle_at() 根据传入的文件句柄打开目标文件，得到文件描述符</p>\n<p>• CAP_DAC_READ_SEARCH 的权限包括绕过读取文件和文件夹的权限检查、执行 open_by_handle_at() 系统调用</p>\n<p>• 若容器被赋予 CAP_DAC_READ_SEARCH，则能绕过容器隔离，遍历宿主机文 件系统并读取任意文件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>文件句柄</strong>在 64 位系统中，文件句柄长度为 8 个字节，其中前 4 个字节为文 件的 inode 号</p></blockquote>\n<ul>\n<li><p>若容器被赋予 CAP_DAC_READ_SEARCH，攻击者可在容器内 部遍历宿主机 inode，找到目标文件 inode 号(占据句柄前 4 字节)</p>\n</li>\n<li><p>随后暴力破解文件句柄后 4 字节，即可找到指向该文件的句柄</p>\n</li>\n<li><p>最后调用 open_by_handle_at() 即可通过该句柄打开目标文件， 得到文件描述符</p>\n</li>\n</ul>\n<h2 id=\"0x02-漏洞利用\"><a href=\"#0x02-漏洞利用\" class=\"headerlink\" title=\"0x02 漏洞利用\"></a>0x02 漏洞利用</h2><p><a href=\"https://github.com/greenhandatsjtu/CVE-2022-0847-Container-Escape\">项目地址</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cp &#x2F;etc&#x2F;password . # back up &#x2F;etc&#x2F;password\ngcc dp.c -o dp\ndocker run --rm -it -v $(pwd):&#x2F;exp --cap-add&#x3D;CAP_DAC_READ_SEARCH ubuntu\n&#x2F;exp&#x2F;dp &#x2F;etc&#x2F;passwd 1 ootz: # overwrite &#x2F;etc&#x2F;password on host from offset 1\n&#x2F;etc&#x2F;dp &#x2F;etc&#x2F;passwd # dump &#x2F;etc&#x2F;passwd on host</code></pre>\n<h2 id=\"0x03-总结\"><a href=\"#0x03-总结\" class=\"headerlink\" title=\"0x03 总结\"></a>0x03 总结</h2><ul>\n<li><p>将 CVE-2022-0847 漏洞与已有 CAP_DAC_READ_SEARCH 逃逸路径结合，容器内部能覆写<code>宿主机上的只读文件</code></p>\n</li>\n<li><p><strong>仅能写入页缓存，若缓存没有写回，则不能实现持久化，缓存失效&#x2F;重启后文件恢复</strong></p>\n</li>\n</ul>\n<h2 id=\"0x04-References\"><a href=\"#0x04-References\" class=\"headerlink\" title=\"0x04 References\"></a>0x04 References</h2><h2 id=\"0x05-关于漏洞的思考\"><a href=\"#0x05-关于漏洞的思考\" class=\"headerlink\" title=\"0x05 关于漏洞的思考\"></a>0x05 关于漏洞的思考</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 待验证</li>\n</ul>\n","text":"利用CVE-2022-0847（Dirty Pipe）实现容器逃逸0x00 背景简介GitHub - greenhandatsjtu&#x2F;CVE-2022-0847-Container-Escape: CVE-2022-0847 used to achieve contai...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Cloud-Native-Security","slug":"Cloud-Native-Security","count":12,"path":"api/categories/Cloud-Native-Security.json"}],"tags":[{"name":"CVE-2022-0847","slug":"CVE-2022-0847","count":1,"path":"api/tags/CVE-2022-0847.json"},{"name":"DirtyPipe","slug":"DirtyPipe","count":1,"path":"api/tags/DirtyPipe.json"},{"name":"容器逃逸","slug":"容器逃逸","count":1,"path":"api/tags/容器逃逸.json"},{"name":"漏洞分析","slug":"漏洞分析","count":1,"path":"api/tags/漏洞分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8CVE-2022-0847%EF%BC%88Dirty-Pipe%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8\"><span class=\"toc-text\">利用CVE-2022-0847（Dirty Pipe）实现容器逃逸</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00-%E8%83%8C%E6%99%AF%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x00 背景简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%A6%81\"><span class=\"toc-text\">0x01 漏洞概要</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CVE-2022-0847%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">CVE-2022-0847介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CAP-DAC-READ-SEARCH\"><span class=\"toc-text\">CAP_DAC_READ_SEARCH</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">0x02 漏洞利用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">0x03 总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-References\"><span class=\"toc-text\">0x04 References</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05-%E5%85%B3%E4%BA%8E%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%80%9D%E8%80%83\"><span class=\"toc-text\">0x05 关于漏洞的思考</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"开软软件合规风险材料整理","uid":"a848febdecd13e7af1ad2da3100c5412","slug":"开源合规","date":"2022-06-19T08:43:00.000Z","updated":"2022-10-26T08:11:21.569Z","comments":true,"path":"api/articles/开源合规.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4136-9804020.png","text":"一、开源概述及开源风险分析开源合规系列（一）：开源概述及开源风险分析 二、开源许可证开源合规系列（二：上）：开源许可证之GPL、AGPL、LGPL、MPL开源合规系列（二：下）：开源许可证之Apache、MIT、BSD及许可证兼容性分析 三、开源合规系列（三）：开源合规建议及许可...","link":"","photos":[],"count_time":{"symbolsCount":174,"symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"开源软件风险合规","slug":"开源软件风险合规","count":1,"path":"api/tags/开源软件风险合规.json"},{"name":"资料整理","slug":"资料整理","count":1,"path":"api/tags/资料整理.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SCA软件成分分析前期探索","uid":"e996202d66a481abb2ff37739071b61f","slug":"SCA软件成分分析前期探索","date":"2022-06-17T04:52:00.000Z","updated":"2022-10-26T08:05:03.210Z","comments":true,"path":"api/articles/SCA软件成分分析前期探索.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4046-3049997.png","text":"SCA软件成分分析前期探索概述和背景SCA概念SCA(Software Composition Analysis)软件成分分析技术主要就是针对开源软件以及第三方商业软件设计的各种源码、源码库、模块和框架，识别和清点开源软件的组件及其构成和依赖关系，并识别已知的安全漏洞或潜在的许可...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"SBOM","slug":"SBOM","count":5,"path":"api/tags/SBOM.json"},{"name":"开源漏洞库","slug":"开源漏洞库","count":2,"path":"api/tags/开源漏洞库.json"},{"name":"安全","slug":"安全","count":1,"path":"api/tags/安全.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
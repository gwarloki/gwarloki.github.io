{"title":"软件工程领导者如何降低软件供应链风险","uid":"a83b1803a62789ff520605e269e53d45","slug":"Gartner-《软件工程领导者如何降低软件供应链风险》分享","date":"2022-07-25T05:18:00.000Z","updated":"2022-10-26T08:31:37.660Z","comments":true,"path":"api/articles/Gartner-《软件工程领导者如何降低软件供应链风险》分享.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29370-1972236.png","content":"<h2 id=\"概述和背景\"><a href=\"#概述和背景\" class=\"headerlink\" title=\"概述和背景\"></a>概述和背景</h2><p>调研关键发现共分为以下三点： </p>\n<ul>\n<li>恶意代码注入威胁的增加使得保护内部代码和外部依赖项（开源和商业）变得至关重要。 </li>\n<li>软件构建和交付流程受到破坏的后将导致泄露机密或其他敏感数据和代码被篡改。 </li>\n<li>未能强制执行最低权限和扁平化网络架构（对应的是分层网络架构或隔离网络）会使攻击者横向移动到生产环境，从而使企业面临更大的风险。</li>\n</ul>\n<p>根据关键发现，调研给出以下建议，软件工程领导者应该与他们的安全和风险管理团队合作，具体分为以下三点：</p>\n<ul>\n<li>在整个交付生命周期中，通过强制执行健全的版本控制策略、使用制品库来存储受信任的组件以及管理供应商风险，进而来保护内部和外部代码的完整性。</li>\n<li>通过在 CI&#x2F;CD 中配置安全工具，保护机密以及代码和对容器镜像签名，最终来强化软件交付管道流程。</li>\n<li>通过使用最小特权原则和零信任安全模型来管理资源的访问，保护软件工程师的操作环境。</li>\n</ul>\n<p>客户关注的供应链风险维度分为以下三点：</p>\n<ul>\n<li>CI&#x2F;CD系统的威胁</li>\n<li>恶意代码注入风险</li>\n<li>包含漏洞和恶意代码的依赖项</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从SolarWinds (2020)、NetBeans IDE (2020)、Kaseya (2021) 和 Codecov (2021)代表软件供应链攻击的这四个突出示例来看。Gartner 认为，到 2025 年，全球 45% 的组织将受到软件供应链遭受攻击，比 2021 年增加了三倍。</p></blockquote>\n<h2 id=\"潜在软件供应链风险\"><a href=\"#潜在软件供应链风险\" class=\"headerlink\" title=\"潜在软件供应链风险\"></a>潜在软件供应链风险</h2><p>软件供应链攻击是在软件开发、交付和使用的任何阶段破坏软件或其依赖项之一的行为。 尽管每种情况下精确的攻击向量可能不同，但攻击者通常会未授权访问开发环境和基础设施，包括版本控制系统、制品仓库、开源软件存储库、持续集成管道、构建服务器或应用程序服务器等，这导致攻击者可以通过修改源代码、脚本和依赖软件包，并建立后门窃取受害者环境中的数据。攻击包括但不仅限于外部攻击者，也可能来自内部威胁。<br><img src=\"http://img.moses.wang/new/20220725132238.png\"></p>\n<h3 id=\"内部和外部代码风险（开源组件）\"><a href=\"#内部和外部代码风险（开源组件）\" class=\"headerlink\" title=\"内部和外部代码风险（开源组件）\"></a>内部和外部代码风险（开源组件）</h3><h4 id=\"开发阶段\"><a href=\"#开发阶段\" class=\"headerlink\" title=\"开发阶段\"></a>开发阶段</h4><ul>\n<li>证书丢失</li>\n<li>密钥硬编码</li>\n<li>密钥丢失</li>\n<li>弱加密</li>\n<li>代码注入</li>\n<li>固件串改</li>\n</ul>\n<h4 id=\"集成阶段\"><a href=\"#集成阶段\" class=\"headerlink\" title=\"集成阶段\"></a>集成阶段</h4><ul>\n<li>开源组件漏洞</li>\n<li>包名抢注</li>\n<li>命名空间冲突</li>\n<li>不安全的第三方SDK和API</li>\n</ul>\n<h3 id=\"交付流程风险\"><a href=\"#交付流程风险\" class=\"headerlink\" title=\"交付流程风险\"></a>交付流程风险</h3><ul>\n<li>签名证书被篡改</li>\n<li>自动化脚本被篡改</li>\n</ul>\n<h3 id=\"生产环境风险\"><a href=\"#生产环境风险\" class=\"headerlink\" title=\"生产环境风险\"></a>生产环境风险</h3><ul>\n<li>未授权访问</li>\n<li>二进制代码逆向</li>\n<li>表单劫持</li>\n<li>提权</li>\n<li>网络端口扫描</li>\n<li>更新劫持</li>\n</ul>\n<h2 id=\"软件开发和部署中降低供应链安全风险的最佳安全开发实践\"><a href=\"#软件开发和部署中降低供应链安全风险的最佳安全开发实践\" class=\"headerlink\" title=\"软件开发和部署中降低供应链安全风险的最佳安全开发实践\"></a>软件开发和部署中降低供应链安全风险的最佳安全开发实践</h2><p>针对这三类风险，Gartner给出了部分应对措施和建议。<br><img src=\"http://img.moses.wang/new/20220725132435.png\"></p>\n<h3 id=\"内部和外部代码风险应对措施\"><a href=\"#内部和外部代码风险应对措施\" class=\"headerlink\" title=\"内部和外部代码风险应对措施\"></a>内部和外部代码风险应对措施</h3><p>软件研发团队使用版本控制系统（git&#x2F;svn等）和制品库来维护内部代码开发和外部制品分发，如果未将这些版本控制系统和制品库进行安全控制，可导致源代码和组件被篡改或劫持。Garter推荐以下三种方式来保障代码和组件的完整性。</p>\n<ul>\n<li>严格的版本控制</li>\n<li>受信任的组件库</li>\n<li>第三方风险管理</li>\n</ul>\n<h4 id=\"严格的版本控制\"><a href=\"#严格的版本控制\" class=\"headerlink\" title=\"严格的版本控制\"></a>严格的版本控制</h4><p>基于 Git 的版本管理系统（VCS），包括 BitBucket、GitHub 和 GitLab，提供源代码托管和访问权限控制能力，软件工程团队必须启用访问策略控制、分支保护和敏感扫描功能。 这些控件策略默认情况下不启用，必须进行配置。<br><img src=\"http://img.moses.wang/new/20220725132524.png\"><br>由于部分研发人员安全意思孱弱，无意将密钥信息，证书等上传到github或者gitlab上，任何能访问到源代码的用户均可获取相关敏感信息,Garter推荐部分基于Git存储库的敏感信息扫描工具。</p>\n<table>\n<thead>\n<tr>\n<th>开源工具</th>\n<th>厂商</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git-secrets: Open sourced by AWS Labs</td>\n<td>Github Secrets Scanning</td>\n</tr>\n<tr>\n<td>Repo Supervisor: Open sourced by Auth0</td>\n<td>GitLab Secret Detection</td>\n</tr>\n<tr>\n<td>truffleHog: Searches for secrets in Git repos</td>\n<td>Bitbuchet Secrets Scan</td>\n</tr>\n<tr>\n<td>Gitleaks: Scans repos and commits for secrets</td>\n<td>GitGuardian</td>\n</tr>\n<tr>\n<td>Deadshot: Open sourced by Twilio</td>\n<td>SpectralOps</td>\n</tr>\n</tbody></table>\n<h4 id=\"受信任的组件库\"><a href=\"#受信任的组件库\" class=\"headerlink\" title=\"受信任的组件库\"></a>受信任的组件库</h4><p>建议使用制品（或容器镜像）存储库、软件成分分析工具和源代码扫描工具，其中制品存储库可以对组件进行分发版本控制，软件成分分析工具（SCA）可以对当前组件及源代码进行成分分析，获取项目的依赖风险信息，并及时进行升级修复，对于源代码扫描工具(SAST)，可以对用户自己编写的源代码进行合规和安全行分析。<br>常见的制品库管理工具如下：</p>\n<table>\n<thead>\n<tr>\n<th>组件管理平台</th>\n<th>容器管理平台</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Azure Artifacts</td>\n<td>Azure Container Registry</td>\n</tr>\n<tr>\n<td>AWS CodeArtifacts</td>\n<td>Amazon ECR</td>\n</tr>\n<tr>\n<td>GitHub</td>\n<td>CNCF Harbor</td>\n</tr>\n<tr>\n<td>GitLab</td>\n<td>Docker Trusted Registry</td>\n</tr>\n<tr>\n<td>Google Artifact Registry</td>\n<td>GitHub</td>\n</tr>\n<tr>\n<td>JFrog Artifactory</td>\n<td>GitLab</td>\n</tr>\n<tr>\n<td>Sonatype Nexus Repository</td>\n<td>Google Container Registry</td>\n</tr>\n<tr>\n<td>Tidelift Catalogs</td>\n<td>JFrog Artifactory</td>\n</tr>\n<tr>\n<td>Red Hat Quay</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>常用企业级的SAST工具如下：</p>\n<table>\n<thead>\n<tr>\n<th>工具名称</th>\n<th>类型</th>\n<th>公司</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Fortify sca</td>\n<td>商业</td>\n<td>Hp Security</td>\n<td><a href=\"https://www.microfocus.com/zh-cn/products/static-code-analysis-sast/overview\">https://www.microfocus.com/zh-cn/products/static-code-analysis-sast/overview</a></td>\n</tr>\n<tr>\n<td>checkmarx sast</td>\n<td>商业</td>\n<td>checkmarx</td>\n<td><a href=\"https://checkmarx.com/product/cxsast-source-code-scanning/\">https://checkmarx.com/product/cxsast-source-code-scanning/</a></td>\n</tr>\n<tr>\n<td>Sonarqube</td>\n<td>开源</td>\n<td>Sonaqube</td>\n<td><a href=\"https://www.sonarqube.org/\">https://www.sonarqube.org/</a></td>\n</tr>\n<tr>\n<td>Veracode Static Analysis (SAST)</td>\n<td>商业</td>\n<td>Veracode</td>\n<td><a href=\"https://www.veracode.com/products/binary-static-analysis-sast\">https://www.veracode.com/products/binary-static-analysis-sast</a></td>\n</tr>\n<tr>\n<td>Coverity</td>\n<td>商业</td>\n<td>synopsys</td>\n<td><a href=\"https://www.synopsys.com/software-integrity/security-testing/static-analysis-sast.html\">https://www.synopsys.com/software-integrity/security-testing/static-analysis-sast.html</a></td>\n</tr>\n<tr>\n<td>奇安信代码卫士</td>\n<td>商业</td>\n<td>qax</td>\n<td><a href=\"https://www.qianxin.com/product/detail/pid/14\">https://www.qianxin.com/product/detail/pid/14</a></td>\n</tr>\n<tr>\n<td>DMSCA</td>\n<td>商业</td>\n<td>端玛科技</td>\n<td><a href=\"http://www.dumasecurity.com/goods.html\">http://www.dumasecurity.com/goods.html</a></td>\n</tr>\n<tr>\n<td>AppScan Source</td>\n<td>商业</td>\n<td>HCL AppScan</td>\n<td><a href=\"https://www.hcltechsw.com/appscan/offerings/source\">https://www.hcltechsw.com/appscan/offerings/source</a></td>\n</tr>\n</tbody></table>\n<p>常用企业级SCA工具：</p>\n<table>\n<thead>\n<tr>\n<th>工具名称</th>\n<th>类型</th>\n<th>公司</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Black Duck Software Composition Analysis</td>\n<td>商业</td>\n<td>synopsys</td>\n<td><a href=\"https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html\">https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html</a></td>\n</tr>\n<tr>\n<td>nexus lifecycle</td>\n<td>商业</td>\n<td>Sonatype</td>\n<td><a href=\"https://www.sonatype.com/products/open-source-security-dependency-management?topnav=true\">https://www.sonatype.com/products/open-source-security-dependency-management?topnav=true</a></td>\n</tr>\n<tr>\n<td>Veracode sca</td>\n<td>商业</td>\n<td>Veracode</td>\n<td><a href=\"https://www.veracode.com/products/software-composition-analysis\">https://www.veracode.com/products/software-composition-analysis</a></td>\n</tr>\n<tr>\n<td>Jfrog Xray</td>\n<td>商业</td>\n<td>Jfrog</td>\n<td><a href=\"https://jfrog.com/xray/\">https://jfrog.com/xray/</a></td>\n</tr>\n<tr>\n<td>Mend sca</td>\n<td>商业</td>\n<td>Mend</td>\n<td><a href=\"https://www.mend.io/sca/\">https://www.mend.io/sca/</a></td>\n</tr>\n<tr>\n<td>checkmarx sca</td>\n<td>商业</td>\n<td>Checkmarx</td>\n<td><a href=\"https://checkmarx.com/product/cxsca-open-source-scanning/\">https://checkmarx.com/product/cxsca-open-source-scanning/</a></td>\n</tr>\n<tr>\n<td>Dependency Scanning</td>\n<td>商业</td>\n<td>Gitlab</td>\n<td><a href=\"https://docs.gitlab.com/ee/user/application_security/dependency_scanning/\">https://docs.gitlab.com/ee/user/application_security/dependency_scanning/</a></td>\n</tr>\n<tr>\n<td>Dependency Track</td>\n<td>开源</td>\n<td>Owasp</td>\n<td><a href=\"https://dependencytrack.org/\">https://dependencytrack.org/</a></td>\n</tr>\n<tr>\n<td>雳鉴SCA</td>\n<td>商业</td>\n<td>默安</td>\n<td><a href=\"https://www.moresec.cn/product/sdl-sca\">https://www.moresec.cn/product/sdl-sca</a></td>\n</tr>\n<tr>\n<td>悬镜源鉴OSS</td>\n<td>商业</td>\n<td>悬镜</td>\n<td><a href=\"https://oss.xmirror.cn/\">https://oss.xmirror.cn/</a></td>\n</tr>\n<tr>\n<td>CoBot</td>\n<td>商业</td>\n<td>北大库博</td>\n<td><a href=\"https://www.pkuse.com.cn/multi/521.html\">https://www.pkuse.com.cn/multi/521.html</a></td>\n</tr>\n</tbody></table>\n<p><strong>The Forrester Wave SCA</strong></p>\n<p><img src=\"http://img.moses.wang/new/20220725132823.png\"></p>\n<p><img src=\"http://img.moses.wang/new/20220725132845.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TOP 10 SCA工具中有5款支持软件包开源软件SCA检查能力(synopsys&#x2F; Sonatype&#x2F; Veracode&#x2F; Jfrog&#x2F; GitLab)，其他工具只支持源代码SCA检查能力。<br>5款支持软件包SCA检查工具中，对C&#x2F;C++、Java、.Net语言支持的比较好，但对Golang、python、JavaScript语言支持能力偏弱，比如：synopsys支持的组件对象中前面3种语言占大头90%+，相应的检测率也高，而Golang语言的组件检出率则低很多。</p></blockquote>\n<h4 id=\"第三方风险管理\"><a href=\"#第三方风险管理\" class=\"headerlink\" title=\"第三方风险管理\"></a>第三方风险管理</h4><p>常见的与第三方软件相关的两种供应链风险：</p>\n<ol>\n<li>由于第三方或开源依赖项中的已知漏洞而导致的风险</li>\n<li>由于外部采购软件中植入后门&#x2F;恶意软件的风险</li>\n</ol>\n<p>Garter提供的解决措施：</p>\n<ol>\n<li>检查第三方是否遵循标准或获得认证</li>\n<li>检查供应商是否有必要的措施开展SDLC流程</li>\n<li>供应商遵循什么流程来修补自己的软件及其依赖项</li>\n<li>第三方软件的更新机制是否受到保护</li>\n<li>对于第三方软件或依赖项中发现的漏洞的SLA（软件服务协议）是什么？</li>\n</ol>\n<p>软件供应链安全评估框架和标准</p>\n<table>\n<thead>\n<tr>\n<th>评估名称</th>\n<th>简介</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Evaluating Your Supply Chain Security</td>\n<td>A Checklist by Cloud Native Computing Foundation (CNCF)</td>\n<td><a href=\"https://github.com/cncf/tag-security/blob/main/supply-chain-security/supply-chain-security-paper/secure-supply-chain-assessment.md\">https://github.com/cncf/tag-security/blob/main/supply-chain-security/supply-chain-security-paper/secure-supply-chain-assessment.md</a></td>\n</tr>\n<tr>\n<td>NIST Secure Software Development Framework</td>\n<td>Secure Software Development Framework (SSDF) Version 1.1:Recommendations for Mitigating the Risk of SoftwareVulnerabilities</td>\n<td><a href=\"https://nvlpubs.nist.gov/nistpubs/CSWP/NIST.CSWP.04232020.pdf\">https://nvlpubs.nist.gov/nistpubs/CSWP/NIST.CSWP.04232020.pdf</a></td>\n</tr>\n<tr>\n<td>NIST, Security and Privacy Controls for Information Systems and Organizations</td>\n<td>Security and Privacy Controls.</td>\n<td><a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf\">https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf</a></td>\n</tr>\n<tr>\n<td>Ul 2900 for IoT Certification</td>\n<td>UL 2900 series of standards was developed as part of UL’s Cybersecurity Assurance Program which provides manufacturers testable and measureable criteria</td>\n<td><a href=\"https://www.cybersecuritysummit.org/wp-content/uploads/2017/10/4.00-Justin-Heyl.pdf\">https://www.cybersecuritysummit.org/wp-content/uploads/2017/10/4.00-Justin-Heyl.pdf</a></td>\n</tr>\n<tr>\n<td>ISO&#x2F;IEC 27034</td>\n<td>Information technology — Security techniques — Application security</td>\n<td><a href=\"https://www.iso.org/standard/44378.html\">https://www.iso.org/standard/44378.html</a></td>\n</tr>\n</tbody></table>\n<p>软件供应链开源项目安全评估</p>\n<table>\n<thead>\n<tr>\n<th>评估名称</th>\n<th>简介</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Open Source Insights</td>\n<td>Open Source Insights 会展示软件包的相关信息，而无需用户预先安装软件包。开发人员可以看到该依赖包对项目的重要程度，依赖组件流行程度，查找源代码的链接，然后决定是否应安装该组件。</td>\n<td><a href=\"https://opensource.googleblog.com/2021/06/introducing-open-source-insights-project.html\">https://opensource.googleblog.com/2021/06/introducing-open-source-insights-project.html</a></td>\n</tr>\n<tr>\n<td>OSSF Scorecard</td>\n<td>OSSF Scorecard 是一个通过多种维度来评估开源项目的安全性的工具.</td>\n<td><a href=\"https://github.com/ossf/scorecard\">https://github.com/ossf/scorecard</a></td>\n</tr>\n<tr>\n<td>Supply chain Levels for Software Artifacts (SLSA, pronounced “salsa”)</td>\n<td>确保软件供应链中组件完整性的端到端保护框架。</td>\n<td><a href=\"https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html\">https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"交付流程风险应对措施\"><a href=\"#交付流程风险应对措施\" class=\"headerlink\" title=\"交付流程风险应对措施\"></a>交付流程风险应对措施</h3><h4 id=\"1-使用密钥管理工具\"><a href=\"#1-使用密钥管理工具\" class=\"headerlink\" title=\"1. 使用密钥管理工具:\"></a>1. 使用密钥管理工具:</h4><p>密钥管理通过规范的方法来管理和保护如凭证、密码、API 令牌和证书等机密。 Garter建议使用密钥管理工具来自动创建、存储、检索和撤销秘密。 这有助于避免在源代码、配置文件和基础设施自动化脚本中嵌入（硬编码）密钥信息等。<br>常见的密钥管理工具如下：</p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>密钥管理工具</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>与平台无关</td>\n<td>Akeyless</td>\n</tr>\n<tr>\n<td>CyberArk Conjur</td>\n<td></td>\n</tr>\n<tr>\n<td>Thycotic Secrets Vault</td>\n<td></td>\n</tr>\n<tr>\n<td>HashiCorp Vault</td>\n<td></td>\n</tr>\n<tr>\n<td>云厂商提供</td>\n<td>AWS Secrets Manager</td>\n</tr>\n<tr>\n<td>Azure Key Vault</td>\n<td></td>\n</tr>\n<tr>\n<td>GCP Secret Manager</td>\n<td></td>\n</tr>\n<tr>\n<td>容器原生环境</td>\n<td>Kubernetes Secrets (etcd)</td>\n</tr>\n<tr>\n<td>Sealed Secrets</td>\n<td></td>\n</tr>\n<tr>\n<td>配置管理</td>\n<td>Ansible Vault</td>\n</tr>\n<tr>\n<td>Chef Data Bag</td>\n<td></td>\n</tr>\n<tr>\n<td>Puppet Hiera</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-通过签名和散列函数来验证源码的完整性\"><a href=\"#2-通过签名和散列函数来验证源码的完整性\" class=\"headerlink\" title=\"2. 通过签名和散列函数来验证源码的完整性\"></a>2. 通过签名和散列函数来验证源码的完整性</h4><ol>\n<li><p>哈希和签名可用于验证源代码和二进制文件的完整性。<br>VCS（版本控制系统）在提交时会对单个文件生成哈希，该哈希可以用于验证文件在传输过程中是否被篡改。另外，编译器在编译时也生成哈希，可以通过将提交时和编译时的哈希进行对比，以保证代码在提交阶段和编译阶段未被篡改。</p>\n</li>\n<li><p>提交签名<br>由于哈希不能验证来源，所以需要通过VCS的签名提交功能来验证提交代码人的身份。</p>\n</li>\n<li><p>容器签名<br>当前越来越多的系统开始通过容器进行部署，因此需要保证容器未被篡改过。即使用户的公司或组织自行构建和维护内部镜像，Gartner 也建议对容器镜像进行签名。这是因为第三方代码或依赖项中的任何问题都会影响正在运行的应用程序的安全状况</p>\n<p><img src=\"http://img.moses.wang/new/20220725133201.png\"></p>\n<p>容器签名的工具如下：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>工具名称</th>\n<th>介绍</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Grafeas</td>\n<td>Grafeas定义用于管理有关软件资源的元数据的API格式，例如容器镜像，VM镜像，JAR包和脚本，为构建代码到容器供应链的组件，包括组件的来源、漏洞、依赖关系等提供了一个集中的知识库。</td>\n<td><a href=\"https://github.com/grafeas/grafeas\">https://github.com/grafeas/grafeas</a></td>\n</tr>\n<tr>\n<td>Kritis</td>\n<td>Kritis 是一个Kubernetes准入控制器，它在运行时运行由Kubernetes集群管理员定义的策略检查，然后根据镜像中的漏洞或镜像不是从可信来源获得的，批准或拒绝要启动的容器。</td>\n<td><a href=\"https://github.com/grafeas/kritis\">https://github.com/grafeas/kritis</a></td>\n</tr>\n<tr>\n<td>Kritis Singer</td>\n<td>是一个为容器图像创建认证的命令行工具。</td>\n<td><a href=\"https://github.com/grafeas/kritis/blob/master/docs/signer.md\">https://github.com/grafeas/kritis/blob/master/docs/signer.md</a></td>\n</tr>\n<tr>\n<td>Cosign</td>\n<td>Cosign对容器图像签名。Cosign是由Linux基金会主办的sigstore项目的一部分。</td>\n<td><a href=\"https://github.com/sigstore/cosign\">https://github.com/sigstore/cosign</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-在CI-x2F-CD管道中配置安全控制\"><a href=\"#3-在CI-x2F-CD管道中配置安全控制\" class=\"headerlink\" title=\"3. 在CI&#x2F;CD管道中配置安全控制\"></a>3. 在CI&#x2F;CD管道中配置安全控制</h4><p>攻击者可以通过攻击CI&#x2F;CD系统来绕过对代码的检查和扫描，因此需要保证CI&#x2F;CD系统的安全性。可以通过对CI&#x2F;CD系统的安全配置来防范风险。常见工具：Apiiro, Argon,Cycode, Garantir, GrammaTech, JFrog (Vdoo)、RunSafe Security。<br>保护 CI&#x2F;CD 管道有以下两点措施： </p>\n<ol>\n<li><p>可复现的构建过程<br>确保相同的代码始终构建相同的软件，其中包含以下三点原则： </p>\n<p>确定性构建：确保相同的源代码必须编译构建相同的软件<br>强化构建工具：构建管道中的工具是安全稳定的且不可更改的<br>可验证输出：能够检测和验证预期构建和实际构建之间的差异 </p>\n</li>\n<li><p>在构建管道中创建不可变的、可验证的制品签名任务<br>支持在管道运行期间生成制品的签名，以确保一致性并在管道执行结束时验证出处。</p>\n</li>\n</ol>\n<p>对于IDE的保护，可以使用基于浏览器的IDE（远程开发桌面），防止开发人员本地安装的IDE工具存在风险。</p>\n<h3 id=\"生产环境风险应对措施\"><a href=\"#生产环境风险应对措施\" class=\"headerlink\" title=\"生产环境风险应对措施\"></a>生产环境风险应对措施</h3><p>操作环境风险是指在整个软件开发过程中所涉及的操作环境的风险，如开发环境、代码仓库、流水线系统、测试环境等。针对操作环境的风险防范措施包括：\t</p>\n<h4 id=\"1-最小权限访问策略\"><a href=\"#1-最小权限访问策略\" class=\"headerlink\" title=\"1. 最小权限访问策略\"></a>1. 最小权限访问策略</h4><p>网络上连接着不同设备，特权提升允许攻击者一旦获得对一个系统的访问，就可以渗透到其他机器和服务中。此外，除非实施了正确的访问控制，否则受到攻击的可执行文件可能会未经授权与其他核心系统建立连接。因此，Garter建议使用基于角色的身份验证和授权、使用零信任安全模型的自适应访问和特权访问管理。<br><img src=\"http://img.moses.wang/new/20220725133459.png\"></p>\n<h4 id=\"2-机器身份管理\"><a href=\"#2-机器身份管理\" class=\"headerlink\" title=\"2. 机器身份管理\"></a>2. 机器身份管理</h4><p>对分布式应用、云原生、API服务等架构体系的使用使得应用系统的部署变得更细颗粒度且数量增多。机器身份管理是对主机、容器、虚拟机、应用程序、数据库、API服务等机器的身份进行统一管理、统一验证，确定机器的唯一身份。包括：密钥管理、证书管理等。常见的机器身份识别系统如下：</p>\n<table>\n<thead>\n<tr>\n<th>使用场景</th>\n<th>作用域</th>\n<th>应用名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>静态数据加密，对称密钥管理</td>\n<td>密钥管理系统</td>\n<td>Akeyless</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>AWS</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>KMS</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Azure</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Twilio (Ionic)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Fortanix</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>PKWARE</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Thales and Townsend Security</td>\n</tr>\n<tr>\n<td>存储DevOps管道中使用的密钥，将机器标识发送给容器</td>\n<td>机密管理</td>\n<td>Akeyless</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>AWS</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Microsoft Azure</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>BeyondTrust</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>CyberArk</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Fortanix</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Google Cloud Platform (GCP)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>HashiCorp</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ThycoticCentrify</td>\n</tr>\n<tr>\n<td>用于代码签名的身份验证、加密和签名</td>\n<td>PKI和证书管理</td>\n<td>AppViewX</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>AWS</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>DigiCert</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Entrust</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>GlobalSign</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Keyfactor</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Microsoft</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>The Nexus Group</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Sectigo</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Venafi</td>\n</tr>\n<tr>\n<td>发现和控制对关键系统的特权访问</td>\n<td>特权访问管理</td>\n<td>Akeyless</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>BeyondTrust</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Broadcom</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>CyberArk</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>One Identity</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ThycoticCentrify</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-异常检测和自动响应\"><a href=\"#3-异常检测和自动响应\" class=\"headerlink\" title=\"3. 异常检测和自动响应\"></a>3. 异常检测和自动响应</h4><p>软件工程领导者必须与安全和风险团队密切合作，以了解和定义其开发平台和工具的预期行为，以便他们能够实时检测异常。 例如，EDR、CWPP、NDR 或 squery 等工具可以监控系统异常。 构建系统，包括软件工程师使用的 PC，不应免除 EPP&#x2F;EDR 保护。异常检测和响应在容器原生、基于 GitOps 的部署中尤其重要，可以自动化部署完整的代码到容器工作流程。 尽管处于开发阶段的容器镜像扫描工具有助于检测已知漏洞，但软件工程团队必须部署相关工具来可视化容器流量、识别集群错误配置并对异常容器行为和安全事件进行监测。<br>对异常活动进行监测，并及时响应和处理有以下四点：</p>\n<ul>\n<li><ol>\n<li>可执行文件与访问控制系统创建不必要的连接</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>特定机器上的进程、线程以及CPU和内存的利用率增加</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>针对网络访问、存储库的上传及下载、非常用目录的流访问量激增</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>监控软件的异常告警（SIEM、EPP、CASB）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>从SolarWinds (2020)、NetBeans IDE (2020)、Kaseya (2021) 和 Codecov (2021)攻击案例来看，软件供应链安全攻击范围较广，难度较高，周期较长，影响较远，防护较弱。根据信息安全的“木桶理论”：“信息的安全就像一个‘木桶’，整体的安全性取决于最薄弱的一个环节，否则即使其它方面做得再强，但在某一方面留下一个漏洞，也可能被他人利用，导致信息的失窃。”供应链当前安全现状也如此。为了提升软件供应链安全，建议软件工程团队根据自身情况，循序渐进提升软件供应链安全能力。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.gartner.com/en/documents/4003625\">https://www.gartner.com/en/documents/4003625</a>【How Software Engineering Leaders Can Mitigate Software Supply Chain Security Risks】</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1839537\">https://cloud.tencent.com/developer/article/1839537</a>【企业级静态代码分析工具清单】</li>\n<li><a href=\"https://www.gartner.com/reviews/market/software-composition-analysis-sca\">https://www.gartner.com/reviews/market/software-composition-analysis-sca</a>【Products In Software Composition Analysis (SCA) reviews Market】</li>\n<li><a href=\"https://sudonull.com/post/27911-Forrester-Research-A-Comparison-of-Ten-Top-Software-Composition-Analysis-Vendors\">https://sudonull.com/post/27911-Forrester-Research-A-Comparison-of-Ten-Top-Software-Composition-Analysis-Vendors</a>【Forrester Research: A Comparison of Ten Top Software Composition Analysis Vendors】</li>\n<li><a href=\"https://blog.csdn.net/m0_50579386/article/details/123507873\">https://blog.csdn.net/m0_50579386&#x2F;article&#x2F;details&#x2F;123507873</a>【国内外软件成分分析SCA产品评测】</li>\n<li><a href=\"https://developer.aliyun.com/article/738408\">https://developer.aliyun.com/article/738408</a>【Kubernetes 时代的安全软件供应链】</li>\n</ul>\n","text":"概述和背景调研关键发现共分为以下三点： 恶意代码注入威胁的增加使得保护内部代码和外部依赖项（开源和商业）变得至关重要。 软件构建和交付流程受到破坏的后将导致泄露机密或其他敏感数据和代码被篡改。 未能强制执行最低权限和扁平化网络架构（对应的是分层网络架构或隔离网络）会使攻击者横向移...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"软件供应链风险","slug":"软件供应链风险","count":1,"path":"api/tags/软件供应链风险.json"},{"name":"优秀文章收藏","slug":"优秀文章收藏","count":5,"path":"api/tags/优秀文章收藏.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0%E5%92%8C%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">概述和背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BD%9C%E5%9C%A8%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE%E9%A3%8E%E9%99%A9\"><span class=\"toc-text\">潜在软件供应链风险</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E5%92%8C%E5%A4%96%E9%83%A8%E4%BB%A3%E7%A0%81%E9%A3%8E%E9%99%A9%EF%BC%88%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">内部和外部代码风险（开源组件）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">开发阶段</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9B%86%E6%88%90%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">集成阶段</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BB%98%E6%B5%81%E7%A8%8B%E9%A3%8E%E9%99%A9\"><span class=\"toc-text\">交付流程风险</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%A3%8E%E9%99%A9\"><span class=\"toc-text\">生产环境风险</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%92%8C%E9%83%A8%E7%BD%B2%E4%B8%AD%E9%99%8D%E4%BD%8E%E4%BE%9B%E5%BA%94%E9%93%BE%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">软件开发和部署中降低供应链安全风险的最佳安全开发实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E5%92%8C%E5%A4%96%E9%83%A8%E4%BB%A3%E7%A0%81%E9%A3%8E%E9%99%A9%E5%BA%94%E5%AF%B9%E6%8E%AA%E6%96%BD\"><span class=\"toc-text\">内部和外部代码风险应对措施</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%A5%E6%A0%BC%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">严格的版本控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%97%E4%BF%A1%E4%BB%BB%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93\"><span class=\"toc-text\">受信任的组件库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">第三方风险管理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BB%98%E6%B5%81%E7%A8%8B%E9%A3%8E%E9%99%A9%E5%BA%94%E5%AF%B9%E6%8E%AA%E6%96%BD\"><span class=\"toc-text\">交付流程风险应对措施</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E5%AF%86%E9%92%A5%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">1. 使用密钥管理工具:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%80%9A%E8%BF%87%E7%AD%BE%E5%90%8D%E5%92%8C%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E6%9D%A5%E9%AA%8C%E8%AF%81%E6%BA%90%E7%A0%81%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7\"><span class=\"toc-text\">2. 通过签名和散列函数来验证源码的完整性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%9C%A8CI-x2F-CD%E7%AE%A1%E9%81%93%E4%B8%AD%E9%85%8D%E7%BD%AE%E5%AE%89%E5%85%A8%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3. 在CI&#x2F;CD管道中配置安全控制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%A3%8E%E9%99%A9%E5%BA%94%E5%AF%B9%E6%8E%AA%E6%96%BD\"><span class=\"toc-text\">生产环境风险应对措施</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%9C%80%E5%B0%8F%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">1. 最小权限访问策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%9C%BA%E5%99%A8%E8%BA%AB%E4%BB%BD%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2. 机器身份管理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E5%92%8C%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">3. 异常检测和自动响应</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"软件供应链安全分析工具-V-Achilles","uid":"f2412a8bd3bfecd60141b4e2ac30134b","slug":"工具-依赖关系图V-Achilles","date":"2022-08-02T03:17:00.000Z","updated":"2022-10-26T09:07:50.850Z","comments":true,"path":"api/articles/工具-依赖关系图V-Achilles.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29484-2351973.png","text":"工具-依赖关系图V-Achilles简介V-Achilles是一个工具，可以显示受软件漏洞攻击影响的直接和间接依赖项的可视化（即使用依赖关系图）。演示地址：Achilles 4个GitHub存储库的漏洞报告 sinopia：报告 cpnmjs：报告 window-build-to...","link":"","photos":[],"count_time":{"symbolsCount":558,"symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件成分分析工具","slug":"软件成分分析工具","count":5,"path":"api/tags/软件成分分析工具.json"},{"name":"软件依赖关系图","slug":"软件依赖关系图","count":1,"path":"api/tags/软件依赖关系图.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"软件材料清单生成工具-微软","uid":"67dd0e8e72f6ddd8ae2e7ba7f339b055","slug":"微软开源其软件材料清单（SBOM）生成工具","date":"2022-07-22T01:14:00.000Z","updated":"2022-10-26T08:28:57.177Z","comments":true,"path":"api/articles/微软开源其软件材料清单（SBOM）生成工具.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29341-8300085.png","text":"微软开源其软件材料清单（SBOM）生成工具0x01简介2022年7月12日微软开源了原件材料清单生成工具，该工具适用于Windows、Linux和Mac等跨平台，并使用标准软件包数据交换（SPDX）格式。（要查看之前关于我们SBOM工具的公告，请阅读微软使用SPDX生成软件材料清...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SBOM","slug":"SBOM","count":5,"path":"api/tags/SBOM.json"},{"name":"工具","slug":"工具","count":1,"path":"api/tags/工具.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"初始EasyOCR","uid":"a22cd47d0ebd453e81ab6289af85ce97","slug":"初始EasyOCR","date":"2022-10-20T09:53:00.000Z","updated":"2022-10-26T09:20:42.023Z","comments":true,"path":"api/articles/初始EasyOCR.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29376-6050591.png","content":"<h1 id=\"EasyOCR\"><a href=\"#EasyOCR\" class=\"headerlink\" title=\"EasyOCR\"></a>EasyOCR</h1><h2 id=\"0x01简介\"><a href=\"#0x01简介\" class=\"headerlink\" title=\"0x01简介\"></a>0x01简介</h2><p>描述: EasyOCR 是一个用于从图像中提取文本的 python 模块, 它是一种通用的 OCR，既可以读取自然场景文本，也可以读取文档中的密集文本。目前支持 80 多种语言和所有流行的书写脚本，包括：拉丁文、中文、阿拉伯文、梵文、西里尔文等。<br><strong>除官网的使用demo外，还可以在<a href=\"https://colab.to/easyocr\">Colab</a><br>同时也使用Gradio集成到<a href=\"https://huggingface.co/spaces\">Huggingface Spaces</a></strong></p>\n<h3 id=\"🚀Link：\"><a href=\"#🚀Link：\" class=\"headerlink\" title=\"🚀Link：\"></a>🚀Link：</h3><ul>\n<li><a href=\"https://www.jaided.ai/easyocr/tutorial/\">docs</a></li>\n<li><a href=\"https://www.jaided.ai/easyocr/\">demo</a></li>\n<li><a href=\"https://github.com/JaidedAI/EasyOCR\">github</a></li>\n<li><a href=\"https://github.com/WeiyiGeek/SecOpsDev/tree/master/Project/Python/EasyOCR/Travelcodeocr\">Travelcodeocr</a></li>\n<li><a href=\"https://huggingface.co/spaces/tomofi/EasyOCR\">EasyOCR - a Hugging Face Space by tomofi</a></li>\n</ul>\n<h2 id=\"0x02架构图\"><a href=\"#0x02架构图\" class=\"headerlink\" title=\"0x02架构图\"></a>0x02架构图</h2><p><img src=\"http://img.moses.wang/new/20221021094355.png\"></p>\n<h2 id=\"0x03核心能力\"><a href=\"#0x03核心能力\" class=\"headerlink\" title=\"0x03核心能力\"></a>0x03核心能力</h2><p>该项目基于来自几篇论文和开源存储库的研究和代码。</p>\n<p>所有深度学习执行都基于<a href=\"https://pytorch.org/\">Pytorch</a>。❤️</p>\n<p>检测执行使用这个<a href=\"https://github.com/clovaai/CRAFT-pytorch\">官方存储库</a>及其<a href=\"https://arxiv.org/abs/1904.01941\">论文</a>中的CRAFT算法（感谢<a href=\"https://github.com/clovaai\">@clovaai</a>的@YoungminBaek）。我们还使用他们的预训练模型。培训脚本由<a href=\"https://github.com/gmuffiness\">@gmuffiness</a>提供。</p>\n<p>识别模型是CRNN（<a href=\"https://arxiv.org/abs/1507.05717\">论文</a>）。它由3个主要组件组成：特征提取（我们目前正在使用<a href=\"https://arxiv.org/abs/1512.03385\">Resnet</a>）和VGG、序列标记（<a href=\"https://www.bioinf.jku.at/publications/older/2604.pdf\">LSTM</a>）和解码（<a href=\"https://www.cs.toronto.edu/~graves/icml_2006.pdf\">CTC</a>）。识别执行的训练管道是<a href=\"https://github.com/clovaai/deep-text-recognition-benchmark\">深文本识别基准</a>框架的修改版本。（来自<a href=\"https://github.com/clovaai\">@clovaai</a>的感谢<a href=\"https://github.com/ku21fan\">@ku21fan</a>）这个存储库是一颗值得更多认可的宝石。</p>\n<p>Beam搜索代码基于此<a href=\"https://github.com/githubharald/CTCDecoder\">存储库</a>和他的<a href=\"https://towardsdatascience.com/beam-search-decoding-in-ctc-trained-neural-networks-5a889a3d85a7\">博客</a>。（谢谢<a href=\"https://github.com/githubharald\">@githubharald</a>）</p>\n<p>数据合成基于<a href=\"https://github.com/Belval/TextRecognitionDataGenerator\">TextRecognitionDataGenerator</a>。（谢谢<a href=\"https://github.com/Belval\">@Belval</a>）</p>\n<p>从distill.pub<a href=\"https://distill.pub/2017/ctc/\">这里</a>读到关于CTC的好书。</p>\n<h2 id=\"0x04对比Tesseract\"><a href=\"#0x04对比Tesseract\" class=\"headerlink\" title=\"0x04对比Tesseract\"></a>0x04对比Tesseract</h2><ul>\n<li>EasyOCR<br><img src=\"http://img.moses.wang/new/20221021101043.png\"></li>\n<li>Tesseract<br><img src=\"http://img.moses.wang/new/20221021100211.png\"></li>\n<li>参考<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/384384306\">文字识别OCR开源框架的对比–Tesseract vs EasyOCR - 知乎</a></li>\n<li><a href=\"https://huggingface.co/spaces/tomofi/EasyOCR\">EasyOCR - a Hugging Face Space by tomofi</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"0x05Quickstart\"><a href=\"#0x05Quickstart\" class=\"headerlink\" title=\"0x05Quickstart\"></a>0x05Quickstart</h2><h3 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h3><ul>\n<li>Python 建议 3.8 x64 以上版本 (原本我的环境是 Python 3.7 安装时各种稀奇古怪的错误都出来，不得已abandon放弃)</li>\n<li>easyocr 包 -&gt; 依赖 torch 、torchvision 第三方包</li>\n</ul>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><ul>\n<li>最新稳定版-from pip package<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip install easyocr -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; --trusted-host mirrors.aliyun.com </code></pre></li>\n<li>最新开发版<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip install git+git:&#x2F;&#x2F;github.com&#x2F;jaidedai&#x2F;easyocr.git </code></pre></li>\n</ul>\n<h3 id=\"install-docker\"><a href=\"#install-docker\" class=\"headerlink\" title=\"install -docker\"></a>install -docker</h3><ol>\n<li>修改官方dockerfile文件<a href=\"https://github.com/JaidedAI/EasyOCR/blob/master/Dockerfile\">EasyOCR&#x2F;Dockerfile at master · JaidedAI&#x2F;EasyOCR · GitHub</a>，考虑到国内网络问题，修改参考[[2022-10-20_周四#制作镜像文件的网络问题]]<br><strong>也可以考虑增加’expose&#x3D;xx’进行端口映射，或者增加tesseract需要的二进制报</strong><pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\"># pytorch OS is Ubuntu 18.04\nFROM pytorch&#x2F;pytorch\nLABEL DESC&#x3D;&quot;EasyOCR Enviroment Build with Containerd Images&quot;\nARG service_home&#x3D;&quot;&#x2F;home&#x2F;EasyOCR&quot;\n\n# Enviroment &amp;&amp; Software\nRUN sed -i -e &quot;s#archive.ubuntu.com#mirrors.aliyun.com#g&quot; -e &quot;s#security.ubuntu.com#mirrors.aliyun.com#g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.list  &amp;&amp; \\\n    apt-get update -y &amp;&amp; \\\n    apt-get install -y \\\n    libglib2.0-0 \\\n    libsm6 \\\n    libxext6 \\\n    libxrender-dev \\\n    libgl1-mesa-dev \\\n    git \\\n    vim \\\n    # cleanup\n    &amp;&amp; apt-get autoremove -y \\\n    &amp;&amp; apt-get clean -y \\\n    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists\n\n# COPY EasyOCR is Github(https:&#x2F;&#x2F;github.com&#x2F;JaidedAI&#x2F;EasyOCR.git)\nCOPY .&#x2F;EasyOCR &quot;$service_home&quot;\n\n# Build\nRUN cd &quot;$service_home&quot; \\\n  &amp;&amp; pip config set global.index-url https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; \\\n  &amp;&amp; python setup.py build_ext --inplace -j 4 \\\n  &amp;&amp; python -m pip install -e . </code></pre></li>\n<li>制作镜像文件<br><code>docker build -f dockerfile -tag eastocr:v1</code></li>\n<li>启动容器：由于当时使用<code>docker build .‘ 构建的镜像文件，需要打上tag</code>docker tag f1caac5c8abd easyocr:v1&#96; 挂在文件路径启动容器<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 之前挂在的目录有问题，填写了一个不存在文件路径\ndocker run --name easyocr -v &#x2F;Users&#x2F;xfxj01&#x2F;Downloads&#x2F;image-EasyOCR -tid easyocr:v1  &#x2F;bin&#x2F;bash\n# [docker-修改容器的挂载目录三种方式](https:&#x2F;&#x2F;blog.csdn.net&#x2F;zedelei&#x2F;article&#x2F;details&#x2F;90208183)其中第一种对Mac不太友好，主要原因如下\n[docker解决Mac OS挂载后找不到var&#x2F;lib&#x2F;docker... - 知乎](https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;397425187）</code></pre></li>\n<li>进入容器<br><code>docker exec -it 74a4ee31ea152da85d4288ee4d6a1d8688f071445a25fc26896ddd58a900c3cb /bin/sh</code></li>\n</ol>\n<h2 id=\"0x06EasyOCR使用说明\"><a href=\"#0x06EasyOCR使用说明\" class=\"headerlink\" title=\"0x06EasyOCR使用说明\"></a>0x06EasyOCR使用说明</h2><ol>\n<li>测试用例<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import easyocr\nreader &#x3D; easyocr.Reader([&#39;ch_sim&#39;,&#39;en&#39;]) # this needs to run only once to load the model into memory\nresult &#x3D; reader.readtext(&#39;chinese.jpg&#39;)</code></pre>\n<strong>注意</strong><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>[&#39;ch_sim&#39;,&#39;en&#39;]</code>是您想要阅读的语言列表。您可以同时通过几种语言，但并非所有语言都可以一起使用。英语与每种语言兼容，共享共同字符的语言通常相互兼容。<br>行<code>reader = easyocr.Reader([&#39;ch_sim&#39;,&#39;en&#39;])</code>用于将模型加载到内存中。这需要一些时间，但只需要运行一次。</p>\n<blockquote>\n<p>可以设置<code>detail=0</code>以获得更简单的输出。</p></blockquote>\n</blockquote>\n</li>\n</ol>\n<p>使用命令行运行<br><img src=\"http://img.moses.wang/new/20221020154048.png\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">easyocr -l  en  -f 1.jpeg --detail&#x3D;0</code></pre>\n<p><img src=\"http://img.moses.wang/new/20221020153412.png\"><br>2. 失败效果很差，尝试对测试图片进行转灰度处理： 利用Image对象的convert()方法参数传入L，即可将图片转成为灰度图像：<br><img src=\"http://img.moses.wang/new/1-1.jpeg\"><br>3. 效果没差别，尝试二值化处理，二值化是指将图像上的像素点的灰度值设置为0或255，也就是将整个图片呈现出明显的只有黑和百的视觉效果 </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from PIL import Image\n\nimage &#x3D; Image.open(&quot;&#x2F;home&#x2F;EasyOCR&#x2F;examples&#x2F;1.jpeg&quot;)\nimage &#x3D; image.convert(&quot;L&quot;)\nthreshold &#x3D; 150\ntable &#x3D; []\nfor i in range(256):\n    if i &lt; threshold:\n        table.append(0)\n    else:\n        table.append(1)\n\nimage &#x3D; image.point(table,&quot;1&quot;)\nimage.save(&quot;&#x2F;home&#x2F;EasyOCR&#x2F;examples&#x2F;1-3.jpeg&quot;)</code></pre>\n<p><img src=\"http://img.moses.wang/new/1-2.jpeg\"><br>4. 最终还是不行，但就测试图片来说经过简单处理识别率还是停留在75%<br><img src=\"http://img.moses.wang/new/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_d2271699-31a3-4f62-b150-bd519ee3890f.png\"></p>\n<h3 id=\"图形验证码\"><a href=\"#图形验证码\" class=\"headerlink\" title=\"图形验证码\"></a>图形验证码</h3><h4 id=\"1-通过captcha库生成图形验证码\"><a href=\"#1-通过captcha库生成图形验证码\" class=\"headerlink\" title=\"1. 通过captcha库生成图形验证码\"></a>1. 通过<strong>captcha库</strong>生成图形验证码</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 安装清华的captcha库\npip install captcha -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</code></pre>\n<p>利用captcha库生成图片验证码的代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from captcha.image import ImageCaptcha\nimport random,string\n\nchr_all &#x3D; string.ascii_letters + string.digits\nchr_4 &#x3D; &#39;&#39;.join(random.sample(chr_all, 4))\nimage &#x3D; ImageCaptcha().generate_image(chr_4)\nimage.save(&#39;.&#x2F;%s.jpg&#39; % chr_4)</code></pre>\n<p>将随机生成的4个字符组合传入 ImageCaptcha 类下的 generate_image 方法中，然后他就会自动生成一个图片验证码，形式如下：<br><img src=\"http://img.moses.wang/new/4y68.jpg\"></p>\n<h4 id=\"2-gvcode库\"><a href=\"#2-gvcode库\" class=\"headerlink\" title=\"2. gvcode库\"></a>2. <strong>gvcode库</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip install graphic-verification-code -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</code></pre>\n<p>生成代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import gvcode\ns,v &#x3D; gvcode.generate()\ns.save(&#39;.&#x2F;%s.jpg&#39; % v)</code></pre>\n<h4 id=\"3-Pillow库\"><a href=\"#3-Pillow库\" class=\"headerlink\" title=\"3.  Pillow库\"></a>3.  <strong>Pillow库</strong></h4><p>Pillow是一个非常强大的图片处理模块，其中Image是Pillow中最为重要的类，实现了Pillow中大部分的功能，这个类的主要用来表示图片对象。生成图片验证码需要下面这四个类：</p>\n<ul>\n<li>1、Image：含有图片对象主体上的一些应用</li>\n<li>2、ImageDraw：画笔，用来向图片上添加验证码</li>\n<li>3、ImageFont：设置验证码的字体形式</li>\n<li>4、ImageFilter：对图片验证码进行模糊处理<br><a href=\"http://img.moses.wang/code/%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AD%97%E4%BD%93.zip\">验证码字体下载</a><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import random\nfrom PIL import Image, ImageDraw, ImageFont, ImageFilter\n\n#  生成验证码函数\ndef check_code(width&#x3D;120, height&#x3D;30, char_length&#x3D;5, font_file&#x3D;&#39;kumo.ttf&#39;, font_size&#x3D;28):\n    code &#x3D; []\n    img &#x3D; Image.new(mode&#x3D;&#39;RGB&#39;, size&#x3D;(width, height), color&#x3D;(255, 255, 255))\n    draw &#x3D; ImageDraw.Draw(img, mode&#x3D;&#39;RGB&#39;)\n \n    def rndChar():\n        &quot;&quot;&quot;\n        生成随机字母   \n        :return:\n        &quot;&quot;&quot;\n        return chr(random.randint(65, 90))\n \n    def rndColor():\n        &quot;&quot;&quot;\n        生成随机颜色\n        :return:\n        &quot;&quot;&quot;\n        return (random.randint(0, 255), random.randint(10, 255), random.randint(64, 255))\n \n    # 写文字\n\tfont &#x3D; ImageFont.truetype(font_file, font_size)\n\tfor i in range(char_length):\n\t   char &#x3D; rndChar()\n\t   code.append(char)\n\t   h &#x3D; random.randint(0, 4)\n\t   draw.text([i * width &#x2F; char_length, h], char, font&#x3D;font, fill&#x3D;rndColor())\n \n    # 写干扰点\n   point_chance &#x3D; random.randint(0, 200)\n   chance &#x3D; min(200, max(0, point_chance)) # 大小限制在[0, 100]\n   for w in range(0， width， 10):\n       for h in range(0， height， 10):\n           tmp &#x3D; random.randint(0, 50)\n           if tmp &gt; 200 - chance:\n               draw.point((w, h), fill&#x3D;(0, 0, 0))\n    # 写干扰圆圈\n    for i in range(40):\n        draw.point([random.randint(0, width), random.randint(0, height)], fill&#x3D;rndColor())\n        x &#x3D; random.randint(0, width)\n        y &#x3D; random.randint(0, height)\n        draw.arc((x, y, x + 4, y + 4), 0, 90, fill&#x3D;rndColor())\n \n    # 画干扰线\n   line_num &#x3D; random.randint(0, 3)  # 干扰线条数\n   for i in range(line_num):\n       # 起始点\n       begin &#x3D; (random.randint(0, width), random.randint(0, height))\n       # 结束点\n       end &#x3D; (random.randint(0, width), random.randint(0, height))\n       draw.line([begin, end], fill&#x3D;rndColor())\n\t# 添加模糊效果\n    img &#x3D; img.filter(ImageFilter.EDGE_ENHANCE_MORE)\n    return img,&#39;&#39;.join(code)\n \n \nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    #  写入文件\n    img,code &#x3D; check_code()\n    with open(&#39;code.png&#39;,&#39;wb&#39;) as f:\n        img.save(f,format&#x3D;&#39;png&#39;)</code></pre></li>\n</ul>\n<h4 id=\"互联网API接口\"><a href=\"#互联网API接口\" class=\"headerlink\" title=\"互联网API接口\"></a>互联网API接口</h4><ul>\n<li>空心字体<a href=\"https://login.sina.com.cn/cgi/pin.php?r=9967937&s=0&p=gz-d0dc363f6a4523cbd602a5a10f00c59b4784\">https://login.sina.com.cn/cgi/pin.php?r=9967937&s=0&p=gz-d0dc363f6a4523cbd602a5a10f00c59b4784</a></li>\n<li>字母<a href=\"https://www.ruijie.com.cn/application/api/feedback/verificationcode?key=login&1666333612662\">https://www.ruijie.com.cn/application/api/feedback/verificationcode?key=login&1666333612662</a></li>\n<li>数字<a href=\"http://partners.ruijie.com.cn/ImageCode.aspx?type=bottom&timestamp=1666333641761\">partners.ruijie.com.cn&#x2F;ImageCode.aspx?type&#x3D;bottom&amp;timestamp&#x3D;1666333641761</a></li>\n</ul>\n<h2 id=\"0x07todo\"><a href=\"#0x07todo\" class=\"headerlink\" title=\"0x07todo\"></a>0x07todo</h2><h3 id=\"生成样本数据\"><a href=\"#生成样本数据\" class=\"headerlink\" title=\"生成样本数据\"></a>生成样本数据</h3><p>使用captcha批量生成随机验证码图片</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import os\nflag &#x3D;1\ncount &#x3D;0\nwhile flag:\n    count +&#x3D;1\n    print(count)\n    if count &gt; 10000:\n        flag &#x3D; 0\n    depth &#x3D; &#39;python3 &#x2F;home&#x2F;EasyOCR&#x2F;examples&#x2F;captcha&#x2F;captcha2.py&#39;\n    os.system(depth)</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将生成验证码拷贝到文件夹\nfind -name &quot;*.jpg&quot; | xargs -i mv &#123;&#125; &#x2F;tmp&#x2F;simple\n# 删除\nrm -rf *.jpg</code></pre>\n<h3 id=\"自定义识别模型\"><a href=\"#自定义识别模型\" class=\"headerlink\" title=\"自定义识别模型\"></a>自定义识别模型</h3><p><a href=\"https://github.com/JaidedAI/EasyOCR/blob/master/custom_model.md\">自定义识别模型</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># model和user_network路径\n&#x2F;root&#x2F;.EasyOCR</code></pre>\n<h3 id=\"Craft训练\"><a href=\"#Craft训练\" class=\"headerlink\" title=\"Craft训练\"></a>Craft训练</h3><p><a href=\"https://github.com/JaidedAI/EasyOCR/blob/master/trainer/craft/README.md\">EasyOCR&#x2F;README.md at master · JaidedAI&#x2F;EasyOCR · GitHub</a></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://www.bilibili.com/read/cv16911816\">我在B站学习图像处理之使用EasyOCR库对行程码图片进行批量OCR文字识别 - 哔哩哔哩</a><br><a href=\"https://www.bilibili.com/read/cv8446576#:~:text=%E8%AF%86%E5%88%AB%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%20tesseROCr%20%E8%BF%99%E4%B8%AA%E5%BA%93%EF%BC%8C%E4%B8%8B%E9%9D%A2%E4%BB%8B%E7%BB%8D%E4%B8%8BtesseROCr%EF%BC%9B,tesseROCr%E6%98%AFPython%E7%9A%84%E4%B8%80%E4%B8%AAOCR%E8%AF%86%E5%88%AB%E5%BA%93%EF%BC%8C%E4%BD%86%E5%85%B6%E5%AE%9E%E6%98%AF%E5%AF%B9tesseract%E5%81%9A%E4%BA%86%E4%B8%80%E5%B1%82Python%20Api%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%8C%20%E6%A0%B8%E5%BF%83%E8%BF%98%E6%98%AFtesseract%20%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%E5%AE%89%E8%A3%85tesseROCr%E4%B9%8B%E5%89%8D%EF%BC%8C%E9%9C%80%E8%A6%81%E5%85%88%E5%AE%89%E8%A3%85tesseract%3B\">Python破解图形验证码，学会即可爬取大部分网站！ - 哔哩哔哩</a><br><a href=\"https://zhuanlan.zhihu.com/p/181525305\">Python第三方库巧用，制作图片验证码只需三行代码 - 知乎</a><br><a href=\"https://blog.csdn.net/laowangism/article/details/111578057\">使用pillow生成图形验证码_pyers的博客-CSDN博客_pillow 验证码</a><br><a href=\"https://zhuanlan.zhihu.com/p/110647131\">使用Tesseract做文字识别（OCR） - 知乎</a><br><a href=\"https://zhuanlan.zhihu.com/p/265359676\">对比了最常见的几家开源OCR框架，我发现了最好的开源模型 - 知乎</a><br><a href=\"https://zhuanlan.zhihu.com/p/384384306\">文字识别OCR开源框架的对比–Tesseract vs EasyOCR - 知乎</a></p>\n","feature":true,"text":"EasyOCR0x01简介描述: EasyOCR 是一个用于从图像中提取文本的 python 模块, 它是一种通用的 OCR，既可以读取自然场景文本，也可以读取文档中的密集文本。目前支持 80 多种语言和所有流行的书写脚本，包括：拉丁文、中文、阿拉伯文、梵文、西里尔文等。除官网的...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"人工智能","slug":"人工智能","count":1,"path":"api/categories/人工智能.json"}],"tags":[{"name":"OCR","slug":"OCR","count":1,"path":"api/tags/OCR.json"},{"name":"深度学习","slug":"深度学习","count":1,"path":"api/tags/深度学习.json"},{"name":"神经网络","slug":"神经网络","count":1,"path":"api/tags/神经网络.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#EasyOCR\"><span class=\"toc-text\">EasyOCR</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x01简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%F0%9F%9A%80Link%EF%BC%9A\"><span class=\"toc-text\">🚀Link：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02%E6%9E%B6%E6%9E%84%E5%9B%BE\"><span class=\"toc-text\">0x02架构图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B\"><span class=\"toc-text\">0x03核心能力</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04%E5%AF%B9%E6%AF%94Tesseract\"><span class=\"toc-text\">0x04对比Tesseract</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05Quickstart\"><span class=\"toc-text\">0x05Quickstart</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#require\"><span class=\"toc-text\">require</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#install\"><span class=\"toc-text\">install</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#install-docker\"><span class=\"toc-text\">install -docker</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x06EasyOCR%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">0x06EasyOCR使用说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">图形验证码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%80%9A%E8%BF%87captcha%E5%BA%93%E7%94%9F%E6%88%90%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">1. 通过captcha库生成图形验证码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-gvcode%E5%BA%93\"><span class=\"toc-text\">2. gvcode库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Pillow%E5%BA%93\"><span class=\"toc-text\">3.  Pillow库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%92%E8%81%94%E7%BD%91API%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">互联网API接口</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x07todo\"><span class=\"toc-text\">0x07todo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%A0%B7%E6%9C%AC%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">生成样本数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">自定义识别模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Craft%E8%AE%AD%E7%BB%83\"><span class=\"toc-text\">Craft训练</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"k8s分布式系统视角下重新学习","uid":"ce038301b34a6d4d69c83e210fe584c3","slug":"k8s分布式系统视角下重新学习","date":"2022-10-25T01:27:40.674Z","updated":"2022-10-26T09:22:49.037Z","comments":true,"path":"api/articles/k8s分布式系统视角下重新学习.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159414/4k-backlit-dawn-wallpapers-159414-29514-9093492.png","text":"概述官网地址 Kubernetes是什么?官网地址 时光回溯[[History of cloud]] 传统部署时代例如：安装Oracle 针对操作系统准备安装包(下载或者U盘拷贝) 安装Oracle需要的基础类库 配置操作系统的相应配置 执行安装检查，安装命令 安装失败之后，要完...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"Cloud-Native","slug":"Cloud-Native","count":1,"path":"api/categories/Cloud-Native.json"}],"tags":[{"name":"k8s","slug":"k8s","count":1,"path":"api/tags/k8s.json"},{"name":"分布式系统","slug":"分布式系统","count":1,"path":"api/tags/分布式系统.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"代码托管平台的软件供应链安全能力介绍","uid":"139cfafc4597f90b4e444ece2c228d13","slug":"github的软件供应链安全能力","date":"2022-09-23T05:36:00.000Z","updated":"2022-10-26T07:58:14.718Z","comments":true,"path":"api/articles/github的软件供应链安全能力.json","keywords":null,"cover":"https://source.unsplash.com/pOwKTIgjKjU/1200x628","text":"github的软件供应链安全能力GitHub关于Dependabot安全更新Dependabot安全更新使您更容易修复存储库中的易受攻击的依赖项。如果您启用此功能，当在存储库的依赖关系图中为易受攻击的依赖项引发依赖项时，Dependabot会自动尝试修复它。有关更多信息，请参阅“...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"软件供应链安全","slug":"软件供应链安全","count":11,"path":"api/tags/软件供应链安全.json"},{"name":"Github","slug":"Github","count":1,"path":"api/tags/Github.json"},{"name":"Gitlab","slug":"Gitlab","count":1,"path":"api/tags/Gitlab.json"},{"name":"Dependabot","slug":"Dependabot","count":1,"path":"api/tags/Dependabot.json"},{"name":"Dependency-scanning","slug":"Dependency-scanning","count":1,"path":"api/tags/Dependency-scanning.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"分布式系统学习","uid":"1ab18743769cc5b4fe58b2f1026856c9","slug":"分布式系统","date":"2022-05-05T07:42:08.000Z","updated":"2022-10-27T02:51:29.561Z","comments":true,"path":"api/articles/分布式系统.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-909810-8416989.png","content":"<h1 id=\"直观的感受\"><a href=\"#直观的感受\" class=\"headerlink\" title=\"直观的感受\"></a>直观的感受</h1><h2 id=\"区块链\"><a href=\"#区块链\" class=\"headerlink\" title=\"区块链\"></a>区块链</h2><ul>\n<li>比特币</li>\n<li>以太坊<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>一个词来描述分布式系统：分而治之</strong></p></blockquote>\n</li>\n</ul>\n<h1 id=\"分布式系统的前世今生\"><a href=\"#分布式系统的前世今生\" class=\"headerlink\" title=\"分布式系统的前世今生\"></a>分布式系统的前世今生</h1><p>分布式系统看起来就像一个计算机。计算机包括五大体系结构（即冯诺依曼结构），它有五大部件：<strong>分别是控制器、运算器、存储器、输入及输出。</strong> 你可以这么理解：一个分布式系统也包含这五大部件，其中最重要的是计算与存储。计算与存储由一系列网络节点组成，每个节点之间的通信就是输入与输出，各节点之间的调度管理就是控制器。</p>\n<ul>\n<li><p><strong>存储器</strong> ，即分布式存储系统，如 NoSQL 数据库存储；[[分布式系统#分布式存储]]</p>\n</li>\n<li><p><strong>运算器</strong> ，即分布式计算，如分布式并行计算；[[分布式系统#分布式计算]]</p>\n</li>\n<li><p><strong>输入输出</strong> ，即分布式系统通信，如同步 RPC 调用和异步消息队列；[[分布式系统#分布式消息队列]]</p>\n</li>\n<li><p><strong>控制器</strong> ，即调度管理，如流量调度、任务调度与资源调度。如Quartz、XXL-JOB、Elastic-Job、Apache DolphinScheduler[[Centos7安装azkaban]]等</p>\n</li>\n</ul>\n<h2 id=\"C-x2F-S-架构和-B-x2F-S-架构\"><a href=\"#C-x2F-S-架构和-B-x2F-S-架构\" class=\"headerlink\" title=\"C&#x2F;S 架构和 B&#x2F;S 架构\"></a>C&#x2F;S 架构和 B&#x2F;S 架构</h2><ul>\n<li><p><img src=\"http://img.moses.wang/20220615104346.png\"></p>\n</li>\n<li><p><img src=\"http://img.moses.wang/20220615104350.png\"></p>\n</li>\n</ul>\n<h2 id=\"C-x2F-S-缺点\"><a href=\"#C-x2F-S-缺点\" class=\"headerlink\" title=\"C&#x2F;S 缺点\"></a>C&#x2F;S 缺点</h2><ul>\n<li>平台兼容性Windows，Linux</li>\n<li>例如有些只能运行在 windows 上，需针对不同的平台开发不同的版本</li>\n<li>版本更新和版本兼容性</li>\n<li>大型网络游戏，更新的期间，必须完成才能继续游戏。魔兽世界，原神</li>\n<li>业务安全：例如吃鸡，各种运行在客户端的外挂</li>\n</ul>\n<h2 id=\"B-x2F-S-缺点\"><a href=\"#B-x2F-S-缺点\" class=\"headerlink\" title=\"B&#x2F;S 缺点\"></a>B&#x2F;S 缺点</h2><ul>\n<li>业务逻辑在后端服务器执行，需要服务提供方提供已将资源。</li>\n</ul>\n<h2 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h2><p><strong>CAP理论：</strong>  C（Consistency）是<code>数据一致性</code>、A（Availability）是<code>服务可用性</code>、P（Partition tolerance）是<code>分区容错性</code>。C、A、P 只能同时满足两个目标，而由于在分布式系统中，P 是必须要保留的，所以要在 C 和 A 间进行取舍。<br>假如要保证<strong>服务的可用性</strong>，就选择 <code>AP 模型</code>，而要保证<strong>一致性</strong>的话，就选择 <code>CP 模型</code>。<br><img src=\"http://img.moses.wang/20220615112637.png\"><br><img src=\"http://img.moses.wang/20220615104754.png\"></p>\n<h3 id=\"理论理解\"><a href=\"#理论理解\" class=\"headerlink\" title=\"理论理解\"></a>理论理解</h3><p>现在有一个分布式系统 A，它有一个副本 A1，在正常情况下，客户端 Client 写数据到系统 A，然后数据从 A 节点同步到 A1 节点，再返回给 Client 成功状态。<br><img src=\"http://img.moses.wang/20220615134648.png\"><br>这时，客户端 Client 从任何节点 A 或 A1 读取数据，都能读取到最新写入的数据，说明 A 和 A1 的数据是一致的，并且 A 和 A1 也都是可用的。<br>但由于网络是不可靠的，节点 A 和 A1 的网络随时会因为中断而出现分区。<code>所谓网络分区就是由于网络不通导致节点 A 和 A1 被隔离在不同的网络子集中，此时节点 A 的数据就不能及时同步到节点 A1 中了。</code><br><img src=\"http://img.moses.wang/20220615134715.png\"><br>在分布式系统中，由于网络问题导致的网络分区是常态。也就是说出现网络分区时，根据 CAP 理论，需要在 A 和 C 中进行取舍，即要么保证系统的可用性，要么保证数据一致性。</p>\n<h2 id=\"分布式系统的前提\"><a href=\"#分布式系统的前提\" class=\"headerlink\" title=\"分布式系统的前提\"></a>分布式系统的前提</h2><p>软件按照既定的设计方案正常运行的情况下，解决复杂的业务场景。</p>\n<ul>\n<li>既定的设计方案<strong>会考虑</strong><br>  - 网络异常。<br>  - 服务器宕机。<br>  - 进程崩溃等。</li>\n<li>既定的世界方案<strong>不考虑</strong><br>  - 人为的恶意修改，例如恶意攻击。<br>  - 代码漏洞。</li>\n<li>概念<ul>\n<li>建立在网络之上的软件系统。</li>\n<li>软件组件分布在不同的网络计算机上。</li>\n<li>软件组件之间的通信通过网络来完成。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分布式系统的扩展\"><a href=\"#分布式系统的扩展\" class=\"headerlink\" title=\"分布式系统的扩展\"></a>分布式系统的扩展</h2><h3 id=\"x轴方向扩展\"><a href=\"#x轴方向扩展\" class=\"headerlink\" title=\"x轴方向扩展\"></a>x轴方向扩展</h3><p><img src=\"http://img.moses.wang/20220615104356.png\"></p>\n<h4 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h4><p><strong>为了解决单机无法满足大量并发请求。</strong></p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>对同一个应用扩展出多个副本。</li>\n<li>需要配置负载均衡将压力分散到不同的副本，可以将请求分发到任意一个副本。</li>\n<li>需要应用是无状态的，即可以随时下线，可以随时扩展出新的副本。</li>\n</ul>\n<h4 id=\"瓶颈\"><a href=\"#瓶颈\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h4><p> 负责管理状态的数缓存或者数据库这一层的处理能力会逐渐达到上线，通用需要可以水平扩展。</p>\n<h3 id=\"y轴方向扩展\"><a href=\"#y轴方向扩展\" class=\"headerlink\" title=\"y轴方向扩展\"></a>y轴方向扩展</h3><h4 id=\"解决的问题-1\"><a href=\"#解决的问题-1\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h4><p><strong>为了解决x周扩展的数据缓存层和数据库层的处理能力的上限，支持数据库的水平扩展。</strong></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>按照业务领域拆分成多个应用。</li>\n<li>例如在电商系统中，商品详情页可能就是一个独立的子系统，有多层应用服务器、多层缓存机制、多个数据库组成，并且由一个庞大的部门独立维护者。</li>\n</ul>\n<h4 id=\"瓶颈-1\"><a href=\"#瓶颈-1\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h4><p>** 即便是按业务领域拆分后，某个极小的领域仍旧有海量数据要管理，数据库仍旧有瓶颈。例如大型电商的订单系统。**</p>\n<h3 id=\"z轴方向扩展\"><a href=\"#z轴方向扩展\" class=\"headerlink\" title=\"z轴方向扩展\"></a>z轴方向扩展</h3><h4 id=\"解决的问题-2\"><a href=\"#解决的问题-2\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h4><p><strong>解决拆分的某一个极小业务领域的海量数据无法靠单个数据库承载的问题。</strong></p>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>对某一领域的数据做分片。</li>\n<li>需要有数据读写的分片路由规则。</li>\n<li>分片的动态扩展。</li>\n</ul>\n<h4 id=\"瓶颈-2\"><a href=\"#瓶颈-2\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h4><p> <strong>🤦‍♂️如何把数据保存到多台服务器上</strong></p>\n<ul>\n<li>1.仍旧视同关系型数据库，做分库分表。这种架构的难点是当分库分表规则发生变化时的数据迁移问题。<ul>\n<li><strong>数据迁移：</strong><ul>\n<li>全量的数据迁移，分片路由算法一般是根据某个id取余。</li>\n<li>部分数据的迁移，分片路由算法可以用一致性哈希。</li>\n</ul>\n</li>\n<li><strong>数据查询：</strong><ul>\n<li>有些复杂查询，会在多个数据库服务器上执行sql，然后合并执行结果，需要处理各种异常。</li>\n<li>像分页等查询，涉及到大量数据的归并，存在效率问题。</li>\n</ul>\n</li>\n<li><strong>开源数据库中间件</strong><ul>\n<li>仅在编码层面解决了面向多数据编程的问题，核心思路仍旧是多个sql在不同的数据库服务器上执行。</li>\n</ul>\n</li>\n<li><strong>最重要的一个难题是，这种架构保证数据的一致性很有挑战。</strong></li>\n</ul>\n</li>\n<li>2.放弃SQL的便利性，采用分布式文件系统保存海量数据。<ul>\n<li>可以使用HDFS存储数据，HDFS提供了可靠的数据存储能力和强一致性。</li>\n</ul>\n</li>\n<li>3.在在线服务(OLTP)方面，我们可以采用NoSQL数据库来存储数据。</li>\n<li>4.使用NewSQL数据库。NewSQL并没有去掉对SQL的支持，同时具备良好的水平扩展能力、可靠性和可用性。<ul>\n<li>当系统在z轴上支持水平扩展后，整个系统就彻底成为一个分布式系统。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分布式系统现状\"><a href=\"#分布式系统现状\" class=\"headerlink\" title=\"分布式系统现状\"></a>分布式系统现状</h2><ul>\n<li>目前应用层的分布式技术已经相对成熟，虚拟化技术、容器技术（Docker），网格服务（service mesh）已经成熟并且大面积落地。</li>\n<li>相对而言，数据库分布式技术的成熟度远不如应用程程序的分布式技术，大部分公司仍旧以分库分表为主。</li>\n<li>无论哪一种数据层的分布式技术，最难的攻克莫过于分布式系统的一致性。</li>\n</ul>\n<h2 id=\"分布式系统面临的问题\"><a href=\"#分布式系统面临的问题\" class=\"headerlink\" title=\"分布式系统面临的问题\"></a>分布式系统面临的问题</h2><ul>\n<li>通信异常：网络本身是不可靠的。</li>\n<li>网络分区：网络与网络之间出现无法通信的情况，但是子网内部的网咯是正常的。</li>\n<li>节点故障：硬件故障，节点的操作系统崩溃。</li>\n<li>三种请求应答状态：成功，失败和超时。</li>\n</ul>\n<h2 id=\"分布式式系统的一致性\"><a href=\"#分布式式系统的一致性\" class=\"headerlink\" title=\"分布式式系统的一致性\"></a>分布式式系统的一致性</h2><p> 定义： 分布式数据一致性是指，<strong>数据在不同的节点上存在多个副本时，各副本的数据是一致的，即相同副本的数据无差异。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> BASE 理论，它是 CAP 理论的延伸。BASE 是 <code>Basically Available</code>（基本可用）、<code>Soft State</code>（软状态）和 <code>Eventually Consistent</code>（最终一致性）三个单词的简写，作用是保证系统的可用性，然后通过最终一致性来代替强一致性，它是目前分布式系统设计中最具指导意义的经验总结。</p></blockquote>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"强一致性\"><a href=\"#强一致性\" class=\"headerlink\" title=\"强一致性\"></a>强一致性</h4><p> 要求对分布式系统写入A，从分布式系统中读出的也是A。即存在一个全局性的写入，读取的严格先后顺序。</p>\n<h4 id=\"弱一致性\"><a href=\"#弱一致性\" class=\"headerlink\" title=\"弱一致性\"></a>弱一致性</h4><ul>\n<li>读写一致性： 保证用户能够第一时间读取到自己更改的数据。</li>\n<li>单调读一致性： 当前读到的数据，不能比上次到的数据旧，却不要求当前读到的一定是最新的。</li>\n<li>因果一致性：当节点A在更新完数据X&#x3D;10通知到B节点，那么B节点之后针对X的读取和修改都需要基于X&#x3D;10这个前提下，同时，如果A节点未同步X&#x3D;10到C节点，C节点在读取X时，不受X&#x3D;10这个前提限制。</li>\n<li>最终一致性：顾名思义，数据在不同的节点间，经过一定的时间后，最终会达成一致。</li>\n</ul>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>BASE 中的基本可用指的是保障核心功能的基本可用，其实是做了“可用性”方面的妥协，比如：</p>\n<ul>\n<li><p>电商网站在双十一大促等访问压力较大的时候，关闭商品排行榜等次要功能的展示，从而保证商品交易主流程的可用性，这也是我们常说的<code>服务降级</code>；</p>\n</li>\n<li><p>为了错开双十一高峰期，电商网站会将预售商品的支付时间延后十到二十分钟，这就是<code>流量削峰</code>；</p>\n</li>\n<li><p>在你抢购商品的时候，往往会在队列中等待处理，这也是常用的<code>延迟队列</code>。<br>软状态和最终一致性指的是允许系统中的数据存在中间状态，这同样是为了系统可用性而牺牲一段时间窗内的数据一致性，从而保证最终的数据一致性的做法。</p>\n</li>\n</ul>\n<p>目前这种处理数据的方式几乎成了互联网的标配设计模式，最经典的例子是在用户下单的时候不需要真正地扣减库存，而是仅在前台计个数，然后通过异步任务在后台批量处理。</p>\n<h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><ul>\n<li>要满足事务的基本特性ACID</li>\n<li>分布式事务相对于本地事务而言，表现形式会有所不同。</li>\n</ul>\n<h2 id=\"分布式系统分类\"><a href=\"#分布式系统分类\" class=\"headerlink\" title=\"分布式系统分类\"></a>分布式系统分类</h2><h3 id=\"分布式存储\"><a href=\"#分布式存储\" class=\"headerlink\" title=\"分布式存储\"></a>分布式存储</h3><h4 id=\"Google-文件系统\"><a href=\"#Google-文件系统\" class=\"headerlink\" title=\"Google 文件系统\"></a>Google 文件系统</h4><h5 id=\"操作与职责\"><a href=\"#操作与职责\" class=\"headerlink\" title=\"操作与职责\"></a>操作与职责</h5><ul>\n<li>创建元数据，例如文件的位置，大小，名称等交给 master 来处理。</li>\n<li>写数据交给 chunk server 来处理，client 直接提交 数据给 chunk server。</li>\n<li>通过 primary replica 来控制 chunk server对某个数据文件的并发写入。</li>\n</ul>\n<h5 id=\"GFS-松弛一致性\"><a href=\"#GFS-松弛一致性\" class=\"headerlink\" title=\"GFS 松弛一致性\"></a>GFS 松弛一致性</h5><ul>\n<li>一致性的解释：client 无论从哪个副本读取数据，看到的总是相同的数据，这称为一致性。</li>\n<li>元数据的一致性</li>\n<li>文件数据的一致性</li>\n</ul>\n<h4 id=\"HDFS（Hadoop-Distributed-File-System）\"><a href=\"#HDFS（Hadoop-Distributed-File-System）\" class=\"headerlink\" title=\"HDFS（Hadoop Distributed File System）\"></a>HDFS（Hadoop Distributed File System）</h4><h5 id=\"HDFS-的架构\"><a href=\"#HDFS-的架构\" class=\"headerlink\" title=\"HDFS 的架构\"></a>HDFS 的架构</h5><p><img src=\"http://img.moses.wang/20220615105242.png\"></p>\n<h5 id=\"HDFS-的-pipeline\"><a href=\"#HDFS-的-pipeline\" class=\"headerlink\" title=\"HDFS 的 pipeline\"></a>HDFS 的 pipeline</h5><p> <img src=\"http://img.moses.wang/20220615105246.png\"><br> <img src=\"http://img.moses.wang/20220615105249.png\"></p>\n<h3 id=\"分布式数据库\"><a href=\"#分布式数据库\" class=\"headerlink\" title=\"分布式数据库\"></a>分布式数据库</h3><h4 id=\"Google-的-BigTable\"><a href=\"#Google-的-BigTable\" class=\"headerlink\" title=\"Google 的 BigTable\"></a>Google 的 BigTable</h4><ul>\n<li><p>BigTable 的数据模型<br><img src=\"http://img.moses.wang/20220615105349.png\"></p>\n</li>\n<li><p>带时间戳的 BigTable 数据模型<br><img src=\"http://img.moses.wang/20220615105352.png\"></p>\n</li>\n<li><p>行级原子性</p>\n</li>\n<li><p>BigTable 的架构</p>\n<ul>\n<li>GFS</li>\n<li>chubby<ul>\n<li>Google 公司内部的分布式锁服务。</li>\n</ul>\n</li>\n<li>client</li>\n<li>master<ul>\n<li>负责把一个 tablet 指派给一个 tablet server</li>\n</ul>\n</li>\n<li>tablet server<ul>\n<li>BigTable 会为每个 tablet 指定一个 tablet server</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HBase [[020-bigdata&#x2F;数据仓库&#x2F;HBase&#x2F;HBase]]</p>\n</li>\n<li><p>MongoDB</p>\n</li>\n</ul>\n<h3 id=\"分布式计算\"><a href=\"#分布式计算\" class=\"headerlink\" title=\"分布式计算\"></a>分布式计算</h3><ul>\n<li>Hadoop（Map Reduce）</li>\n<li>Spark（批处理 + 实时处理）</li>\n<li>Flink（实时处理）</li>\n</ul>\n<h3 id=\"分布式消息队列\"><a href=\"#分布式消息队列\" class=\"headerlink\" title=\"分布式消息队列\"></a>分布式消息队列</h3><ul>\n<li>Kafka</li>\n<li>RabbitMQ</li>\n<li>RocketMQ</li>\n</ul>\n<h3 id=\"分布式机器学习\"><a href=\"#分布式机器学习\" class=\"headerlink\" title=\"分布式机器学习\"></a>分布式机器学习</h3><ul>\n<li>Spark ML</li>\n<li>分布式 TensorFlow</li>\n</ul>\n<h1 id=\"携程架构实践\"><a href=\"#携程架构实践\" class=\"headerlink\" title=\"携程架构实践\"></a>携程架构实践</h1><p><img src=\"http://img.moses.wang/20220615141714.png\"><br><img src=\"http://img.moses.wang/20220615141743.png\"></p>\n","text":"直观的感受区块链 比特币 以太坊 一个词来描述分布式系统：分而治之 分布式系统的前世今生分布式系统看起来就像一个计算机。计算机包括五大体系结构（即冯诺依曼结构），它有五大部件：分别是控制器、运算器、存储器、输入及输出。 你可以这么理解：一个分布式系统也包含这五大部件，其中最重要的...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"分布式","slug":"分布式","count":6,"path":"api/categories/分布式.json"}],"tags":[{"name":"分布式数据库","slug":"分布式数据库","count":1,"path":"api/tags/分布式数据库.json"},{"name":"分布式存储","slug":"分布式存储","count":1,"path":"api/tags/分布式存储.json"},{"name":"分布式计算","slug":"分布式计算","count":1,"path":"api/tags/分布式计算.json"},{"name":"架构学习","slug":"架构学习","count":1,"path":"api/tags/架构学习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E8%A7%82%E7%9A%84%E6%84%9F%E5%8F%97\"><span class=\"toc-text\">直观的感受</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%9D%97%E9%93%BE\"><span class=\"toc-text\">区块链</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F\"><span class=\"toc-text\">分布式系统的前世今生</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-x2F-S-%E6%9E%B6%E6%9E%84%E5%92%8C-B-x2F-S-%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">C&#x2F;S 架构和 B&#x2F;S 架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-x2F-S-%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">C&#x2F;S 缺点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-x2F-S-%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">B&#x2F;S 缺点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">边界</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%AE%BA%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">理论理解</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%89%8D%E6%8F%90\"><span class=\"toc-text\">分布式系统的前提</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">分布式系统的扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#x%E8%BD%B4%E6%96%B9%E5%90%91%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">x轴方向扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决的问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%93%B6%E9%A2%88\"><span class=\"toc-text\">瓶颈</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#y%E8%BD%B4%E6%96%B9%E5%90%91%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">y轴方向扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98-1\"><span class=\"toc-text\">解决的问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-1\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%93%B6%E9%A2%88-1\"><span class=\"toc-text\">瓶颈</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#z%E8%BD%B4%E6%96%B9%E5%90%91%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">z轴方向扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98-2\"><span class=\"toc-text\">解决的问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9-2\"><span class=\"toc-text\">特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%93%B6%E9%A2%88-2\"><span class=\"toc-text\">瓶颈</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%8E%B0%E7%8A%B6\"><span class=\"toc-text\">分布式系统现状</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%9D%A2%E4%B8%B4%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">分布式系统面临的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7\"><span class=\"toc-text\">分布式式系统的一致性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7\"><span class=\"toc-text\">强一致性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%B1%E4%B8%80%E8%87%B4%E6%80%A7\"><span class=\"toc-text\">弱一致性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">实践</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">分布式事务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分布式系统分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">分布式存储</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Google-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">Google 文件系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E4%B8%8E%E8%81%8C%E8%B4%A3\"><span class=\"toc-text\">操作与职责</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#GFS-%E6%9D%BE%E5%BC%9B%E4%B8%80%E8%87%B4%E6%80%A7\"><span class=\"toc-text\">GFS 松弛一致性</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HDFS%EF%BC%88Hadoop-Distributed-File-System%EF%BC%89\"><span class=\"toc-text\">HDFS（Hadoop Distributed File System）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#HDFS-%E7%9A%84%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">HDFS 的架构</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#HDFS-%E7%9A%84-pipeline\"><span class=\"toc-text\">HDFS 的 pipeline</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">分布式数据库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Google-%E7%9A%84-BigTable\"><span class=\"toc-text\">Google 的 BigTable</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">分布式计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">分布式消息队列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">分布式机器学习</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%90%BA%E7%A8%8B%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">携程架构实践</span></a></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"软件供应链安全分析工具-墨菲","uid":"f48e91bff7d0e96d07d9f87de6bb94df","slug":"软件供应链安全-墨菲安全","date":"2022-05-29T12:26:00.000Z","updated":"2022-10-26T08:42:37.287Z","comments":true,"path":"api/articles/软件供应链安全-墨菲安全.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159447/abstract-ink-wallpapers-159447-4210-1742701.png","text":"软件供应链安全-墨菲安全简介墨菲安全的 CLI 工具，用于在命令行检测指定目录代码的依赖安全问题，也可以基于 CLI 工具实现在 CI 流程的检测。 支持的语言 语言 包管理工具 支持情况 ❗️完整检测的环境要求 Java Maven ✅ 可通过 Maven 在本地成功构建项目 J...","link":"","photos":[],"count_time":{"symbolsCount":971,"symbolsTime":"1 mins."},"categories":[{"name":"软件供应链安全","slug":"软件供应链安全","count":26,"path":"api/categories/软件供应链安全.json"}],"tags":[{"name":"SCA","slug":"SCA","count":15,"path":"api/tags/SCA.json"},{"name":"软件成分分析工具","slug":"软件成分分析工具","count":5,"path":"api/tags/软件成分分析工具.json"},{"name":"墨菲安全","slug":"墨菲安全","count":1,"path":"api/tags/墨菲安全.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"熔断、超时、限流和服务降级的概念梳理","uid":"413e999854a8918e45b13a69d229a398","slug":"熔断、超时、限流和服务降级","date":"2022-05-05T07:42:08.000Z","updated":"2022-10-27T03:00:16.565Z","comments":true,"path":"api/articles/熔断、超时、限流和服务降级.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-910142-2825240.png","text":"服务熔断解决的问题 解决微服务架构下，系统间调用链路的雪崩，避免造成整个微服务体系崩溃。类似电路过载的保险丝。 技术、架构类问题的解决方案，多数研发和运维参与。 从局部出发，各自解决问题，被动防御。 造成链路调用雪崩的原因 调用链的某一环节，例如APP-D出现性能瓶颈，导致依赖该...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"分布式","slug":"分布式","count":6,"path":"api/categories/分布式.json"},{"name":"微服务","slug":"分布式/微服务","count":3,"path":"api/categories/分布式/微服务.json"}],"tags":[{"name":"服务限流","slug":"服务限流","count":2,"path":"api/tags/服务限流.json"},{"name":"服务熔断","slug":"服务熔断","count":1,"path":"api/tags/服务熔断.json"},{"name":"服务降级","slug":"服务降级","count":1,"path":"api/tags/服务降级.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
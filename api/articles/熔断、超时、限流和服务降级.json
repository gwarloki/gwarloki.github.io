{"title":"熔断、超时、限流和服务降级的概念梳理","uid":"413e999854a8918e45b13a69d229a398","slug":"熔断、超时、限流和服务降级","date":"2022-05-05T07:42:08.000Z","updated":"2022-10-27T03:00:16.565Z","comments":true,"path":"api/articles/熔断、超时、限流和服务降级.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-910142-2825240.png","content":"<h1 id=\"服务熔断\"><a href=\"#服务熔断\" class=\"headerlink\" title=\"服务熔断\"></a>服务熔断</h1><h2 id=\"解决的问题\"><a href=\"#解决的问题\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h2><ul>\n<li>解决微服务架构下，系统间调用链路的雪崩，避免造成整个微服务体系崩溃。类似电路过载的保险丝。</li>\n<li>技术、架构类问题的解决方案，多数研发和运维参与。</li>\n<li>从局部出发，各自解决问题，被动防御。</li>\n</ul>\n<h2 id=\"造成链路调用雪崩的原因\"><a href=\"#造成链路调用雪崩的原因\" class=\"headerlink\" title=\"造成链路调用雪崩的原因\"></a>造成链路调用雪崩的原因</h2><ul>\n<li>调用链的某一环节，例如APP-D出现性能瓶颈，导致依赖该环节的前置业务系统长时间无法获得获得响应，无法释放资源，随着请求数量不断增加，占用的资源会越来越多，最终导致整个微服务系统崩溃。<br>  <img src=\"http://img.moses.wang/20220615145356.png\"></li>\n</ul>\n<h2 id=\"现有的实现方案\"><a href=\"#现有的实现方案\" class=\"headerlink\" title=\"现有的实现方案\"></a>现有的实现方案</h2><ul>\n<li>SpringCloud 框架，通过 <code>Hystrix</code> 实现。Hystrix 会监控对微服务的调用情况，当针对某一微服务的调用失败次数达到阈值时（例如 5 秒内 20 次失败），就会启动熔断保护。<br><img src=\"http://img.moses.wang/20220615145510.png\"></li>\n<li>Istio envy 熔断[[istio]]</li>\n<li>其他设计考量<ul>\n<li>如何判被调用的某个微服务是不稳定的？</li>\n<li>在某个微服务稳定后，如何退出熔断保护？</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"服务超时\"><a href=\"#服务超时\" class=\"headerlink\" title=\"服务超时\"></a>服务超时</h1><h2 id=\"解决的问题-1\"><a href=\"#解决的问题-1\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h2><p>在请求使用某一资源时，请求方有对从发出请求到获得资源的时间长短，有<strong>容忍度的区间上限</strong>。不避免在一件事情上过渡消耗资源，及时止损。</p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><pre><code>    - 建立连接超时\n    - 写入、读取数据超时\n</code></pre>\n<h2 id=\"举例描述\"><a href=\"#举例描述\" class=\"headerlink\" title=\"举例描述\"></a>举例描述</h2><ul>\n<li>不超时通俗举例：望夫崖，一等等千千万万载，风雨中，边化作石块。</li>\n<li>超时举例：假如非要给这份爱情加上一个期限的话，我希望是一万年。只是超时时间比较长😅</li>\n</ul>\n<h1 id=\"服务限流\"><a href=\"#服务限流\" class=\"headerlink\" title=\"服务限流\"></a>服务限流</h1><h2 id=\"解决的问题-2\"><a href=\"#解决的问题-2\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h2><ul>\n<li>抽象描述:某个或某类资源<strong>有限</strong>且往往在使用这些资源时是<strong>独占</strong>的，在短时间内出现大量申请（<strong>高并发</strong>）使用资源的请求，会因无法及时分配和回收资源，导致业务阻塞，并进一步加剧使用资源请求的频次和数量，最终导致系统崩溃。</li>\n<li>场景<ul>\n<li>合理，重要的资源申请被淹没。  –急救，重症无法及时获得医疗资源。</li>\n<li>频繁处理同一个申请的，浪费资源。 –如果餐厅取号不用手机号，无良食客可以取 n 个2 人桌，3 人桌，5 人桌。</li>\n<li>浪费资源申请者的资源。 –排队抢购，排了半天，轮到我买的时候，告诉我，早就卖完了。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"现有的实现方案-1\"><a href=\"#现有的实现方案-1\" class=\"headerlink\" title=\"现有的实现方案\"></a>现有的实现方案</h2><h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li>计数器[[固定时间窗口]]</li>\n<li>[[滑动时间窗口]]</li>\n<li>[[令牌桶]]</li>\n<li>[[漏桶算法]]</li>\n</ul>\n<h1 id=\"服务降级\"><a href=\"#服务降级\" class=\"headerlink\" title=\"服务降级\"></a>服务降级</h1><h2 id=\"解决的问题-3\"><a href=\"#解决的问题-3\" class=\"headerlink\" title=\"解决的问题\"></a>解决的问题</h2><ul>\n<li>在服务器等硬件资源有限的情况下，或者整个微服务体系能承载的业务量有限的情况下，将某些承载边缘业务的系统资源的部分或者全部，调度给承载核心业务的系统来使用，牺牲边缘业务业务的用户体验，来保障核心业务的可用性。</li>\n<li>业务抉择以及技术、架构类解决方案，需要协调运营，客服等一起参与。</li>\n<li>从全局视角，统筹解决问题，主动选择。</li>\n</ul>\n<h1 id=\"关系与区别\"><a href=\"#关系与区别\" class=\"headerlink\" title=\"关系与区别\"></a>关系与区别</h1><ul>\n<li>服务降级是业务和技术共同指定的的策略，这个策略的实施依赖于熔断、超时、限流等技术手段实现的业务链路保护机制。</li>\n<li>超时是针对发起调用方（Consumer）自身的业务和系统规划指定的对某一微服务的最大容忍度，超时策略由发起调用方制定。不同的调用方，可以针对同一个被调用方设置不同的超时策略。</li>\n<li>熔断是发起调用方（Consumer）是在不信任被调用方的稳定性，当被调用方服务不稳定时，避免给被调方雪上加霜，给被调用方恢复的机会。熔断策略由发起调用方制定。不同的调用方，可以针对同一个被调用方设置不同的熔断策略。</li>\n<li>限流是服务提供方（即被调用方，Provider），基于自身业务系统的特性，能对外提供的稳定或最大能力。限流策略由服务提供方制定。服务提供方针对不同的调用方，可以设置统一的或者差异化的限流策略。<br>  <img src=\"http://img.moses.wang/20220615150013.png\"></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/341939685\">服务降级与服务熔断区别 - 知乎</a></li>\n</ul>\n","text":"服务熔断解决的问题 解决微服务架构下，系统间调用链路的雪崩，避免造成整个微服务体系崩溃。类似电路过载的保险丝。 技术、架构类问题的解决方案，多数研发和运维参与。 从局部出发，各自解决问题，被动防御。 造成链路调用雪崩的原因 调用链的某一环节，例如APP-D出现性能瓶颈，导致依赖该...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"分布式","slug":"分布式","count":6,"path":"api/categories/分布式.json"},{"name":"微服务","slug":"分布式/微服务","count":3,"path":"api/categories/分布式/微服务.json"}],"tags":[{"name":"服务限流","slug":"服务限流","count":2,"path":"api/tags/服务限流.json"},{"name":"服务熔断","slug":"服务熔断","count":1,"path":"api/tags/服务熔断.json"},{"name":"服务降级","slug":"服务降级","count":1,"path":"api/tags/服务降级.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD\"><span class=\"toc-text\">服务熔断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">解决的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%A0%E6%88%90%E9%93%BE%E8%B7%AF%E8%B0%83%E7%94%A8%E9%9B%AA%E5%B4%A9%E7%9A%84%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">造成链路调用雪崩的原因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E6%9C%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">现有的实现方案</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">服务超时</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98-1\"><span class=\"toc-text\">解决的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%BE%8B%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">举例描述</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81\"><span class=\"toc-text\">服务限流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98-2\"><span class=\"toc-text\">解决的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E6%9C%89%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88-1\"><span class=\"toc-text\">现有的实现方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">算法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7\"><span class=\"toc-text\">服务降级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98-3\"><span class=\"toc-text\">解决的问题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">关系与区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"分布式系统学习","uid":"1ab18743769cc5b4fe58b2f1026856c9","slug":"分布式系统","date":"2022-05-05T07:42:08.000Z","updated":"2022-10-27T02:51:29.561Z","comments":true,"path":"api/articles/分布式系统.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159416/4k-beneath-the-clouds-wallpapers-159416-909810-8416989.png","text":"直观的感受区块链 比特币 以太坊 一个词来描述分布式系统：分而治之 分布式系统的前世今生分布式系统看起来就像一个计算机。计算机包括五大体系结构（即冯诺依曼结构），它有五大部件：分别是控制器、运算器、存储器、输入及输出。 你可以这么理解：一个分布式系统也包含这五大部件，其中最重要的...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"分布式","slug":"分布式","count":6,"path":"api/categories/分布式.json"}],"tags":[{"name":"分布式数据库","slug":"分布式数据库","count":1,"path":"api/tags/分布式数据库.json"},{"name":"分布式存储","slug":"分布式存储","count":1,"path":"api/tags/分布式存储.json"},{"name":"分布式计算","slug":"分布式计算","count":1,"path":"api/tags/分布式计算.json"},{"name":"架构学习","slug":"架构学习","count":1,"path":"api/tags/架构学习.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Kubernetes学习笔记 --kubegem","uid":"5d82079790f13b8d3ae4a637793178a7","slug":"kubegem","date":"2022-05-04T16:00:00.000Z","updated":"2022-11-02T02:59:25.298Z","comments":true,"path":"api/articles/kubegem.json","keywords":null,"cover":"https://gtwallpaper.org/sites/default/files/wallpaper/159420/4k-dramatic-sunset-over-blidinje-wallpapers-159420-21754-8191427.png","text":"概述KubeGems是一款以围绕 Kubernetes 通过自研和集成云原生项目而构建的通用性开源 PaaS 云管理平台。经过我们内部近一年的持续迭代，当前 KubeGems 的核心功能已经初步具备多云多租户场景下的统一管理。并通过插件化的方式，在用户界面中灵活控制包括 监控系统...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"Cloud-Native","slug":"Cloud-Native","count":6,"path":"api/categories/Cloud-Native.json"}],"tags":[{"name":"Kubernetes","slug":"Kubernetes","count":3,"path":"api/tags/Kubernetes.json"},{"name":"k8s-dashboard","slug":"k8s-dashboard","count":3,"path":"api/tags/k8s-dashboard.json"},{"name":"Docker","slug":"Docker","count":2,"path":"api/tags/Docker.json"},{"name":"kubegem","slug":"kubegem","count":1,"path":"api/tags/kubegem.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
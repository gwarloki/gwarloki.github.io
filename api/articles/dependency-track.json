{"title":"软件供应链安全分析工具-Dependency-Track","uid":"afb19c047533022f884066f88b6a2608","slug":"dependency-track","date":"2022-06-23T09:38:36.281Z","updated":"2022-10-26T01:44:14.447Z","comments":true,"path":"api/articles/dependency-track.json","keywords":null,"cover":[],"content":"<h1 id=\"dependency-track\"><a href=\"#dependency-track\" class=\"headerlink\" title=\"dependency-track\"></a>dependency-track</h1><h2 id=\"概述和背景\"><a href=\"#概述和背景\" class=\"headerlink\" title=\"概述和背景\"></a>概述和背景</h2><p>[[SCA软件成分分析前期探索#OWASP Dependency-Track]]</p>\n<h2 id=\"部署DT\"><a href=\"#部署DT\" class=\"headerlink\" title=\"部署DT\"></a>部署DT</h2><h3 id=\"quick-start\"><a href=\"#quick-start\" class=\"headerlink\" title=\"quick-start\"></a>quick-start</h3><p>[[SCA软件成分分析前期探索#部署]]<br><strong>docker安装版本为V3.8.0</strong><br><img src=\"http://img.moses.wang/new/20220627110610.png\"></p>\n<h3 id=\"K8S部署\"><a href=\"#K8S部署\" class=\"headerlink\" title=\"K8S部署\"></a>K8S部署</h3><p><strong><a href=\"https://github.com/evryfs/helm-charts\">helm-charts</a></strong><br>前期准备：安装SC</p>\n<ol>\n<li><p>快速使用[[longhorn]]</p>\n</li>\n<li><p>设置默认存储类</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl patch storageclass longhorn -p &#39;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io&#x2F;is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#39;</code></pre></li>\n<li><p>使用Helm v3安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">helm repo add evryfs-oss https:&#x2F;&#x2F;evryfs.github.io&#x2F;helm-charts&#x2F;\nhelm install dependency-track evryfs-oss&#x2F;dependency-track --namespace dependency-track --create-namespace</code></pre></li>\n<li><p>创建路由<br><img src=\"http://img.moses.wang/new/20220627111306.png\"></p>\n</li>\n<li><p>配置config.json</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#x2F;app&#x2F;static $ cat config.json\n&#123;\n  &quot;API_BASE_URL&quot;: &quot;http:&#x2F;&#x2F;dt-api.kubegems.io:32126&quot;,\n  &quot;OIDC_ISSUER&quot;: &quot;&quot;,\n  &quot;OIDC_CLIENT_ID&quot;: &quot;&quot;,\n  &quot;OIDC_SCOPE&quot;: &quot;openid profile email&quot;,\n  &quot;OIDC_FLOW&quot;: &quot;&quot;,\n  &quot;OIDC_LOGIN_BUTTON_TEXT&quot;: &quot;&quot;\n&#125;</code></pre></li>\n<li><p>测试<br>登录-修改密码-创建测试项目.漏洞分析及依赖图谱如下：<br><img src=\"http://img.moses.wang/new/20220627111537.png\"></p>\n</li>\n</ol>\n<p><img src=\"http://img.moses.wang/new/20220627111617.png\"></p>\n<ol start=\"7\">\n<li>一段事件后backend服务出现装载卷失败(也有可能是CPU的问题)<a href=\"https://github.com/DependencyTrack/dependency-track/issues/264\">Dependency Track High CPU Behaviour · Issue #264 · DependencyTrack&#x2F;dependency-track · GitHub</a>，尝试各种回滚、扩容等方式失败后重新部署，重新部署可能是Longhorn的PV卷未删除导致安装失败，不能创建PVC。修改value文件后重新安装成功。<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 下载chart\nhelm fetch evryfs-oss&#x2F;dependency-track\n# 解压\ntar -zxf dependency-track-1.4.0.tgz\n# 修改value.yaml文件，更换SC，使用local-path\nvi value.yaml \n# 修改postgresql的部署文件，更换sc,使用local-path\nvim deployment.yaml\n# 重新安装\nhelm install -f values.yaml dependency-track . --namespace dependency-track --create-namespace</code></pre></li>\n</ol>\n<h3 id=\"DT更换数据库\"><a href=\"#DT更换数据库\" class=\"headerlink\" title=\"DT更换数据库\"></a>DT更换数据库</h3><p><a href=\"https://mp.weixin.qq.com/s/_6G3gQHKoTmFKkdiE2gBLg\">Dependency-Track更换数据库</a>文档适用于docker部署，K8S暂未研究</p>\n<h2 id=\"SBOM-软件物料清单SBOM\"><a href=\"#SBOM-软件物料清单SBOM\" class=\"headerlink\" title=\"SBOM[[软件物料清单SBOM]]\"></a>SBOM[[软件物料清单SBOM]]</h2><h3 id=\"CycloneDX工具\"><a href=\"#CycloneDX工具\" class=\"headerlink\" title=\"CycloneDX工具\"></a>CycloneDX工具</h3><p><a href=\"https://cyclonedx.org/tool-center/\">CycloneDX Tool Center</a><br><img src=\"http://img.moses.wang/new/20220624135013.png\"></p>\n<h3 id=\"cdxgen\"><a href=\"#cdxgen\" class=\"headerlink\" title=\"cdxgen\"></a>cdxgen</h3><ul>\n<li>项目地址<a href=\"https://github.com/AppThreat/cdxgen\">cdxgen</a></li>\n<li>官网<a href=\"https://slscan.io/en/latest/\">Scan docs</a></li>\n</ul>\n<h4 id=\"安装测试\"><a href=\"#安装测试\" class=\"headerlink\" title=\"安装测试\"></a>安装测试</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">xfxj01@moses  ~&#x2F;Downloads  nvm install v16.15.1\nxfxj01@moses  ~&#x2F;Downloads  npm install -g @appthreat&#x2F;cdxgen</code></pre>\n<p><img src=\"http://img.moses.wang/new/20220630093640.png\"></p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p><strong>使用场景和更多的功能为深入研究，详见官网</strong></p>\n<h3 id=\"CycloneDX-Maven-Plugin\"><a href=\"#CycloneDX-Maven-Plugin\" class=\"headerlink\" title=\"CycloneDX Maven Plugin\"></a>CycloneDX Maven Plugin</h3><p>在项目pom文件的plugin中引入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;plugin&gt;\n\t\t\t\t&lt;groupId&gt;org.cyclonedx&lt;&#x2F;groupId&gt;\n\t\t\t\t&lt;artifactId&gt;cyclonedx-maven-plugin&lt;&#x2F;artifactId&gt;\n\t\t\t\t&lt;version&gt;2.5.1&lt;&#x2F;version&gt;\n\t\t\t\t&lt;executions&gt;\n\t\t\t\t\t&lt;execution&gt;\n\t\t\t\t\t\t&lt;phase&gt;package&lt;&#x2F;phase&gt;\n\t\t\t\t\t\t&lt;goals&gt;\n\t\t\t\t\t\t\t&lt;goal&gt;makeAggregateBom&lt;&#x2F;goal&gt;\n\t\t\t\t\t\t&lt;&#x2F;goals&gt;\n\t\t\t\t\t&lt;&#x2F;execution&gt;\n\t\t\t\t&lt;&#x2F;executions&gt;\n\t\t\t\t&lt;configuration&gt;\n\t\t\t\t\t&lt;projectType&gt;library&lt;&#x2F;projectType&gt;\n\t\t\t\t\t&lt;schemaVersion&gt;1.3&lt;&#x2F;schemaVersion&gt;\n\n\t\t\t\t\t&lt;includeBomSerialNumber&gt;true&lt;&#x2F;includeBomSerialNumber&gt;\n\n\t\t\t\t\t&lt;includeCompileScope&gt;true&lt;&#x2F;includeCompileScope&gt;\n\n\t\t\t\t\t&lt;includeProvidedScope&gt;true&lt;&#x2F;includeProvidedScope&gt;\n\n\t\t\t\t\t&lt;includeRuntimeScope&gt;true&lt;&#x2F;includeRuntimeScope&gt;\n\n\t\t\t\t\t&lt;includeSystemScope&gt;true&lt;&#x2F;includeSystemScope&gt;\n\n\t\t\t\t\t&lt;includeTestScope&gt;false&lt;&#x2F;includeTestScope&gt;\n\n\t\t\t\t\t&lt;includeLicenseText&gt;false&lt;&#x2F;includeLicenseText&gt;\n\n\t\t\t\t\t&lt;outputFormat&gt;all&lt;&#x2F;outputFormat&gt;\n\n\t\t\t\t\t&lt;outputName&gt;bom&lt;&#x2F;outputName&gt;\n\n\t\t\t\t&lt;&#x2F;configuration&gt;\n\n\t\t\t&lt;&#x2F;plugin&gt;</code></pre>\n\n<h4 id=\"CycloneDX-BOMs-Repo\"><a href=\"#CycloneDX-BOMs-Repo\" class=\"headerlink\" title=\"CycloneDX BOMs Repo\"></a>CycloneDX BOMs Repo</h4><p><strong>DT不支持存储原始BOM文件，可以使用BOM Repo进行存储</strong><br><a href=\"https://github.com/CycloneDX/cyclonedx-bom-repo-server\">cyclonedx-bom-repo-server</a><br>使用docker部署</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 本地测试\ndocker run --env REPO__DIRECTORY&#x3D;&#x2F;repo --env ALLOWEDMETHODS__GET&#x3D;&quot;true&quot; --env ALLOWEDMETHODS__POST&#x3D;&quot;true&quot; --env ALLOWEDMETHODS__DELETE&#x3D;&quot;true&quot; --tty --interactive -p 8000:8080 cyclonedx&#x2F;cyclonedx-bom-repo-server\n# 持久化存储\nmkdir repo\ndocker run --volume &quot;$(pwd)&#x2F;repo&quot;:&#x2F;repo --env REPO__DIRECTORY&#x3D;&#x2F;repo --env ALLOWEDMETHODS__GET&#x3D;&quot;true&quot; --env ALLOWEDMETHODS__POST&#x3D;&quot;true&quot; --env ALLOWEDMETHODS__DELETE&#x3D;&quot;true&quot; --tty --interactive -p 8000:8080 cyclonedx&#x2F;cyclonedx-bom-repo-server</code></pre>\n\n<h2 id=\"安装Jenkins测试环境\"><a href=\"#安装Jenkins测试环境\" class=\"headerlink\" title=\"安装Jenkins测试环境\"></a>安装Jenkins测试环境</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -d -p 8222:8080 -u root  -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock jenkinsci&#x2F;blueocean:latest\n# 初始密码\ncat &#x2F;var&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword</code></pre>\n<h3 id=\"安装CI-x2F-CD插件\"><a href=\"#安装CI-x2F-CD插件\" class=\"headerlink\" title=\"安装CI&#x2F;CD插件\"></a>安装CI&#x2F;CD插件</h3><ol>\n<li><p>安装<strong>OWASP Dependency-Track</strong>插件</p>\n</li>\n<li><p>系统配置<br><img src=\"http://img.moses.wang/new/20220627153354.png\"></p>\n</li>\n<li><p>配置maven及JDK环境变量</p>\n</li>\n<li><p>build测试</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd hctc-auditor-message-master-42d51509695f2e19d602bfed846d71b052151176\n# 打包\nmvn clean install -D mvn.test.skip&#x3D;true\n# 生成bom.xml文件\nmvn org.cyclonedx:cyclonedx-maven-plugin:makeBom</code></pre>\n<p><img src=\"http://img.moses.wang/new/20220628103400.png\"></p>\n</li>\n<li><p>构建后操作</p>\n</li>\n</ol>\n<ul>\n<li>在【Build】处选择“Execute Shell”，然后输入构建语句，并添加<code>mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom</code>生成sbom文件</li>\n<li>在【Post-build Actions】处选择“Publish BOM to Dependency-Track”,填写project name 和 project version，在“Artifact”处输入<code>$&#123;WORKSPACE&#125;/target/bom.json</code><br><img src=\"http://img.moses.wang/new/20220628103421.png\"></li>\n</ul>\n<ol start=\"6\">\n<li>测试结果<br><strong>测试过程先在DT中创建的项目，不知道能不能自动创建</strong><br><img src=\"http://img.moses.wang/new/20220629151728.png\"></li>\n<li>测试pipeline项目-创建API<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1.首先在Dependency-Track中点击【Administration】-&gt; 【Access Management】-&gt;【Teams】,创建一个Team并记录其API Key。\n2.API Key 添加PROJECT_CREATION_UPLOAD权限</code></pre></li>\n<li>pipeline script<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">pipeline &#123;\n    agent any\n    stages &#123;\n        stage(&#39;Start&#39;) &#123;\n           steps &#123;\n               echo &#39;Hello World&#39;\n           &#125;\n       &#125;\n       stage(&#39;Build&#39;) &#123;\n           steps &#123;\n                git &#39;https:&#x2F;&#x2F;github.com&#x2F;sohutv&#x2F;cachecloud.git&#39;\n                sh &quot;mvn -DskipTests&#x3D;true clean package&quot;\n            &#125;\n       &#125;\n        stage(&#39;Generating SBOM with Cyclonedx&#39;) &#123;\n            steps &#123;\n                sh &#39;mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom&#39;\n            &#125;\n        &#125;\n        stage(&#39;dependencyTrackPublisher&#39;) &#123;\n            steps &#123;\n                withCredentials([string(credentialsId: &#39;dt&#39;, variable: &#39;API_KEY&#39;)]) &#123;\n                    dependencyTrackPublisher artifact: &#39;target&#x2F;bom.xml&#39;, projectId: &#39;534a7d70-c510-4770-8796-2abdac6f55d7&#39;,  autoCreateProjects: true, dependencyTrackApiKey:API_KEY, synchronous: false\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></li>\n<li>参考 <a href=\"https://www.jenkins.io/doc/pipeline/steps/dependency-track/\">OWASP Dependency-Track Plugin</a></li>\n<li>问题 使用<code>projectName</code>和<code>projectVersion</code>创建流水线失败<br><img src=\"http://img.moses.wang/new/20220720112953.png\"><br><code>ERROR: Either the projectId or the projectName and projectVersion have to be specified</code><br><strong>issue</strong></li>\n</ol>\n<ul>\n<li><a href=\"https://github.com/DependencyTrack/dependency-track/issues/263\">Dependency-Track Jenkins Plugin Handling of Project Deletion in DT Server</a></li>\n<li><a href=\"https://github.com/DependencyTrack/dependency-track/issues/499\">Auto-Create Projects doesn’t work - 3.6.1 Version</a><pre class=\"line-numbers language-none\"><code class=\"language-none\">projectName and projectVersion are already properties that get saved. For freestyle builds, it forces the use of projectId and will only record that, but for pipeline jobs you get the option to specify either the projectId or the projectName + projectVersion.\n\nHowever, projectName + projectVersion currently doesn&#39;t support synchronous publishing mode due to API limitations in DT.</code></pre></li>\n</ul>\n<ol start=\"11\">\n<li>解决问题10</li>\n</ol>\n<ul>\n<li>增加API token 权限：创建项目需要<code>PROJECT_CREATION_UPLOAD</code>权限，查看result结果需要<code>VULNERABILITY_ANALYSIS</code>和<code>VIEW_VULNERABILITY</code>等，建议可添加全部权限。</li>\n</ul>\n<ol start=\"12\">\n<li>进阶用法</li>\n</ol>\n<ul>\n<li>使用质量门阈值控制，同DC</li>\n<li><code>Enable synchronous publishing mode</code>同步发布模式将BOM发布到DT并返回依赖跟踪处理的结果</li>\n<li><code>Publish Dependency-Check results</code>公开依赖处理的结果</li>\n<li>使用pipeline处理：<pre class=\"line-numbers language-groovy\" data-language=\"groovy\"><code class=\"language-groovy\">import hudson.model.*;\nimport hudson.*\nimport groovy.json.JsonSlurper;\n\npipeline &#123;\n    agent any\n\n    tools &#123;\n        &#x2F;&#x2F; maven &#39;maven&#39;\n        &#x2F;&#x2F;maven &#39;maven-apollo&#39;\n        maven maven\n        git &#39;Default&#39;\n        jdk &#39;jdk&#39;\n        &#x2F;&#x2F; nodejs &#39;node&#39;\n\n    &#125;\n         \n    stages &#123;\n        stage(&#39;删除上次构建&#39; )&#123;\n            steps &#123;\n               \n                sh &#39;rm -rf *&#39;\n                \n                wrap([$class: &#39;BuildUser&#39;]) &#123;\n                  \n                   script&#123;\n                       buildName &quot;#$&#123;projectName&#125;-$&#123;BRANCH&#125;-$&#123;env.BUILD_USER&#125;&quot;   \n\n                   &#125;\n                &#125;\n                \n            &#125;\n        &#125;\n        \n        stage(&#39;拉取代码&#39;)&#123;\n            steps &#123;\n                echo &#39;代码分支:&#39;+BRANCH\n                echo &#39;代码地址:&#39; +GIT_URL\n                git branch: BRANCH, credentialsId: &#39;0eeb53a0-0390-41a4-9ac2-8d4c4c5c884f&#39;, url: GIT_URL\n                \n            &#125;\n        &#125;\n\n       \n        stage(&#39;build&#39;) &#123;\n         steps &#123;\n                sh &#39;&#39;&#39;\n                    mvn clean install -e -U -DskipDockerPush -DdockerImageTags&#x3D;latest -Dmaven.test.skip&#x3D;true $mvn_params -f pom.xml\n                    \n                &#39;&#39;&#39;\n             &#125;\n         &#125;\n         \n        stage(&#39;Generating SBOM with Cyclonedx&#39;) &#123;\n            steps &#123;\n                sh &#39;mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom&#39;\n            &#125;\n        &#125;\n        \n        stage(&#39;安全合规检查&#39;)&#123;\n            steps &#123;\n                script &#123;\n                    def jsonPayload &#x3D; new File(&quot;$WORKSPACE&#x2F;target&#x2F;bom.json&quot;).text\n                    def slurper &#x3D; new JsonSlurper()\n                    def states &#x3D; slurper.parseText(jsonPayload)\n                    def components &#x3D; states.components\n                    def checks &#x3D; [&#39;org.apache.shiro:shiro-spring&#39;:&#39;1.9.1&#39;]\n                    def fail_components &#x3D; &quot;&quot;\n                    for (component in components)&#123;\n                        def dep_name &#x3D; component.group + &quot;:&quot; + component.name\n                        \n                        if (dep_name in checks)&#123;\n                            current_version &#x3D; component.version\n                            \n                            check_version &#x3D; checks.get(dep_name)\n                            String[] current_version_chars &#x3D; current_version.split(&#39;\\\\.&#39;)\n                            String[] check_version_chars &#x3D; check_version.split(&#39;\\\\.&#39;)\n                            \n                            \n                            for(int i&#x3D;0; i&lt;current_version_chars.size(); i++)&#123;\n                                curr &#x3D; Integer.parseInt(current_version_chars[i])\n                                check &#x3D; Integer.parseInt(check_version_chars[i])\n                                if (curr &lt; check)&#123;\n                                    fail_components +&#x3D; component.group + &quot;:&quot; + component.name + &quot;版本过低，当前版本为：&quot; + component.version + &quot;，应不低于&quot; + check_version + &quot;\\n&quot;\n                                    break\n                                &#125;\n                            &#125;\n                        &#125;\n                        \n                    &#125;\n                    if(fail_components !&#x3D; &quot;&quot;)&#123;\n                        println(fail_components)\n                        error &quot;安全合规检查失败，请升级版本！！！&quot;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        \n        \n        stage(&#39;dependencyTrackPublisher&#39;) &#123;\n            steps &#123;\n                withCredentials([string(credentialsId: &#39;dt&#39;, variable: &#39;API_KEY&#39;)]) &#123;\n                    dependencyTrackPublisher artifact: &#39;target&#x2F;bom.xml&#39;, projectName: projectName, projectVersion: branch, \\\n                                            autoCreateProjects: true, dependencyTrackApiKey:API_KEY, synchronous: true, \\\n                                            failedNewCritical : 10000, failedNewHigh : 10000, failedNewLow: 10000, failedNewMedium: 10000, \\\n                                            failedTotalCritical : 10000, failedTotalHigh : 10000, failedTotalLow : 10000, failedTotalMedium : 10000,\n                                            unstableNewCritical : 10000, unstableNewHigh : 10000, unstableNewLow : 10000, unstableNewMedium : 10000,\\\n                                            unstableTotalCritical : 10000, unstableTotalHigh : 10000,unstableTotalLow : 10000, unstableTotalMedium : 10000\n                &#125;\n            &#125;\n        &#125;\n        \n    &#125;\n\n&#125;\n</code></pre>\n<img src=\"http://img.moses.wang/new/20220801113051.png\"></li>\n</ul>\n<p><img src=\"http://img.moses.wang/new/20220801113147.png\"></p>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"headerlink\" title=\"usage\"></a>usage</h2><h3 id=\"Analyzers\"><a href=\"#Analyzers\" class=\"headerlink\" title=\"Analyzers\"></a><strong>Analyzers</strong></h3><p>分析功能支持四种分析方式：</p>\n<ul>\n<li>internal:默认开启，用于NVD和VulnDB的在线分析</li>\n<li>NPM Audit：默认开启，node.js的在线云服务</li>\n<li>Sonatype OSS Index：默认关闭，需要配置：</li>\n<li>VulnDB：默认关闭，需要配置</li>\n</ul>\n<h4 id=\"Sonatype-OSS-Index\"><a href=\"#Sonatype-OSS-Index\" class=\"headerlink\" title=\"Sonatype OSS Index\"></a>Sonatype OSS Index</h4><p><a href=\"https://ossindex.sonatype.org/\">sonatype</a>免费注册,注册后将注册邮箱和APItoken集成到deployment-track。sonatype支持上百万中组件的搜索，可以通过 <a href=\"https://ossindex.sonatype.org/doc/rest\">REST API</a>进行依赖扫描，同时sonatype还提供一款GitHub APP，<a href=\"https://github.com/marketplace/muse-dev/plan/MLP_kgDNGN8#pricing-and-setup\">Sonatype Lift · GitHub Marketplace · GitHub</a>在每次来取请求时标记漏洞、在代码review时报告找的高风险issue。<br><img src=\"http://img.moses.wang/new/20220706091427.png\"><br><img src=\"http://img.moses.wang/new/20220706094151.png\"></p>\n<h4 id=\"VulnDB\"><a href=\"#VulnDB\" class=\"headerlink\" title=\"VulnDB\"></a>VulnDB</h4><p><a href=\"https://docs.dependencytrack.org/datasources/vulndb/\">VulnDB配置文档</a>支持两种方式：</p>\n<ul>\n<li>通过VulnDB REST API进行分析<a href=\"https://vuldb.com/?kb.api\">API</a>文档中未找到<code>Consumer key</code> 和<code>Consumer secret</code>，使用api key和用户名进行配置，可能存在问题。</li>\n<li>使用VULnDB 镜像数据库分析<br>下载并安装VulnDB镜像<a href=\"https://github.com/stevespringett/vulndb-data-mirror\">GitHub - stevespringett&#x2F;vulndb-data-mirror: A simple Java command-line utility to mirror the entire contents of VulnDB.</a><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vulndb-data-mirror.sh \\\n    --consumer-key mykey \\\n    --consumer-secret mysecret \\\n    --dir &quot;~&#x2F;.dependency-track&#x2F;vulndb&quot;</code></pre></li>\n</ul>\n<h3 id=\"漏洞来源\"><a href=\"#漏洞来源\" class=\"headerlink\" title=\"漏洞来源\"></a>漏洞来源</h3><p>漏洞来源主要是：</p>\n<ul>\n<li>NVD：默认开启，在线feeds地址</li>\n<li>Github Advisories:默认关闭，需要配置。<br>GitHubPAT配置文档<a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">Creating a personal access token - GitHub Docs</a>。<br><img src=\"http://img.moses.wang/new/20220706110724.png\"></li>\n</ul>\n<h3 id=\"Repositories\"><a href=\"#Repositories\" class=\"headerlink\" title=\"Repositories\"></a><strong>Repositories</strong></h3><p>默认不需要配置，添加了内部私仓<a href=\"http://maven.in.happycfc.com/\">Nexus Repository Manager</a></p>\n<h3 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h3><h4 id=\"添加webhook-slack\"><a href=\"#添加webhook-slack\" class=\"headerlink\" title=\"添加webhook-slack\"></a>添加webhook-slack</h4><p>添加webhook，但是没有消息提醒。template中的JSON格式不满足slack的消息格式。<a href=\"https://api.slack.com/messaging/composing/layouts#attachments\">Creating rich message layouts | Slack</a><br><img src=\"http://img.moses.wang/new/20220707161530.png\"></p>\n<h4 id=\"添加mail\"><a href=\"#添加mail\" class=\"headerlink\" title=\"添加mail\"></a>添加mail</h4><h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p><img src=\"http://img.moses.wang/new/20220720130830.png\"></p>\n<h2 id=\"trouble-shouting\"><a href=\"#trouble-shouting\" class=\"headerlink\" title=\"trouble-shouting\"></a>trouble-shouting</h2><h3 id=\"smtp\"><a href=\"#smtp\" class=\"headerlink\" title=\"smtp\"></a>smtp</h3><p>![[2022-08-08_周一#DT 通知功能配置问题]]</p>\n<h3 id=\"请求实例太大\"><a href=\"#请求实例太大\" class=\"headerlink\" title=\"请求实例太大\"></a>请求实例太大</h3><p>报错信息：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">[DependencyTrack] Publishing artifact to Dependency-Track - [http:&#x2F;&#x2F;dt-api.kubegems.io:32126](http:&#x2F;&#x2F;dt-api.kubegems.io:32126&#x2F;)\n[DependencyTrack] An error occurred connecting to Dependency-Track - HTTP response code: 413 Request Entity Too Large\n[DependencyTrack] &lt;html&gt;&lt;head&gt;&lt;title&gt;413 Request Entity Too Large&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;413 Request Entity Too Large&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;&lt;hr&gt;&lt;center&gt;nginx&#x2F;1.19.9&lt;&#x2F;center&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre>\n<p>修改路由配置，添加annotation<a href=\"https://docs.nginx.com/nginx-ingress-controller/configuration/ingress-resources/advanced-configuration-with-annotations\">Advanced Configuration with Annotations | NGINX Ingress Controller</a></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># 默认1m 键值对\nnginx.org&#x2F;client-max-body-size 100m\n# anotations\n annotations:\n    nginx.org&#x2F;client-max-body-size: 100m</code></pre>\n<p><img src=\"http://img.moses.wang/new/20220915131823.png\"></p>\n<h3 id=\"IO阻塞\"><a href=\"#IO阻塞\" class=\"headerlink\" title=\"IO阻塞\"></a>IO阻塞</h3><p><img src=\"http://img.moses.wang/new/20221026093421.png\"></p>\n<p><img src=\"http://img.moses.wang/new/20221026093811.png\"></p>\n<p>Q:jenkins pipeline jobe push sbom.xml 2 dt timeout.</p>\n<p>A:分析日志<a href=\"http://img.moses.wang/note/dependency-track-apiserver-5ff464b78c-xsnsk.log\">apiserver-log</a>。Jenkins job失败时间最早发生在17:18分钟，但是应用日志只有从17:36分开始记录的信息。初步分析可能是<code>2022-09-06 17:53:58,790 ERROR [ServerRuntime$Responder] An I/O error has occurred while writing a response message entity to the container output stream.org.glassfish.jersey.server.internal.process.MappableException: org.eclipse.jetty.io.EofException</code><br>既-短时间内大量的并发请求到APIserver的某些接口，接口处理超时导致资源耗尽引发阻塞。<br>可能情况1：漏洞库更新任务占据了大量IO，通过日志分析：</p>\n<ul>\n<li>NistMirrorTask download 用时18710ms</li>\n<li>NistMirrorTask parse 用时5023970ms</li>\n<li>NistMirrorTask 总用时5062313ms（约<strong>1.4小时</strong>）</li>\n<li>GitHubAdvisoryMirrorTask总用时497066ms（约<strong>1.6分钟可忽略</strong>）<br>可能情况2：push SBOM大量并发长请求，导致APIserver网络阻塞、I&#x2F;O过载</li>\n<li>Jenkins 对接DT用到了put方法publishing SBOM，</li>\n<li>jenkins使用<code>Enable synchronous publishing mode</code>同步发布模式将BOM发布到DT并返回依赖跟踪处理的结果，可能在<code>NistMirrorTask</code> <code>GitHubAdvisoryMirrorTask</code>  <code>MetricsUpdateTask</code>后同步更新信息<br>A:解决思路</li>\n<li><input disabled=\"\" type=\"checkbox\"> 申请服务器部署war包的方式部署（以及集群部署？）</li>\n<li><input disabled=\"\" type=\"checkbox\"> 更换MySQL数据库</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 现有K8S容器环境中设置时区，设置漏洞库更新时间，扩容副本 ✅ 2022-09-07 添加key:TZ value:Asia&#x2F;Shanghai</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 提个issue ✅ 2022-09-07</li>\n<li><input disabled=\"\" type=\"checkbox\"> 修改Jenkins<code>timeout</code>参数</li>\n</ul>\n<p>Q：other<br><a href=\"https://github.com/DependencyTrack/dependency-track/issues/1059\">ERROR [LoggableUncaughtExceptionHandler] An unknown error occurred in an asynchronous event or notification thread · Issue #1059 · DependencyTrack&#x2F;dependency-track · GitHub</a><br><strong>近1周资源监控信息</strong><br><img src=\"http://img.moses.wang/new/20220907144404.png\"><br><strong>重启pod后的资源监控信息</strong><a href=\"http://img.moses.wang/note/dependency-track-apiserver-6746cbfcbb-phcgt.log\">重启后的日志</a><br><img src=\"http://img.moses.wang/new/20220907145913.png\"></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://github.com/AppThreat/cdxgen\">GitHub - AppThreat&#x2F;cdxgen: Creates CycloneDX Software Bill-of-Materials (SBOM) for your projects from source and container images. Supports many languages and package managers. Integrate in your CI&#x2F;&#x2F;CD pipeline with automatic submission to Dependency Track server.</a><br><a href=\"https://github.com/CycloneDX/cyclonedx-cli\">GitHub - CycloneDX&#x2F;cyclonedx-cli: CycloneDX CLI tool for SBOM analysis, merging, diffs and format conversions.</a><br><a href=\"https://slscan.io/en/latest/\">Site Unreachable</a><br><a href=\"https://mp.weixin.qq.com/s/gQOni7K_2q65ARvcxZRUug\">深度解读 |《构建软件组件透明度：建立通用的软件物料清单（SBOM）》（上）</a><br><a href=\"https://plugins.jenkins.io/dependency-track/\">OWASP Dependency-Track | Jenkins plugin</a><br><a href=\"https://blog.csdn.net/qq_34659777/article/details/105569508\">使用Jenkins新建并配置一个本地项目</a><br><a href=\"https://blog.csdn.net/baidu_37038557/article/details/85047378\">Jenkins持续集成demo</a><br><a href=\"https://plugins.jenkins.io/github/\">GitHub | Jenkins plugin</a><br><a href=\"https://www.jenkins.io/doc/pipeline/steps/dependency-track/\">OWASP Dependency-Track Plugin</a><br><a href=\"https://xz.aliyun.com/t/11492\">基于开源工具实现软件成分分析SCA - 先知社区</a><br><a href=\"https://www.anquanke.com/post/id/238249\">基于 Dependency-Track 构建免费的第三方组件安全管理平台 - 安全客，安全资讯平台</a></p>\n","feature":true,"text":"dependency-track概述和背景[[SCA软件成分分析前期探索#OWASP Dependency-Track]] 部署DTquick-start[[SCA软件成分分析前期探索#部署]]docker安装版本为V3.8.0 K8S部署helm-charts前期准备：安装SC...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"SCA","slug":"SCA","count":4,"path":"api/tags/SCA.json"},{"name":"部署手册","slug":"部署手册","count":2,"path":"api/tags/部署手册.json"},{"name":"SBOM","slug":"SBOM","count":2,"path":"api/tags/SBOM.json"},{"name":"OWASP","slug":"OWASP","count":1,"path":"api/tags/OWASP.json"},{"name":"dependency-track","slug":"dependency-track","count":1,"path":"api/tags/dependency-track.json"},{"name":"软件供应链","slug":"软件供应链","count":1,"path":"api/tags/软件供应链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#dependency-track\"><span class=\"toc-text\">dependency-track</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0%E5%92%8C%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">概述和背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2DT\"><span class=\"toc-text\">部署DT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#quick-start\"><span class=\"toc-text\">quick-start</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#K8S%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">K8S部署</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DT%E6%9B%B4%E6%8D%A2%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">DT更换数据库</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SBOM-%E8%BD%AF%E4%BB%B6%E7%89%A9%E6%96%99%E6%B8%85%E5%8D%95SBOM\"><span class=\"toc-text\">SBOM[[软件物料清单SBOM]]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CycloneDX%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">CycloneDX工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cdxgen\"><span class=\"toc-text\">cdxgen</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">安装测试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CycloneDX-Maven-Plugin\"><span class=\"toc-text\">CycloneDX Maven Plugin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CycloneDX-BOMs-Repo\"><span class=\"toc-text\">CycloneDX BOMs Repo</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Jenkins%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">安装Jenkins测试环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85CI-x2F-CD%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">安装CI&#x2F;CD插件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#usage\"><span class=\"toc-text\">usage</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Analyzers\"><span class=\"toc-text\">Analyzers</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Sonatype-OSS-Index\"><span class=\"toc-text\">Sonatype OSS Index</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#VulnDB\"><span class=\"toc-text\">VulnDB</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">漏洞来源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Repositories\"><span class=\"toc-text\">Repositories</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%9A%E7%9F%A5\"><span class=\"toc-text\">通知</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0webhook-slack\"><span class=\"toc-text\">添加webhook-slack</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0mail\"><span class=\"toc-text\">添加mail</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#API\"><span class=\"toc-text\">API</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#trouble-shouting\"><span class=\"toc-text\">trouble-shouting</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#smtp\"><span class=\"toc-text\">smtp</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%AE%9E%E4%BE%8B%E5%A4%AA%E5%A4%A7\"><span class=\"toc-text\">请求实例太大</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IO%E9%98%BB%E5%A1%9E\"><span class=\"toc-text\">IO阻塞</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"软件成分分析工具评估开放指南","uid":"0f4f52fd9bba6992ed16037b649e9241","slug":"软件成分分析工具评估开放指南","date":"2022-10-26T01:08:35.000Z","updated":"2022-10-26T01:42:27.527Z","comments":true,"path":"api/articles/软件成分分析工具评估开放指南.json","keywords":null,"cover":null,"text":"1.介绍 借助软件成分分析（SCA）工具，软件开发团队能从许可证合规和安全漏洞角度跟踪和分析引入到项目里的任何开源代码。这样的工具发现开源代码（不同程度的细节和功能），他们直接和间接依赖、许可证有效性，和任何已知的安全漏洞及潜在的攻击。好多公司提供软件成分分析（SCA）工具套装、...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"SCA","slug":"SCA","count":4,"path":"api/tags/SCA.json"},{"name":"软件成分分析","slug":"软件成分分析","count":1,"path":"api/tags/软件成分分析.json"},{"name":"评估开放指南","slug":"评估开放指南","count":1,"path":"api/tags/评估开放指南.json"},{"name":"产品选型","slug":"产品选型","count":1,"path":"api/tags/产品选型.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"软件供应链安全分析工具-Dependency-Check","uid":"520e1d6d52856a91475d0b89567aa470","slug":"dependency-check","date":"2022-06-22T05:45:00.000Z","updated":"2022-10-26T01:44:33.827Z","comments":true,"path":"api/articles/dependency-check.json","keywords":null,"cover":[],"text":"dependency-check0x01简介Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序，用于识别项目依赖项并检查是否存在任何已知的，公开披露的漏洞。目前，已支持Java、.NET、R...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"owasp","slug":"owasp","count":1,"path":"api/tags/owasp.json"},{"name":"dependency-check","slug":"dependency-check","count":1,"path":"api/tags/dependency-check.json"},{"name":"SCA","slug":"SCA","count":4,"path":"api/tags/SCA.json"},{"name":"软件供应链安全","slug":"软件供应链安全","count":2,"path":"api/tags/软件供应链安全.json"},{"name":"部署手册","slug":"部署手册","count":2,"path":"api/tags/部署手册.json"}],"author":{"name":"Moses","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}